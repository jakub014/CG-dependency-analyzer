/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityconsumer;

import eu.fasten.core.data.Constants;
import eu.fasten.core.dbconnectors.PostgresConnector;
import org.jooq.DSLContext;
import org.json.JSONArray;
import org.json.JSONTokener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import picocli.CommandLine;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.sql.SQLException;
import java.util.HashMap;

@CommandLine.Command(name = "Vulnerability Consumer")
public class Main implements Runnable {

    private static final Logger logger = LoggerFactory.getLogger(Main.class);

    @CommandLine.Option(names = {"-f", "--file"},
            paramLabel = "JSON_FILE",
            description = "Path to JSON file which contains the vulnerability")
    String jsonFile;

    @CommandLine.Option(names = {"-mdb", "--mvn_database"},
            paramLabel = "MVN_DB_URL",
            description = "Database URL for connection to mvn DB",
            defaultValue = "jdbc:postgresql:fasten_java")
    String mvnDbUrl;

    @CommandLine.Option(names = {"-pdb", "--pypi_database"},
            paramLabel = "PYPI_DB_URL",
            description = "Database URL for connection to pypi DB",
            defaultValue = "jdbc:postgresql:fasten_pypi")
    String pypiDbUrl;

    @CommandLine.Option(names = {"-cdb", "--debian_database"},
            paramLabel = "DEB_DB_URL",
            description = "Database URL for connection to debian KB",
            defaultValue = "jdbc:postgresql:fasten_c")
    String debianDbUrl;

    @CommandLine.Option(names = {"-u", "--user"},
            paramLabel = "DB_USER",
            description = "Database user name",
            defaultValue = "postgres")
    String dbUser;

    @CommandLine.Option(names = {"-p", "--path_folder"},
            paramLabel = "PATH_FOLDER",
            description = "Path to folder to store vulnearabilities",
            defaultValue = "/root/mnt/vulnerabilities/")
    String pathToFolder;

    @CommandLine.Option(names = {"-P", "--PURGE"},
            paramLabel = "PURGE_OPTION",
            description = "If set to true, all DBS will be purged from all vulnerability entries.")
    boolean purge;

    public static void main(String[] args) {
        final int exitCode = new CommandLine(new Main()).execute(args);
        System.exit(exitCode);
    }

    @Override
    public void run() {
        var vulnerabilityConsumer = new VulnerabilityConsumer.VulnerabilityConsumerExtension();
        try {
            var mvnContext = PostgresConnector.getDSLContext(mvnDbUrl, dbUser, true);
            var pypiContext = PostgresConnector.getDSLContext(pypiDbUrl, dbUser, true);
            var debianContext = PostgresConnector.getDSLContext(debianDbUrl, dbUser, true);

            var contexts = new HashMap<String, DSLContext>();
            contexts.put(Constants.debianForge, debianContext);
            contexts.put(Constants.mvnForge, mvnContext);
            contexts.put(Constants.pypiForge, pypiContext);

            vulnerabilityConsumer.setDBConnection(contexts);

            if (purge) {
                vulnerabilityConsumer.purgeVulnerabilitiesFromDB();
                return;
            }
        } catch (IllegalArgumentException | SQLException e) {
            logger.error("Could not connect to the database", e);
            return;
        }
        final FileReader reader;
        try {
            reader = new FileReader(jsonFile);
        } catch (FileNotFoundException e) {
            logger.error("Could not find the JSON file at " + jsonFile, e);
            return;
        }
        final JSONArray vulnsJson = new JSONArray(new JSONTokener(reader));
        vulnsJson.forEach(v -> vulnerabilityConsumer.consume(v.toString()));
        vulnerabilityConsumer.produce().ifPresent(System.out::println);
    }
}
