/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityconsumer.utils;

import eu.fasten.core.data.Constants;

import java.util.HashMap;
import java.util.Objects;

/**
 * Helper class to deal with PURLs, dissecting them into Objects.
 * This makes it easier to gather the information needed
 */
public class PURLPackage {
    String type;
    String namespace;
    String name;
    String version;
    HashMap<String, String> qualifiers;

    public PURLPackage() {
        qualifiers = new HashMap<>();
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getNamespace() {
        return namespace;
    }

    public void setNamespace(String namespace) {
        this.namespace = namespace;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public HashMap<String, String> getQualifiers() {
        return qualifiers;
    }

    public void setQualifiers(HashMap<String, String> qualifiers) {
        this.qualifiers = qualifiers;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PURLPackage that = (PURLPackage) o;
        if (namespace != null) {
            return Objects.equals(type, that.type) &&
                    namespace.equals(that.namespace) &&
                    Objects.equals(name, that.name) &&
                    Objects.equals(version, that.version) &&
                    qualifiers.equals(that.qualifiers);
        } else {
            return Objects.equals(type, that.type) &&
                    Objects.equals(name, that.name) &&
                    Objects.equals(version, that.version) &&
                    qualifiers.equals(that.qualifiers);
        }
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, namespace, name, version, qualifiers);
    }

    @Override
    public String toString() {
        return "pkg:" + type + '/' + namespace + '/' + name + '@' + version;
    }

    /**
     * Builds a PURL Object from a string
     * @param purl - follows purl-spec guidelines
     * @return - PURLPkg Object
     */
    public static PURLPackage getObjectFromPurl(String purl) {
        PURLPackage pp = new PURLPackage();

        String[] temp = purl.substring(4).split("/");
        String type = temp[0];

        String extraInfo = null;

        if (type.equals("deb")) {
            pp.setType(Constants.debianForge);
            pp.setNamespace(temp[1]);
            extraInfo = temp[2];
        } else if (type.equals("maven")) {
            pp.setType(Constants.mvnForge);
            pp.setNamespace(temp[1]);
            extraInfo = temp[2];
        } else if(type.equals("pypi")) {
            pp.setType(Constants.pypiForge);
            extraInfo = temp[1];
        }

        // Parse extra info
        String[] infoFirst = extraInfo.split("@");
        pp.setName(infoFirst[0]);
        String[] infoSecond = infoFirst[1].split("\\?");
        pp.setVersion(infoSecond[0]);

        // Check if there is any qualifier
        if (infoSecond.length > 1) {
            // Parse qualifiers
            String[] qualifiers = infoSecond[1].split("&");
            for (String qualifier : qualifiers) {
                String[] res = qualifier.split("=");
                pp.getQualifiers().put(res[0], res[1]);
            }
        }

        return pp;
    }
}
