/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen.udt;


import eu.fasten.core.data.metadatadb.codegen.Public;
import eu.fasten.core.data.metadatadb.codegen.enums.ReceiverType;
import eu.fasten.core.data.metadatadb.codegen.udt.records.ReceiverRecord;

import javax.annotation.processing.Generated;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Receiver extends UDTImpl<ReceiverRecord> {

    private static final long serialVersionUID = -860427907;

    /**
     * The reference instance of <code>public.receiver</code>
     */
    public static final Receiver RECEIVER = new Receiver();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReceiverRecord> getRecordType() {
        return ReceiverRecord.class;
    }

    /**
     * The attribute <code>public.receiver.line</code>.
     */
    public static final UDTField<ReceiverRecord, Integer> LINE = createField(DSL.name("line"), org.jooq.impl.SQLDataType.INTEGER, RECEIVER, "");

    /**
     * The attribute <code>public.receiver.type</code>.
     */
    public static final UDTField<ReceiverRecord, ReceiverType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(eu.fasten.core.data.metadatadb.codegen.enums.ReceiverType.class), RECEIVER, "");

    /**
     * The attribute <code>public.receiver.receiver_uri</code>.
     */
    public static final UDTField<ReceiverRecord, String> RECEIVER_URI = createField(DSL.name("receiver_uri"), org.jooq.impl.SQLDataType.CLOB, RECEIVER, "");

    /**
     * No further instances allowed
     */
    private Receiver() {
        super("receiver", null, null, false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
