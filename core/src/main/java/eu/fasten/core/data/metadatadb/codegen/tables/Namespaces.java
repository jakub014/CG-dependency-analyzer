/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen.tables;


import eu.fasten.core.data.metadatadb.codegen.Indexes;
import eu.fasten.core.data.metadatadb.codegen.Keys;
import eu.fasten.core.data.metadatadb.codegen.Public;
import eu.fasten.core.data.metadatadb.codegen.tables.records.NamespacesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Namespaces extends TableImpl<NamespacesRecord> {

    private static final long serialVersionUID = 1458156199;

    /**
     * The reference instance of <code>public.namespaces</code>
     */
    public static final Namespaces NAMESPACES = new Namespaces();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NamespacesRecord> getRecordType() {
        return NamespacesRecord.class;
    }

    /**
     * The column <code>public.namespaces.id</code>.
     */
    public final TableField<NamespacesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('namespaces_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.namespaces.namespace</code>.
     */
    public final TableField<NamespacesRecord, String> NAMESPACE = createField(DSL.name("namespace"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.namespaces</code> table reference
     */
    public Namespaces() {
        this(DSL.name("namespaces"), null);
    }

    /**
     * Create an aliased <code>public.namespaces</code> table reference
     */
    public Namespaces(String alias) {
        this(DSL.name(alias), NAMESPACES);
    }

    /**
     * Create an aliased <code>public.namespaces</code> table reference
     */
    public Namespaces(Name alias) {
        this(alias, NAMESPACES);
    }

    private Namespaces(Name alias, Table<NamespacesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Namespaces(Name alias, Table<NamespacesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Namespaces(Table<O> child, ForeignKey<O, NamespacesRecord> key) {
        super(child, key, NAMESPACES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NAMESPACES_PKEY, Indexes.UNIQUE_NAMESPACES);
    }

    @Override
    public Identity<NamespacesRecord, Long> getIdentity() {
        return Keys.IDENTITY_NAMESPACES;
    }

    @Override
    public UniqueKey<NamespacesRecord> getPrimaryKey() {
        return Keys.NAMESPACES_PKEY;
    }

    @Override
    public List<UniqueKey<NamespacesRecord>> getKeys() {
        return Arrays.<UniqueKey<NamespacesRecord>>asList(Keys.NAMESPACES_PKEY, Keys.UNIQUE_NAMESPACES);
    }

    @Override
    public Namespaces as(String alias) {
        return new Namespaces(DSL.name(alias), this);
    }

    @Override
    public Namespaces as(Name alias) {
        return new Namespaces(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Namespaces rename(String name) {
        return new Namespaces(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Namespaces rename(Name name) {
        return new Namespaces(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
