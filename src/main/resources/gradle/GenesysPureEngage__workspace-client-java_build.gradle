buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'maven-publish'

    id 'io.codearte.nexus-staging' version '0.12.0'
}

group = 'com.genesys'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
}

dependencies {
    compile 'io.swagger:swagger-annotations:1.5.15'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'org.threeten:threetenbp:1.3.5'
    compile 'org.cometd.java:cometd-api:1.1.5'
    compile 'org.cometd.java:cometd-java-client:4.0.4'
    compile 'org.cometd.java:bayeux-api:4.0.4'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'io.gsonfire:gson-fire:1.8.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.10.0'
}

task incrementVersion {
    doLast {
        String[] semVer = version.split(/\./)
        String major = semVer[0]
        String minor = semVer[1]
        String patch = semVer[2]
        File propertiesFile = file("gradle.properties")
        String updatedFile = propertiesFile.text.replaceFirst(/version\s*=\s*${version}/, "version=${major}.${minor}.${patch.toInteger() + 1}")
        propertiesFile.setText(updatedFile)
    }
}

// Temporary fix for strict JavaDoc comments check in Java 1.8
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

task execute(type: JavaExec) {
    main = System.getProperty('mainClass')
    classpath = sourceSets.main.runtimeClasspath
}

if (hasProperty('ossrhUsername') && hasProperty('ossrhPassword')) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'Workspace API'
                    description 'A Java library to interface to Genesys Workspace public API'
                    url 'https://developer.genhtcc.com/api/workspace/index.html'

                    scm {
                        connection 'scm:git:git@github.com:GenesysPureEngage/workspace-client-java.git'
                        developerConnection 'scm:git:git@github.com:GenesysPureEngage/workspace-client-java.git'
                        url 'https://github.com/GenesysPureEngage/workspace-client-java'
                    }

                    licenses {
                        license {
                            name 'MIT License'
                            url 'https://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            name 'Genesys Inc'
                            email 'support@genesys.com'
                            organization 'Genesys Inc'
                            organizationUrl 'https://developer.genhtcc.com'
                        }
                    }
                }
            }
        }
    }

    nexusStaging {
        username = ossrhUsername
        password = ossrhPassword
        numberOfRetries = 50
        delayBetweenRetriesInMillis = 4000
    }
}
buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'maven-publish'

    id 'io.codearte.nexus-staging' version '0.12.0'
}

group = 'com.genesys'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
}

dependencies {
    compile 'io.swagger:swagger-annotations:1.5.15'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'org.threeten:threetenbp:1.3.5'
    compile 'org.cometd.java:cometd-api:1.1.5'
    compile 'org.cometd.java:cometd-java-client:4.0.4'
    compile 'org.cometd.java:bayeux-api:4.0.4'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'io.gsonfire:gson-fire:1.8.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.10.0'
}

task incrementVersion {
    doLast {
        String[] semVer = version.split(/\./)
        String major = semVer[0]
        String minor = semVer[1]
        String patch = semVer[2]
        File propertiesFile = file("gradle.properties")
        String updatedFile = propertiesFile.text.replaceFirst(/version\s*=\s*${version}/, "version=${major}.${minor}.${patch.toInteger() + 1}")
        propertiesFile.setText(updatedFile)
    }
}

// Temporary fix for strict JavaDoc comments check in Java 1.8
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

task execute(type: JavaExec) {
    main = System.getProperty('mainClass')
    classpath = sourceSets.main.runtimeClasspath
}

if (hasProperty('ossrhUsername') && hasProperty('ossrhPassword')) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'Workspace API'
                    description 'A Java library to interface to Genesys Workspace public API'
                    url 'https://developer.genhtcc.com/api/workspace/index.html'

                    scm {
                        connection 'scm:git:git@github.com:GenesysPureEngage/workspace-client-java.git'
                        developerConnection 'scm:git:git@github.com:GenesysPureEngage/workspace-client-java.git'
                        url 'https://github.com/GenesysPureEngage/workspace-client-java'
                    }

                    licenses {
                        license {
                            name 'MIT License'
                            url 'https://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            name 'Genesys Inc'
                            email 'support@genesys.com'
                            organization 'Genesys Inc'
                            organizationUrl 'https://developer.genhtcc.com'
                        }
                    }
                }
            }
        }
    }

    nexusStaging {
        username = ossrhUsername
        password = ossrhPassword
        numberOfRetries = 50
        delayBetweenRetriesInMillis = 4000
    }
}
