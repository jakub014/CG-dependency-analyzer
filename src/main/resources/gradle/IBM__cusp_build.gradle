buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0"
    }
}

//=======================================
// apply build plugins
//=======================================

plugins {
    id 'com.github.jk1.dependency-license-report' version '0.3.4'
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'org.owasp.dependencycheck' version '5.3.0'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'com.github.hierynomus.license'


//=======================================
// build properties
//=======================================

group = "com.ibm.cusp"
archivesBaseName = "cusp"
version = "1.0.0"


//=======================================
// dependencies and dependency checks
//=======================================

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.jgrapht:jgrapht-core:1.3.0"
    implementation "org.jgrapht:jgrapht-ext:1.3.0"
    implementation "com.linkedin.parseq:parseq:3.0.0"
    implementation 'net.jodah:typetools:0.6.1'
    implementation 'com.google.guava:guava:27.0.1-jre'

    testRuntime 'org.apache.logging.log4j:log4j-api:2.11.1'
    testRuntime 'org.apache.logging.log4j:log4j-core:2.11.1'
    testRuntime 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.assertj:assertj-core:2.1.0"
    testCompile 'org.mockito:mockito-core:1.10.19'
}

dependencyCheck {
    format = 'ALL'
    failOnError = false
}


//=======================================
// source code properties and checks
//=======================================

license {
    ext.copyright_year = Calendar.getInstance().get(Calendar.YEAR)
    header = rootProject.file('COPYRIGHT-HEADER')
    exclude("*.properties")
    exclude("*.json")
    exclude("*.xml")
    exclude("*.txt")
    exclude("*.crt")
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


//=======================================
// testing configuration
//=======================================

test {
    testLogging {
        showStandardStreams = true
    }
}


//=======================================
// packaging
//=======================================

jar {
    manifest {
        attributes(
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version')
        )
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}


//=======================================
// publication
//=======================================

def ossrhUsername = System.getenv('SONATYPE_USERNAME')
def ossrhPassword = System.getenv('SONATYPE_PASSWORD')

uploadArchives {
    repositories {
        mavenDeployer {
            // Sign POM
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            // Add required metadata to POM
            pom.project {
                name 'cusp'
                description 'CUSP is a Java software framework for creating execution pipelines composed of modular stages that emphasizes traceability, visualization, and understandability.'
                url 'https://github.com/IBM/cusp'
                inceptionYear '2019'
                packaging 'jar'

                scm {
                    url 'https://github.com/IBM/cusp'
                    connection 'scm:https://github.com/IBM/cusp'
                    developerConnection 'scm:git://github.com/IBM/cusp'
                }

                licenses {
                    license {
                        name 'The MIT License'
                        url 'https://github.com/IBM/cusp/blob/main/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'anastasds'
                        name 'Anastas Stoyanovsky'
                    }
                    developer {
                        id 'jaymindesai'
                        name 'Jaymin Desai'
                    }
                }
            }
        }
    }
}buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0"
    }
}

//=======================================
// apply build plugins
//=======================================

plugins {
    id 'com.github.jk1.dependency-license-report' version '0.3.4'
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'org.owasp.dependencycheck' version '5.3.0'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'com.github.hierynomus.license'


//=======================================
// build properties
//=======================================

group = "com.ibm.cusp"
archivesBaseName = "cusp"
version = "1.0.0"


//=======================================
// dependencies and dependency checks
//=======================================

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.jgrapht:jgrapht-core:1.3.0"
    implementation "org.jgrapht:jgrapht-ext:1.3.0"
    implementation "com.linkedin.parseq:parseq:3.0.0"
    implementation 'net.jodah:typetools:0.6.1'
    implementation 'com.google.guava:guava:27.0.1-jre'

    testRuntime 'org.apache.logging.log4j:log4j-api:2.11.1'
    testRuntime 'org.apache.logging.log4j:log4j-core:2.11.1'
    testRuntime 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.assertj:assertj-core:2.1.0"
    testCompile 'org.mockito:mockito-core:1.10.19'
}

dependencyCheck {
    format = 'ALL'
    failOnError = false
}


//=======================================
// source code properties and checks
//=======================================

license {
    ext.copyright_year = Calendar.getInstance().get(Calendar.YEAR)
    header = rootProject.file('COPYRIGHT-HEADER')
    exclude("*.properties")
    exclude("*.json")
    exclude("*.xml")
    exclude("*.txt")
    exclude("*.crt")
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


//=======================================
// testing configuration
//=======================================

test {
    testLogging {
        showStandardStreams = true
    }
}


//=======================================
// packaging
//=======================================

jar {
    manifest {
        attributes(
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version')
        )
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}


//=======================================
// publication
//=======================================

def ossrhUsername = System.getenv('SONATYPE_USERNAME')
def ossrhPassword = System.getenv('SONATYPE_PASSWORD')

uploadArchives {
    repositories {
        mavenDeployer {
            // Sign POM
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            // Add required metadata to POM
            pom.project {
                name 'cusp'
                description 'CUSP is a Java software framework for creating execution pipelines composed of modular stages that emphasizes traceability, visualization, and understandability.'
                url 'https://github.com/IBM/cusp'
                inceptionYear '2019'
                packaging 'jar'

                scm {
                    url 'https://github.com/IBM/cusp'
                    connection 'scm:https://github.com/IBM/cusp'
                    developerConnection 'scm:git://github.com/IBM/cusp'
                }

                licenses {
                    license {
                        name 'The MIT License'
                        url 'https://github.com/IBM/cusp/blob/main/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'anastasds'
                        name 'Anastas Stoyanovsky'
                    }
                    developer {
                        id 'jaymindesai'
                        name 'Jaymin Desai'
                    }
                }
            }
        }
    }
}