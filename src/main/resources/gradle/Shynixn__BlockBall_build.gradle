import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlinVersion
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.1"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'io.codearte.nexus-staging' version '0.20.0'
    id "de.marcphilipp.nexus-publish" version '0.2.0'
}

apply plugin: 'org.jetbrains.dokka'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

nexusStaging {
    packageGroup = "com.github.shynixn"
    username = project.hasProperty("ossrhUsername") ? project.findProperty("ossrhUsername") : System.getenv('SONATYPE_USERNAME')
    password = project.hasProperty("ossrhPassword") ? project.findProperty("ossrhPassword") : System.getenv('SONATYPE_PASSWORD')
    delayBetweenRetriesInMillis = 10000
    numberOfRetries = 100
}

allprojects {
    apply plugin: 'jacoco'
}

tasks.register("printVersion") {
    println(this.subprojects.getAt(0).version)
}

subprojects {
    group 'com.github.shynixn.blockball'
    version '6.23.0'

    sourceCompatibility = 1.8

    apply plugin: 'kotlin-platform-jvm'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: "de.marcphilipp.nexus-publish"
    apply plugin: 'org.jetbrains.dokka'

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        failFast = true

        testLogging {
            events(TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED)
            displayGranularity = 0
            showExceptions = true
            showCauses = true
            showStackTraces = true
            exceptionFormat = TestExceptionFormat.FULL
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = 'sources'
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        from javadoc
        classifier = 'javadoc'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'BlockBall'
                    description = 'BlockBall is a spigot plugin to play soccer games in Minecraft.'
                    url = 'https://github.com/Shynixn/BlockBall'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name = 'Shynixn'
                            url = 'https://github.com/Shynixn'
                        }
                        developer {
                            name = 'LazoYoung'
                            url = 'https://github.com/LazoYoung'
                        }
                    }
                    contributors {
                        contributor {
                            name = 'tildearrow'
                            url = 'https://github.com/tildearrow'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/Shynixn/BlockBall.git'
                        developerConnection = 'scm:git:ssh://github.com:Shynixn/BlockBall.git'
                        url = 'http://github.com/Shynixn/BlockBall.git/tree/master'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = project.hasProperty("ossrhUsername") ? project.findProperty("ossrhUsername") : System.getenv('SONATYPE_USERNAME')
                    password = project.hasProperty("ossrhPassword") ? project.findProperty("ossrhPassword") : System.getenv('SONATYPE_PASSWORD')
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

        testCompile 'org.jetbrains.kotlin:kotlin-test'
        testCompile 'org.jetbrains.kotlin:kotlin-test-junit'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testCompile 'org.mockito:mockito-core:3.5.13'

        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (project.findProperty("signing.keyId") == null) {
        ext."signing.keyId" = System.getenv('SIGNING_KEY_ID')
        ext."signing.password" = System.getenv('SIGNING_KEY_PASSWORD')
        ext."signing.secretKeyRingFile" = System.getenv('SIGNING_KEY_FILE')
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

task generateJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "docs/apidocs"

    configuration {
        sourceRoot{
            path = "blockball-api/src/main/java"
        }
        sourceRoot {
            path = "blockball-bukkit-api/src/main/java"
        }
        sourceRoot {
            path = "blockball-core/src/main/java"
        }
        sourceRoot {
            path = "blockball-bukkit-plugin/src/main/java"
        }
    }
}

task downloadDependencies(type: Exec) {
    def build = new File('build')

    if (!build.exists()) {
        build.mkdir()
    }

    def folder = new File(build, 'buildtools')

    if (!folder.exists()) {
        folder.mkdir()
    }

    def file = new File(folder, "BuildTools.jar")

    if (!file.exists()) {
        new URL('https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar').withInputStream { i ->
            file.withOutputStream {
                it << i
            }
        }
    }

    def vaultFile = new File(folder, "Vault.jar")

    if (!vaultFile.exists()) {
        def connection = new URL('https://jitpack.io/com/github/MilkBowl/VaultAPI/1.7/VaultAPI-1.7.jar').openConnection()
        connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Linux; U; Android 4.1.2; en-us; GT-N8013 Build/JZO54K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30")

        def out = new BufferedOutputStream(new FileOutputStream(vaultFile))
        out << connection.inputStream

        out.close()
    }

    def text = "cd build/buildtools"
    text += " && mvn install:install-file -Dfile=Vault.jar -DgroupId=net.milkbowlvault -DartifactId=VaultAPI -Dversion=1.7 -Dpackaging=jar"
    text += " && java -jar BuildTools.jar --rev 1.16.4"
    text += " && mvn install:install-file -Dfile=spigot-1.16.4.jar -DgroupId=org.spigotmc -DartifactId=spigot116R3 -Dversion=1.16.4-R3.0 -Dpackaging=jar"

    standardOutput = new ByteArrayOutputStream()

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', text
    } else {
        commandLine 'sh', '-c', text
    }
}
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlinVersion
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.1"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'io.codearte.nexus-staging' version '0.20.0'
    id "de.marcphilipp.nexus-publish" version '0.2.0'
}

apply plugin: 'org.jetbrains.dokka'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

nexusStaging {
    packageGroup = "com.github.shynixn"
    username = project.hasProperty("ossrhUsername") ? project.findProperty("ossrhUsername") : System.getenv('SONATYPE_USERNAME')
    password = project.hasProperty("ossrhPassword") ? project.findProperty("ossrhPassword") : System.getenv('SONATYPE_PASSWORD')
    delayBetweenRetriesInMillis = 10000
    numberOfRetries = 100
}

allprojects {
    apply plugin: 'jacoco'
}

tasks.register("printVersion") {
    println(this.subprojects.getAt(0).version)
}

subprojects {
    group 'com.github.shynixn.blockball'
    version '6.23.0'

    sourceCompatibility = 1.8

    apply plugin: 'kotlin-platform-jvm'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: "de.marcphilipp.nexus-publish"
    apply plugin: 'org.jetbrains.dokka'

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        failFast = true

        testLogging {
            events(TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED)
            displayGranularity = 0
            showExceptions = true
            showCauses = true
            showStackTraces = true
            exceptionFormat = TestExceptionFormat.FULL
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = 'sources'
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        from javadoc
        classifier = 'javadoc'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'BlockBall'
                    description = 'BlockBall is a spigot plugin to play soccer games in Minecraft.'
                    url = 'https://github.com/Shynixn/BlockBall'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name = 'Shynixn'
                            url = 'https://github.com/Shynixn'
                        }
                        developer {
                            name = 'LazoYoung'
                            url = 'https://github.com/LazoYoung'
                        }
                    }
                    contributors {
                        contributor {
                            name = 'tildearrow'
                            url = 'https://github.com/tildearrow'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/Shynixn/BlockBall.git'
                        developerConnection = 'scm:git:ssh://github.com:Shynixn/BlockBall.git'
                        url = 'http://github.com/Shynixn/BlockBall.git/tree/master'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = project.hasProperty("ossrhUsername") ? project.findProperty("ossrhUsername") : System.getenv('SONATYPE_USERNAME')
                    password = project.hasProperty("ossrhPassword") ? project.findProperty("ossrhPassword") : System.getenv('SONATYPE_PASSWORD')
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

        testCompile 'org.jetbrains.kotlin:kotlin-test'
        testCompile 'org.jetbrains.kotlin:kotlin-test-junit'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testCompile 'org.mockito:mockito-core:3.5.13'

        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (project.findProperty("signing.keyId") == null) {
        ext."signing.keyId" = System.getenv('SIGNING_KEY_ID')
        ext."signing.password" = System.getenv('SIGNING_KEY_PASSWORD')
        ext."signing.secretKeyRingFile" = System.getenv('SIGNING_KEY_FILE')
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

task generateJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "docs/apidocs"

    configuration {
        sourceRoot{
            path = "blockball-api/src/main/java"
        }
        sourceRoot {
            path = "blockball-bukkit-api/src/main/java"
        }
        sourceRoot {
            path = "blockball-core/src/main/java"
        }
        sourceRoot {
            path = "blockball-bukkit-plugin/src/main/java"
        }
    }
}

task downloadDependencies(type: Exec) {
    def build = new File('build')

    if (!build.exists()) {
        build.mkdir()
    }

    def folder = new File(build, 'buildtools')

    if (!folder.exists()) {
        folder.mkdir()
    }

    def file = new File(folder, "BuildTools.jar")

    if (!file.exists()) {
        new URL('https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar').withInputStream { i ->
            file.withOutputStream {
                it << i
            }
        }
    }

    def vaultFile = new File(folder, "Vault.jar")

    if (!vaultFile.exists()) {
        def connection = new URL('https://jitpack.io/com/github/MilkBowl/VaultAPI/1.7/VaultAPI-1.7.jar').openConnection()
        connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Linux; U; Android 4.1.2; en-us; GT-N8013 Build/JZO54K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30")

        def out = new BufferedOutputStream(new FileOutputStream(vaultFile))
        out << connection.inputStream

        out.close()
    }

    def text = "cd build/buildtools"
    text += " && mvn install:install-file -Dfile=Vault.jar -DgroupId=net.milkbowlvault -DartifactId=VaultAPI -Dversion=1.7 -Dpackaging=jar"
    text += " && java -jar BuildTools.jar --rev 1.16.4"
    text += " && mvn install:install-file -Dfile=spigot-1.16.4.jar -DgroupId=org.spigotmc -DartifactId=spigot116R3 -Dversion=1.16.4-R3.0 -Dpackaging=jar"

    standardOutput = new ByteArrayOutputStream()

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', text
    } else {
        commandLine 'sh', '-c', text
    }
}
