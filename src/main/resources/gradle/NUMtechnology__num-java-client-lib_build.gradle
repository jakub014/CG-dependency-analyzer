buildscript {

    ext {
        lombokVersion = '1.18.4'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'idea'
}


apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'antlr'
apply plugin: 'maven-publish'
apply plugin: 'application'
// plugin for generating test coverage report
apply plugin: 'jacoco'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
mainClassName = "uk.num.numlib.api.NumApiImpl"

group = "uk.num"
version = "0.12.13"

def isSnapshot = version.endsWith("SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    compile group: 'uk.modl', name: 'java-interpreter', version: '0.1.21'
    compile group: 'uk.num', name: 'num-java-client-lib-base', version: '0.1.5'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/dnsjava/dnsjava
    compile group: 'dnsjava', name: 'dnsjava', version: '3.3.1'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'

    // Dependency and config for Lombok annotations
    compile("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

}

sourceSets {
    main.java.srcDirs = ['src/main/java']
    test.java.srcDirs = ['src/test/java']
}


task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier 'sources'
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc
    classifier 'javadoc'
}


artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

/*
 *    Copyright 2020 NUM Technology Ltd
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/***********
 * MAVEN PUBLISHING
 ***********/

publishing {
    publications {
        mavenJava(MavenPublication) {
            customisePom(pom)

            groupId = "uk.num"
            artifactId = 'num-java-client-lib'

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }

            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
            if (!isSnapshot) {
                def stUser
                def stPwd

                if (project.hasProperty('sonatypeUsername')) {
                    stUser = sonatypeUsername
                } else {
                    stUser = "notdefined"
                    logger.warn("sonatypeUsername not defined. Please update your gradle config file")
                }

                if (project.hasProperty('sonatypePassword')) {
                    stPwd = sonatypePassword
                } else {
                    stPwd = "notdefined"
                    logger.warn("sonatypePassword not defined. Please update your gradle config file")
                }

                credentials {
                    username stUser
                    password stPwd
                }
            }
        }
    }
}


signing {
    required {
        // signing is required if this is a release version and the artifacts are to be published
        !isSnapshot && tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}


def customisePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'NUM Java library'
            description 'Java library for the NUM protocol'
            url 'https://github.com/NUMtechnology/num-java-client-lib'

            licenses {
                license {
                    name 'Apache license v2.0'
                    url 'https://opensource.org/licenses/Apache-2.0'
                    distribution 'repo'
                }
            }

            scm {
                connection 'scm:git:git://NUMtechnology/num-java-client-lib.git'
                developerConnection 'scm:git:git://NUMtechnology/num-java-client-lib.git'
                url 'https://github.com/NUMtechnology/num-java-client-lib'
            }
            developers {
                developer {
                    id 'twalmsley'
                    name 'Tony Walmsley'
                    email 'tony.walmsley@num.uk'
                }
            }
        }
    }
}

// ====== JACOCO TEST COVERAGE ======
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
test.finalizedBy jacocoTestReport 
buildscript {

    ext {
        lombokVersion = '1.18.4'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'idea'
}


apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'antlr'
apply plugin: 'maven-publish'
apply plugin: 'application'
// plugin for generating test coverage report
apply plugin: 'jacoco'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
mainClassName = "uk.num.numlib.api.NumApiImpl"

group = "uk.num"
version = "0.12.13"

def isSnapshot = version.endsWith("SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    compile group: 'uk.modl', name: 'java-interpreter', version: '0.1.21'
    compile group: 'uk.num', name: 'num-java-client-lib-base', version: '0.1.5'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/dnsjava/dnsjava
    compile group: 'dnsjava', name: 'dnsjava', version: '3.3.1'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'

    // Dependency and config for Lombok annotations
    compile("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

}

sourceSets {
    main.java.srcDirs = ['src/main/java']
    test.java.srcDirs = ['src/test/java']
}


task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier 'sources'
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc
    classifier 'javadoc'
}


artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

/*
 *    Copyright 2020 NUM Technology Ltd
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/***********
 * MAVEN PUBLISHING
 ***********/

publishing {
    publications {
        mavenJava(MavenPublication) {
            customisePom(pom)

            groupId = "uk.num"
            artifactId = 'num-java-client-lib'

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }

            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
            if (!isSnapshot) {
                def stUser
                def stPwd

                if (project.hasProperty('sonatypeUsername')) {
                    stUser = sonatypeUsername
                } else {
                    stUser = "notdefined"
                    logger.warn("sonatypeUsername not defined. Please update your gradle config file")
                }

                if (project.hasProperty('sonatypePassword')) {
                    stPwd = sonatypePassword
                } else {
                    stPwd = "notdefined"
                    logger.warn("sonatypePassword not defined. Please update your gradle config file")
                }

                credentials {
                    username stUser
                    password stPwd
                }
            }
        }
    }
}


signing {
    required {
        // signing is required if this is a release version and the artifacts are to be published
        !isSnapshot && tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}


def customisePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'NUM Java library'
            description 'Java library for the NUM protocol'
            url 'https://github.com/NUMtechnology/num-java-client-lib'

            licenses {
                license {
                    name 'Apache license v2.0'
                    url 'https://opensource.org/licenses/Apache-2.0'
                    distribution 'repo'
                }
            }

            scm {
                connection 'scm:git:git://NUMtechnology/num-java-client-lib.git'
                developerConnection 'scm:git:git://NUMtechnology/num-java-client-lib.git'
                url 'https://github.com/NUMtechnology/num-java-client-lib'
            }
            developers {
                developer {
                    id 'twalmsley'
                    name 'Tony Walmsley'
                    email 'tony.walmsley@num.uk'
                }
            }
        }
    }
}

// ====== JACOCO TEST COVERAGE ======
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
test.finalizedBy jacocoTestReport 
