import java.util.regex.Matcher

plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'nebula.optional-base' version '3.3.0'
}

ext {
    ossrhUsername = project.findProperty('ossrh.username')
    ossrhPassword = project.findProperty('ossrh.password')

    flywayVersions = [
            [core: '3.0',   test: '3.0.1'],
            [core: '3.1',   test: '3.1'],
            [core: '3.2.1', test: '3.2.1.1'],
            [core: '4.0.3', test: '4.0.1'],
            [core: '4.1.2', test: '4.1.0'],
            [core: '4.2.0', test: '4.2.0.2'],

            [core: '3.0',   test: '5.0.0'],
            [core: '3.1',   test: '5.0.0'],
            [core: '3.2.1', test: '5.0.0'],
            [core: '4.0.3', test: '5.0.0'],
            [core: '4.1.2', test: '5.0.0'],
            [core: '4.2.0', test: '5.0.0'],

            [core: '5.1.4', test: '5.1.0'],
            [core: '5.2.4', test: '5.2.4'],
            [core: '6.0.2', test: '6.0.0'],
            [core: '6.0.8', test: '6.0.0'],
            [core: '6.1.4', test: '6.1.0'],
            [core: '6.2.4', test: '6.1.0'],
            [core: '6.3.2', test: '6.1.0'],
            [core: '6.3.3', test: '6.3.3'],
            [core: '6.4.4', test: '6.4.0'],
            [core: '6.5.3', test: '6.4.0'],
            [core: '7.0.4', test: '7.0.0'],
            [core: '7.1.1', test: '7.0.0'],
            [core: '7.2.1', test: '7.0.0'],
            [core: '7.3.2', test: '7.0.0'],
            [core: '7.4.0', test: '7.0.0'],
            [core: '7.5.0', test: '7.0.0'],
            [core: '7.5.1', test: '7.0.0'],
            [core: '7.5.2', test: '7.0.0'],

            [core: '5.0.7', test: '5.0.0'] // default version
    ]
    embeddedPostgresVersions = ['9.4.25', '9.5.20', '9.6.16', '10.11.0', '11.6.0', '12.1.0']

    flywayCoreVersion = flywayVersions.last().core
    flywayTestVersion = flywayVersions.last().test
}

allprojects {
    group 'io.zonky.test'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'nebula.optional-base'

    sourceCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'embedded-database-spring-test'
                    packaging 'jar'
                    description 'A library for creating isolated embedded databases for Spring-powered integration tests.'
                    url 'https://github.com/zonkyio/embedded-database-spring-test'

                    scm {
                        connection 'scm:git:git://github.com/zonkyio/embedded-database-spring-test.git'
                        developerConnection 'scm:git:ssh://github.com:zonkyio/embedded-database-spring-test.git'
                        url 'https://github.com/zonkyio/embedded-database-spring-test/tree/master'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name 'Roman Pichlik'
                            email 'roman.pichlik@zonky.cz'
                        }
                        developer {
                            name 'Tomas Vanek'
                            email 'tomas.vanek@zonky.cz'
                        }
                        developer {
                            name 'Developers Zonky'
                            email 'developers@zonky.cz'
                        }
                    }
                }
            }
        }
    }

    release {
        tagTemplate = 'v${version}'
        versionPatterns = [
            // increments the minor version: "1.0.0-SNAPSHOT" => "1.1.0-SNAPSHOT"
            /(\d+)\.\d+([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}.0${m[0][2]}") }
        ]
        git {
            requireBranch = '^(master|\\d+\\.\\d+\\.x)$'
        }
    }
}

project(':embedded-database-spring-test-autoconfigure') {
}

project(':embedded-database-spring-test') {
    dependencies {
        compile project(':embedded-database-spring-test-autoconfigure')

        compile 'io.zonky.test:embedded-postgres:1.2.10'
        compile 'org.testcontainers:postgresql:1.15.1', optional
        compile 'com.opentable.components:otj-pg-embedded:0.13.1', optional
        compile 'ru.yandex.qatools.embed:postgresql-embedded:2.10', optional
        compile 'org.springframework.boot:spring-boot-starter-test:1.5.22.RELEASE', optional
        
        compile 'org.springframework:spring-context:4.3.25.RELEASE'
        compile 'org.springframework:spring-test:4.3.25.RELEASE'
        compile "org.flywaydb:flyway-core:$flywayCoreVersion"
        compile "org.flywaydb.flyway-test-extensions:flyway-spring-test:$flywayTestVersion"
        compile 'com.google.guava:guava:23.0'
        compile 'org.tukaani:xz:1.8'

        compile('com.cedarsoftware:java-util:1.34.0') {
            exclude group: 'org.apache.logging.log4j'
        }

        testCompile 'ch.qos.logback:logback-classic:1.2.3'
    }

    configurations {
        flywayVersions.init().each { version ->
            def versionName = "core-${version.core}_test-${version.test}".replaceAll('\\.', '-')
            "testRuntimeWithFlyway_$versionName" {
                extendsFrom testRuntime
                resolutionStrategy {
                    eachDependency { details ->
                        if (details.requested.name == 'flyway-core') {
                            details.useVersion "${version.core}"
                        }
                    }
                    eachDependency { details ->
                        if (details.requested.group == 'org.flywaydb.flyway-test-extensions') {
                            details.useVersion "${version.test}"
                        }
                    }
                }
            }
        }

        embeddedPostgresVersions.each { version ->
            def versionName = version.replaceAll('\\.', '-')
            "testRuntimeWithEmbeddedPostgres_$versionName" {
                extendsFrom testRuntime
                resolutionStrategy {
                    eachDependency { details ->
                        if (details.requested.group == 'io.zonky.test.postgres') {
                            details.useVersion "$version"
                        }
                    }
                }
            }
        }
    }

    flywayVersions.init().each { version ->
        def versionName = "core-${version.core}_test-${version.test}".replaceAll('\\.', '-')
        task "testWithFlyway_$versionName"(type: Test) {
            dependsOn jar

            classpath -= configurations.testRuntime
            classpath += configurations."testRuntimeWithFlyway_$versionName"

            useJUnit {
                includeCategories 'io.zonky.test.category.FlywayIntegrationTests'

                if (VersionNumber.withPatchNumber().parse(version.test) >= VersionNumber.withPatchNumber().parse("4.2.0.1")) {
                    includeCategories 'io.zonky.test.category.MultiFlywayIntegrationTests'
                }
            }
        }
        check.dependsOn("testWithFlyway_$versionName")
    }

    embeddedPostgresVersions.each { version ->
        def versionName = version.replaceAll('\\.', '-')
        task "testWithEmbeddedPostgres_$versionName"(type: Test) {
            dependsOn jar

            classpath -= configurations.testRuntime
            classpath += configurations."testRuntimeWithEmbeddedPostgres_$versionName"
        }
        check.dependsOn("testWithEmbeddedPostgres_$versionName")
    }

    tasks.withType(Test) {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
}

task updateReadmeVersion() {
    doLast {
        def version = project.version.toString()
        ant.replaceregexp(file: 'README.md',
                match: '(?<=<artifactId>embedded-database-spring-test</artifactId>\\n\\s{4,12})<version>\\d+\\.\\d+\\.\\d+</version>',
                replace: "<version>$version</version>", flags: 'g')
    }
}

// workaround for https://github.com/researchgate/gradle-release/issues/186
task build(group: 'build') {
    subprojects.each {
        dependsOn "${it.path}:build"
    }
}

runBuildTasks.dependsOn updateReadmeVersion

afterReleaseBuild {
    subprojects.each {
        dependsOn "${it.path}:uploadArchives"
    }
}
