buildscript {
  if ("$gradle.gradleVersion" != "6.7") {
    throw new GradleException("Gradle version 6.7 is required (received $gradle.gradleVersion)")
  }

  // https://github.com/gradle/gradle/issues/11308#issuecomment-554317655
  if (System.properties['org.gradle.internal.publish.checksums.insecure'] != 'true') {
    throw new GradleException("org.gradle.internal.publish.checksums.insecure must be 'true'")
  }

  ext.kotlin_version = "1.4.20"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.3.0"
    classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:0.16.0"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.android.tools.build:gradle:4.1.3"
    classpath "de.undercouch:gradle-download-task:4.1.1"
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.33.0"
  id "com.vanniktech.android.junit.jacoco" version "0.16.0"
  id "ru.vyarus.animalsniffer" version "1.5.1"

  // Deprecated: Migrate to maven-publish.
  //             https://developer.android.com/studio/build/maven-publish-plugin
  id "digital.wup.android-maven-publish" version "3.6.3"
  id "ca.cutterslade.analyze" version "1.4.3"
}

ext {
  androidBuildToolsVersion = "29.0.2"
  androidCompileSDKVersion = 28
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 28

  if (!project.hasProperty("mavenCentralUsername")) {
    logger.warn("No mavenCentralUsername property specified: Using an empty value")
    mavenCentralUsername = ""
  }
  if (!project.hasProperty("mavenCentralPassword")) {
    logger.warn("No mavenCentralPassword property specified: Using an empty value")
    mavenCentralPassword = ""
  }

  if (project.hasProperty("org.librarysimplified.directory.publish")) {
    useDirectoryPublishPath = project.property("org.librarysimplified.directory.publish")
    useDirectoryPublish = true
    logger.warn("org.librarysimplified.directory.publish is set: We will publish artifacts to ${useDirectoryPublishPath}")
  } else {
    logger.warn("org.librarysimplified.directory.publish is not set: We will not publish artifacts to a custom directory")
    useDirectoryPublish = false
    useDirectoryPublishPath = null
  }

  if (project.hasProperty("org.librarysimplified.no_signing")) {
    disableSigning = true
    logger.warn("org.librarysimplified.no_signing is set: We will not sign artifacts")
  } else {
    disableSigning = false
    logger.warn("org.librarysimplified.no_signing is not set: We will attempt to sign artifacts")
  }
}

subprojects {
  //
  // We currently have transitive dependencies that specify dependencies on newer versions
  // of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
  // new versions appear of both artifacts. Remove this when both are updated!
  //
  configurations.all {
    resolutionStrategy.force libraries.slf4j
  }
}

ext.versions = [
  bouncycastle     : "1.67",
  chucker          : "3.2.0",
  google_auto_value: "1.7",
  irradia_mime     : "1.1.1",
  jackson          : "2.10.0",
  jackson_kotlin   : "2.9.9",
  javax_annotations: "1.2-b01",
  jcip_annotations : "1.0-1",
  joda_time        : "2.9.9",
  junit            : "5.7.0",
  logback_android  : "1.1.1-6",
  logback_classic  : "1.2.3",
  mockito_android  : "2.22.0",
  mockito_kotlin   : "2.2.0",
  mockwebserver    : "4.9.0",
  okhttp           : "4.9.0",
  slf4j_api        : "1.7.25",
]

ext.libraries = [
  google_auto_value          : "com.google.auto.value:auto-value-annotations:${versions.google_auto_value}",
  google_auto_value_processor: "com.google.auto.value:auto-value:${versions.google_auto_value}",
  bouncycastle               : "org.bouncycastle:bcpg-jdk15on:${versions.bouncycastle}",
  bouncycastle_PKI           : "org.bouncycastle:bcpkix-jdk15on:${versions.bouncycastle}",
  bouncycastle_TLS           : "org.bouncycastle:bctls-jdk15on:${versions.bouncycastle}",
  chucker                    : "com.github.ChuckerTeam.Chucker:library:${versions.chucker}",
  irradia_mime_api           : "one.irradia.mime:one.irradia.mime.api:${versions.irradia_mime}",
  irradia_mime_vanilla       : "one.irradia.mime:one.irradia.mime.vanilla:${versions.irradia_mime}",
  jackson_core               : "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
  jackson_databind           : "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
  jackson_kotlin             : "com.fasterxml.jackson.module:jackson-module-kotlin:${versions.jackson_kotlin}",
  javax_annotation_api       : "javax.annotation:javax.annotation-api:${versions.javax_annotations}",
  jcip_annotations           : "com.github.stephenc.jcip:jcip-annotations:${versions.jcip_annotations}",
  joda_time                  : "joda-time:joda-time:${versions.joda_time}",
  junit_jupiter_api          : "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
  junit_jupiter_engine       : "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
  kotlin_stdlib              : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
  logback_android_classic    : "com.github.tony19:logback-android-classic:${versions.logback_android}",
  logback_android_core       : "com.github.tony19:logback-android-core:${versions.logback_android}",
  logback_classic            : "ch.qos.logback:logback-classic:${versions.logback_classic}",
  mockwebserver              : "com.squareup.okhttp3:mockwebserver:${versions.mockwebserver}",
  mockito_android            : "org.mockito:mockito-android:${versions.mockito_android}",
  mockito_kotlin             : "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockito_kotlin}",
  okhttp                     : "com.squareup.okhttp3:okhttp:${versions.okhttp}",
  slf4j                      : "org.slf4j:slf4j-api:${versions.slf4j_api}",
]

apply plugin: "com.vanniktech.android.junit.jacoco"
apply plugin: "de.undercouch.download"

allprojects { project ->
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]

  apply plugin: 'ca.cutterslade.analyze'
}

// Configure all projects
subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} ${version} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-21:5.0.1_r2@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} ${version} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} ${version} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }

      afterEvaluate {
        def scandoVersion = "0.0.5"
        def scandoSHA256 = "d1e6e57a791363d2a6e9930a15b779fb45855006f5ee7e0119286652ccad7827"
        def scandoSource = "https://repo1.maven.org/maven2/com/io7m/scando/com.io7m.scando.cmdline/${scandoVersion}/com.io7m.scando.cmdline-${scandoVersion}-main.jar"
        def scandoBinDir = "${project.buildDir}/bin/"
        def scandoTarget = "${scandoBinDir}/scando.jar"

        task scandoMakeDirectories() {
          mkdir "${scandoBinDir}"
        }

        task scandoDownload(type: Download, dependsOn: scandoMakeDirectories) {
          src scandoSource
          dest scandoTarget
          overwrite true
        }

        task scandoDownloadVerify(type: Verify, dependsOn: scandoDownload) {
          src scandoTarget
          checksum scandoSHA256
          algorithm 'SHA-256'
        }

        task scandoAnalyze(type: Exec, dependsOn: [scandoDownloadVerify, assembleDebug]) {
          def oldGroup =
            "${project.group}".replace('.', '/')
          def oldPath =
            "${oldGroup}/${POM_ARTIFACT_ID}/${VERSION_PREVIOUS}/${POM_ARTIFACT_ID}-${VERSION_PREVIOUS}.aar"
          def oldUrl =
            "https://repo1.maven.org/maven2/${oldPath}"

          commandLine = [
            "java",
            "-jar",
            scandoTarget,
            "--excludeList",
            "${project.rootDir}/VERSIONING.txt",
            "--oldJarUri",
            "${oldUrl}",
            "--oldJarVersion",
            "${VERSION_PREVIOUS}",
            "--ignoreMissingOld",
            "--newJar",
            "${buildDir}/outputs/aar/${POM_ARTIFACT_ID}-debug.aar",
            "--newJarVersion",
            "${VERSION_NAME}",
            "--textReport",
            "${project.buildDir}/scando-report.txt",
            "--htmlReport",
            "${project.buildDir}/scando-report.html"
          ]
        }

        task verifySemanticVersioning(dependsOn: [scandoAnalyze]) {

        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  apply plugin: "digital.wup.android-maven-publish"

  publishing {
    publications {
      basicJar(MavenPublication) {
        switch (POM_PACKAGING) {
          case "jar":
            from components.java
            break

          case "aar":
            from components.android
            break
        }

        artifact sourcesJar
        artifact javadocsJar

        pom {
          artifactId = POM_ARTIFACT_ID
          name = POM_NAME
          packaging = POM_PACKAGING
          description = POM_DESCRIPTION
          url = POM_URL

          scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
          }

          licenses {
            license {
              name = POM_LICENCE_NAME
              url = POM_LICENCE_URL
            }
          }

          developers {
            developer {
              id = "io7m"
              name = "Mark Raynsford"
              email = "code@io7m.com"
              url = "https://www.io7m.com"
            }
            developer {
              id = "winniequinn"
              name = "Winnie Quinn"
              url = "https://www.winniequinn.com/"
            }
            developer {
              id = "gioneill"
              name = "Greg O'Neill"
              url = "https://github.com/gioneill"
            }
            developer {
              id = "mattniehoff"
              name = "Matt Niehoff"
              url = "https://github.com/mattniehoff"
            }
            developer {
              id = "MalcolmMcFly"
              name = "Malcolm Woods"
              url = "https://github.com/MalcolmMcFly"
            }
            developer {
              id = "twaddington"
              name = "Tristan Waddington"
              url = "https://github.com/twaddington"
            }
          }
        }
      }
    }

    repositories {
      if (useDirectoryPublish) {
        logger.info("using ${useDirectoryPublishPath} for publication")

        maven {
          name = "Directory"
          url = "file://${useDirectoryPublishPath}"
        }
      }

      if (version.endsWith("-SNAPSHOT")) {
        maven {
          url = "https://oss.sonatype.org/content/repositories/snapshots/"
          name = "SonatypeSnapshots"
          credentials(PasswordCredentials) {
            username mavenCentralUsername
            password mavenCentralPassword
          }
        }
      }
    }
  }

  if (!disableSigning) {
    apply plugin: "signing"

    signing {
      useGpgCmd()
      sign publishing.publications.basicJar
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
    google()

    // Sonatype snapshots
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven { url "https://jitpack.io" }
    jcenter()
  }
}

// Add ktlint tasks to root project. This executes faster than configuring
// the tasks for each subproject individually.
apply from: file("$rootDir/ktlint.gradle")

subprojects {
  assemble.dependsOn ktlint
}
buildscript {
  if ("$gradle.gradleVersion" != "6.7") {
    throw new GradleException("Gradle version 6.7 is required (received $gradle.gradleVersion)")
  }

  // https://github.com/gradle/gradle/issues/11308#issuecomment-554317655
  if (System.properties['org.gradle.internal.publish.checksums.insecure'] != 'true') {
    throw new GradleException("org.gradle.internal.publish.checksums.insecure must be 'true'")
  }

  ext.kotlin_version = "1.4.20"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.3.0"
    classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:0.16.0"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.android.tools.build:gradle:4.1.3"
    classpath "de.undercouch:gradle-download-task:4.1.1"
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.33.0"
  id "com.vanniktech.android.junit.jacoco" version "0.16.0"
  id "ru.vyarus.animalsniffer" version "1.5.1"

  // Deprecated: Migrate to maven-publish.
  //             https://developer.android.com/studio/build/maven-publish-plugin
  id "digital.wup.android-maven-publish" version "3.6.3"
  id "ca.cutterslade.analyze" version "1.4.3"
}

ext {
  androidBuildToolsVersion = "29.0.2"
  androidCompileSDKVersion = 28
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 28

  if (!project.hasProperty("mavenCentralUsername")) {
    logger.warn("No mavenCentralUsername property specified: Using an empty value")
    mavenCentralUsername = ""
  }
  if (!project.hasProperty("mavenCentralPassword")) {
    logger.warn("No mavenCentralPassword property specified: Using an empty value")
    mavenCentralPassword = ""
  }

  if (project.hasProperty("org.librarysimplified.directory.publish")) {
    useDirectoryPublishPath = project.property("org.librarysimplified.directory.publish")
    useDirectoryPublish = true
    logger.warn("org.librarysimplified.directory.publish is set: We will publish artifacts to ${useDirectoryPublishPath}")
  } else {
    logger.warn("org.librarysimplified.directory.publish is not set: We will not publish artifacts to a custom directory")
    useDirectoryPublish = false
    useDirectoryPublishPath = null
  }

  if (project.hasProperty("org.librarysimplified.no_signing")) {
    disableSigning = true
    logger.warn("org.librarysimplified.no_signing is set: We will not sign artifacts")
  } else {
    disableSigning = false
    logger.warn("org.librarysimplified.no_signing is not set: We will attempt to sign artifacts")
  }
}

subprojects {
  //
  // We currently have transitive dependencies that specify dependencies on newer versions
  // of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
  // new versions appear of both artifacts. Remove this when both are updated!
  //
  configurations.all {
    resolutionStrategy.force libraries.slf4j
  }
}

ext.versions = [
  bouncycastle     : "1.67",
  chucker          : "3.2.0",
  google_auto_value: "1.7",
  irradia_mime     : "1.1.1",
  jackson          : "2.10.0",
  jackson_kotlin   : "2.9.9",
  javax_annotations: "1.2-b01",
  jcip_annotations : "1.0-1",
  joda_time        : "2.9.9",
  junit            : "5.7.0",
  logback_android  : "1.1.1-6",
  logback_classic  : "1.2.3",
  mockito_android  : "2.22.0",
  mockito_kotlin   : "2.2.0",
  mockwebserver    : "4.9.0",
  okhttp           : "4.9.0",
  slf4j_api        : "1.7.25",
]

ext.libraries = [
  google_auto_value          : "com.google.auto.value:auto-value-annotations:${versions.google_auto_value}",
  google_auto_value_processor: "com.google.auto.value:auto-value:${versions.google_auto_value}",
  bouncycastle               : "org.bouncycastle:bcpg-jdk15on:${versions.bouncycastle}",
  bouncycastle_PKI           : "org.bouncycastle:bcpkix-jdk15on:${versions.bouncycastle}",
  bouncycastle_TLS           : "org.bouncycastle:bctls-jdk15on:${versions.bouncycastle}",
  chucker                    : "com.github.ChuckerTeam.Chucker:library:${versions.chucker}",
  irradia_mime_api           : "one.irradia.mime:one.irradia.mime.api:${versions.irradia_mime}",
  irradia_mime_vanilla       : "one.irradia.mime:one.irradia.mime.vanilla:${versions.irradia_mime}",
  jackson_core               : "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
  jackson_databind           : "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
  jackson_kotlin             : "com.fasterxml.jackson.module:jackson-module-kotlin:${versions.jackson_kotlin}",
  javax_annotation_api       : "javax.annotation:javax.annotation-api:${versions.javax_annotations}",
  jcip_annotations           : "com.github.stephenc.jcip:jcip-annotations:${versions.jcip_annotations}",
  joda_time                  : "joda-time:joda-time:${versions.joda_time}",
  junit_jupiter_api          : "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
  junit_jupiter_engine       : "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
  kotlin_stdlib              : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
  logback_android_classic    : "com.github.tony19:logback-android-classic:${versions.logback_android}",
  logback_android_core       : "com.github.tony19:logback-android-core:${versions.logback_android}",
  logback_classic            : "ch.qos.logback:logback-classic:${versions.logback_classic}",
  mockwebserver              : "com.squareup.okhttp3:mockwebserver:${versions.mockwebserver}",
  mockito_android            : "org.mockito:mockito-android:${versions.mockito_android}",
  mockito_kotlin             : "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockito_kotlin}",
  okhttp                     : "com.squareup.okhttp3:okhttp:${versions.okhttp}",
  slf4j                      : "org.slf4j:slf4j-api:${versions.slf4j_api}",
]

apply plugin: "com.vanniktech.android.junit.jacoco"
apply plugin: "de.undercouch.download"

allprojects { project ->
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]

  apply plugin: 'ca.cutterslade.analyze'
}

// Configure all projects
subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} ${version} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-21:5.0.1_r2@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} ${version} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} ${version} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          encoding 'UTF-8'
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }

      afterEvaluate {
        def scandoVersion = "0.0.5"
        def scandoSHA256 = "d1e6e57a791363d2a6e9930a15b779fb45855006f5ee7e0119286652ccad7827"
        def scandoSource = "https://repo1.maven.org/maven2/com/io7m/scando/com.io7m.scando.cmdline/${scandoVersion}/com.io7m.scando.cmdline-${scandoVersion}-main.jar"
        def scandoBinDir = "${project.buildDir}/bin/"
        def scandoTarget = "${scandoBinDir}/scando.jar"

        task scandoMakeDirectories() {
          mkdir "${scandoBinDir}"
        }

        task scandoDownload(type: Download, dependsOn: scandoMakeDirectories) {
          src scandoSource
          dest scandoTarget
          overwrite true
        }

        task scandoDownloadVerify(type: Verify, dependsOn: scandoDownload) {
          src scandoTarget
          checksum scandoSHA256
          algorithm 'SHA-256'
        }

        task scandoAnalyze(type: Exec, dependsOn: [scandoDownloadVerify, assembleDebug]) {
          def oldGroup =
            "${project.group}".replace('.', '/')
          def oldPath =
            "${oldGroup}/${POM_ARTIFACT_ID}/${VERSION_PREVIOUS}/${POM_ARTIFACT_ID}-${VERSION_PREVIOUS}.aar"
          def oldUrl =
            "https://repo1.maven.org/maven2/${oldPath}"

          commandLine = [
            "java",
            "-jar",
            scandoTarget,
            "--excludeList",
            "${project.rootDir}/VERSIONING.txt",
            "--oldJarUri",
            "${oldUrl}",
            "--oldJarVersion",
            "${VERSION_PREVIOUS}",
            "--ignoreMissingOld",
            "--newJar",
            "${buildDir}/outputs/aar/${POM_ARTIFACT_ID}-debug.aar",
            "--newJarVersion",
            "${VERSION_NAME}",
            "--textReport",
            "${project.buildDir}/scando-report.txt",
            "--htmlReport",
            "${project.buildDir}/scando-report.html"
          ]
        }

        task verifySemanticVersioning(dependsOn: [scandoAnalyze]) {

        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  apply plugin: "digital.wup.android-maven-publish"

  publishing {
    publications {
      basicJar(MavenPublication) {
        switch (POM_PACKAGING) {
          case "jar":
            from components.java
            break

          case "aar":
            from components.android
            break
        }

        artifact sourcesJar
        artifact javadocsJar

        pom {
          artifactId = POM_ARTIFACT_ID
          name = POM_NAME
          packaging = POM_PACKAGING
          description = POM_DESCRIPTION
          url = POM_URL

          scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
          }

          licenses {
            license {
              name = POM_LICENCE_NAME
              url = POM_LICENCE_URL
            }
          }

          developers {
            developer {
              id = "io7m"
              name = "Mark Raynsford"
              email = "code@io7m.com"
              url = "https://www.io7m.com"
            }
            developer {
              id = "winniequinn"
              name = "Winnie Quinn"
              url = "https://www.winniequinn.com/"
            }
            developer {
              id = "gioneill"
              name = "Greg O'Neill"
              url = "https://github.com/gioneill"
            }
            developer {
              id = "mattniehoff"
              name = "Matt Niehoff"
              url = "https://github.com/mattniehoff"
            }
            developer {
              id = "MalcolmMcFly"
              name = "Malcolm Woods"
              url = "https://github.com/MalcolmMcFly"
            }
            developer {
              id = "twaddington"
              name = "Tristan Waddington"
              url = "https://github.com/twaddington"
            }
          }
        }
      }
    }

    repositories {
      if (useDirectoryPublish) {
        logger.info("using ${useDirectoryPublishPath} for publication")

        maven {
          name = "Directory"
          url = "file://${useDirectoryPublishPath}"
        }
      }

      if (version.endsWith("-SNAPSHOT")) {
        maven {
          url = "https://oss.sonatype.org/content/repositories/snapshots/"
          name = "SonatypeSnapshots"
          credentials(PasswordCredentials) {
            username mavenCentralUsername
            password mavenCentralPassword
          }
        }
      }
    }
  }

  if (!disableSigning) {
    apply plugin: "signing"

    signing {
      useGpgCmd()
      sign publishing.publications.basicJar
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
    google()

    // Sonatype snapshots
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven { url "https://jitpack.io" }
    jcenter()
  }
}

// Add ktlint tasks to root project. This executes faster than configuring
// the tasks for each subproject individually.
apply from: file("$rootDir/ktlint.gradle")

subprojects {
  assemble.dependsOn ktlint
}
