plugins {
    id 'java-library'
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

group = 'net.recalibrate'
version = '1.0.0'
ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.0'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    implementation 'org.slf4j:slf4j-api:1.7.30'

    compileOnly 'com.google.guava:guava:29.0-jre'

    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    testImplementation 'org.slf4j:slf4j-simple:1.7.30'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.mockito:mockito-core:3.6.28'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.6.28'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'JUnit JSON Initialized'
                description = 'JUnit 5 extension initialize test fields with JSON, using the Jackson library'
                url = 'https://github.com/dinoklein/junit-json-initialized'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    url = 'https://github.com/dinoklein/junit-json-initialized'
                }
                developers {
                    developer {
                        id = 'dinoklein'
                        name = 'Dino Klein'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv('ossrhUsername')
                password = System.getenv('ossrhPassword')
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(System.getenv('signingKey'), System.getenv('signingPassword'))
    sign publishing.publications.mavenJava
}

// sign only release versions
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
