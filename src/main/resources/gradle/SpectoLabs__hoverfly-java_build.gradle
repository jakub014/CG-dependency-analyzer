plugins {
    id 'net.researchgate.release' version '2.8.1'
    id "de.undercouch.download" version "3.4.2"
    id "com.github.hierynomus.license" version "0.14.0"
    id 'com.github.ben-manes.versions' version '0.14.0'
    id 'java'
    id 'idea'
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.6"
}

group = 'io.specto'
archivesBaseName = 'hoverfly-java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext."release.useAutomaticVersion" = true

repositories {
    mavenCentral()
}

dependencies {

    ext {
        jacksonVersion = '2.11.4'
    }

    compile 'com.squareup.okhttp3:okhttp:3.12.0'
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion"
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'org.zeroturnaround:zt-exec:1.11'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compileOnly 'junit:junit:4.12'
    testCompile 'com.sun.jersey:jersey-client:1.19.4'
    testCompile 'com.google.guava:guava:20.0'
    testCompile 'org.springframework:spring-web:4.3.20.RELEASE'
    testCompile 'org.apache.httpcomponents:httpclient:4.5.6'
    testCompile 'org.assertj:assertj-core:3.19.0'
    testCompile 'net.javacrumbs.json-unit:json-unit:1.31.1'
    testCompile 'net.javacrumbs.json-unit:json-unit-fluent:1.31.1'
    testCompile 'org.eclipse.jetty:jetty-server:9.3.11.v20160721'
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testCompile 'org.mockito:mockito-core:2.23.4'
    testCompile 'org.powermock:powermock-module-junit4:2.0.9'
    testCompile 'com.github.stefanbirkner:system-rules:1.19.0'
    testCompile 'io.projectreactor.ipc:reactor-netty:0.7.12.RELEASE'
    testCompile 'io.projectreactor:reactor-test:3.2.3.RELEASE'
    testCompile 'org.awaitility:awaitility:4.0.3'
}

allprojects { subproj ->

    ext."signing.keyId" = "$System.env.MAVEN_GPG_KEYNAME"
    ext."signing.password" = "$System.env.MAVEN_GPG_PASSPHRASE"
    ext."signing.secretKeyRingFile" = "$System.env.HOME/.gnupg/secring.gpg"
    ext.ossrhUsername = "$System.env.MAVEN_CENTRAL_USERNAME"
    ext.ossrhPassword = "$System.env.MAVEN_CENTRAL_PASSWORD"

    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'java'
    apply plugin: 'net.researchgate.release'

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    def isSnapshot = project.version.contains('SNAPSHOT')

    afterEvaluate {
        if (!isSnapshot) {
            signing {
                sign configurations.archives
            }
        }
    }

    afterReleaseBuild.dependsOn uploadArchives

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: "$ossrhUsername", password: "$ossrhPassword")
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: "$ossrhUsername", password: "$ossrhPassword")
                }

                pom.project {
                    name "${subproj.property('title')}"
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description "${subproj.property('description')}"
                    url 'https://github.com/SpectoLabs/hoverfly-java'

                    scm {
                        connection 'scm:git:git@github.com:SpectoLabs/hoverfly-java.git'
                        developerConnection 'scm:git:git@github.com:SpectoLabs/hoverfly-java.git'
                        url 'git@github.com:SpectoLabs/hoverfly-java.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            name 'Andrew Morgan'
                            email 'andrew.morgan@opencredo.com'
                            organization 'Specto Labs'
                            organizationUrl 'http://www.specto.io'
                        }
                        developer {
                            name 'Tommy Situ'
                            email 'tommy.situ@specto.io'
                            organization 'Specto Labs'
                            organizationUrl 'http://www.specto.io'
                        }
                    }
                }
            }
        }
    }
}

updateVersion.dependsOn subprojects.findResults { it.tasks.findByName('release') }

license {
    header = file('license-header.txt')
    strictCheck true
    include "src/main/**/*.java"
    ext.inceptionYear = 2016
    ext.currentYear = Calendar.getInstance().get(Calendar.YEAR)
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

wrapper {
    gradleVersion = '4.10.2'
}

// Tasks for updating Hoverfly binaries
import java.util.regex.Pattern

task (updateHoverflyBinaries) {
    doLast {
        def downloadUrl = 'https://github.com/SpectoLabs/hoverfly/releases/download'
        def downloadDir = "$buildDir/tmp/dist-${hoverfly_binary_version}"
        println "Downloading Hoverfly $hoverfly_binary_version if needed"
        download {
            src([
                    "$downloadUrl/$hoverfly_binary_version/hoverfly_bundle_linux_386.zip",
                    "$downloadUrl/$hoverfly_binary_version/hoverfly_bundle_linux_amd64.zip",
                    "$downloadUrl/$hoverfly_binary_version/hoverfly_bundle_OSX_amd64.zip",
                    "$downloadUrl/$hoverfly_binary_version/hoverfly_bundle_windows_386.zip",
                    "$downloadUrl/$hoverfly_binary_version/hoverfly_bundle_windows_amd64.zip"
            ])
            dest "$downloadDir"
            onlyIfNewer true
            quiet true
        }
        println "Unzipping Hoverfly ${hoverfly_binary_version} binaries"

        def distDir = file("$downloadDir")
        def extractBinary = { FileTree zip ->
            copy {
                from zip
                into 'src/main/resources/binaries'
                rename { String filename ->
                    def p1 = Pattern.compile('hoverfly(.*)')
                    def m1 = p1.matcher(filename)
                    def extension = m1.find() ? m1.group(1) : ''
                    def p2 = Pattern.compile('hoverfly_bundle(.+?)\\.zip')
                    def m2 = p2.matcher(zip.asPath)
                    def type = m2.find() ? m2.group(1) : ''
                    filename = 'hoverfly' + type + extension
                }
            }
        }

        distDir.listFiles()
                .findAll { it.name.endsWith('.zip') }
                .collect { zipTree(it).matching { include 'hoverfly*' } }
                .each { zip -> extractBinary(zip) }
    }
}

task (cleanHoverflyBinaries, type: Delete) {
    delete fileTree(dir: 'src/main/resources/binaries')
}

processResources {
    dependsOn updateHoverflyBinaries
}
