group = 'net.rossonet'
version = '0.9.7'

ext {
	sourceCompatibility = 1.8
	springStatemachineVersion = '2.2.0.RELEASE'
	springBootVersion = '2.4.2.RELEASE'
	ossrhPassword = System.getenv('OSSRH_PASSWORD')
	springGradleBootVersion = '2.4.2'
}

buildscript {
    ext {
		springGradleBootVersion = '2.4.2'
	}
	
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springGradleBootVersion}")
		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.1"
		classpath "com.diffplug.gradle:goomph:3.18.1"
		classpath "com.netflix.nebula:gradle-ospackage-plugin:8.4.1"
	}
}



apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'com.diffplug.gradle.oomph.ide'
apply plugin: 'jacoco'
apply plugin: 'base'
apply plugin: "nebula.rpm"
apply plugin: 'nebula.deb'


oomphIde {
	repoEclipseLatest()
	jdt {}
	eclipseIni {
		vmargs('-Xmx2g')    // IDE can have up to 2 gigs of RAM
	}
	style {
		classicTheme()  // oldschool cool
		niceText()      // with nice fonts and visible whitespace
	}
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://dl.bintray.com/ethereum/maven/" }
}


subprojects {
	version = rootProject.version
	group = rootProject.group
	sourceCompatibility = rootProject.ext.sourceCompatibility

	ext {
		springStatemachineVersion = rootProject.ext.springStatemachineVersion
		springBootVersion = rootProject.ext.springBootVersion
	}

	buildscript {
		ext {
			springStatemachineVersion = rootProject.ext.springStatemachineVersion
			springGradleBootVersion = rootProject.ext.springGradleBootVersion
		}
		repositories {
			mavenCentral()
			jcenter()
			maven { url "https://plugins.gradle.org/m2/" }
		}
		dependencies {
			classpath("org.springframework.boot:spring-boot-gradle-plugin:${springGradleBootVersion}")
			classpath('se.transmode.gradle:gradle-docker:1.2')
			classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.1"
			classpath 'de.undercouch:gradle-download-task:4.1.1'
			classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
		}
	}

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'maven'
	apply plugin: "com.gorylenko.gradle-git-properties"
	apply plugin: "maven-publish"
	apply plugin: 'base'
	apply plugin: 'signing'
	apply plugin: 'jacoco'

	eclipse {
   		classpath {
        		downloadJavadoc = true
        		downloadSources = true
    		}
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	artifacts {
		archives javadocJar, sourcesJar
	}

	signing {
		sign configurations.archives
	}

	test {
		useJUnit()
		maxHeapSize = "4g"
		minHeapSize = "4g"
		failFast = true
		//jvmArgs '-Xdebug','-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
		testLogging {
			showStandardStreams = true
			events = [
				"standard_out",
				"standard_error"
			]
		}
		finalizedBy jacocoTestReport
	}
	/*
	 jacocoTestReport {
	 dependsOn test
	 }
	 */
	repositories {
		mavenCentral()
		jcenter()
		maven { url "https://maven.mangoautomation.net/repository/ias-release/" }
		maven { url "http://vaadin.com/nexus/content/repositories/vaadin-addons/" }
		maven { url "https://nexus.pentaho.org/content/groups/omni/" }
	}

	task eclipseClosedDependencies {}

	task eclipseClosedDependencies_ {}

	task view { doLast { println "Working on project ${project.name} [ ${project.description} ]" } }

	configurations.all {
		//exclude group:"org.springframework.boot", module: "spring-boot-starter-logging"
		exclude group:"org.slf4j", module: "slf4j-log4j12"
		exclude group:"com.vaadin.external.google", module: "android-json"
		//  exclude group: 'org.codehaus.groovy', module: 'groovy-jsr223', version: '2.5.3'
	}

	dependencies {
		compile group: 'com.beust', name: 'jcommander', version: '1.48'
		compile group: 'org.springframework.shell', name: 'spring-shell-starter', version:'2.0.1.RELEASE' 
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
		compile 'io.netty:netty-all:4.1.56.Final'
		compile("org.springframework.boot:spring-boot-configuration-processor")
		//testCompile('org.springframework.boot:spring-boot-starter-test')
		//testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.1'
		compile('org.bouncycastle:bcprov-jdk15on:1.59')
		compile('org.bouncycastle:bcpkix-jdk15on:1.59')
		compile 'com.github.oshi:oshi-core:5.4.1'
		compile group: 'com.pi4j', name: 'pi4j-core', version: '1.2'
		// ssh
		compile "com.jcraft:jsch:0.1.55"
		compile group: 'org.apache.sshd', name: 'sshd-core', version: '2.2.0'
		compile group: 'org.apache.sshd', name: 'sshd-sftp', version: '2.2.0'
		compile group: 'org.apache.sshd', name: 'sshd-common', version: '2.2.0'
		compile group: 'org.apache.sshd', name: 'sshd-scp', version: '2.2.0'
		// spring
		compile('org.springframework.boot:spring-boot-starter-mail')
		compile("org.springframework:spring-jms")
		compile('org.springframework.boot:spring-boot-starter-logging')
		compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
		compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
		compile('org.springframework.boot:spring-boot-starter-security')
		compile('org.springframework.boot:spring-boot-starter-integration')
		// state machine
		compile "org.springframework.statemachine:spring-statemachine-core:${rootProject.ext.springStatemachineVersion}"
		// jms
		compile group: 'org.springframework.integration', name: 'spring-integration-jms'
		// file
		compile group: 'org.springframework.integration', name: 'spring-integration-file'
		// git
		//compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.0.2.201807311906-r'
		compile 'dnsjava:dnsjava:3.2.2'
		// datastore
		compile group: 'org.fusesource.jdbm', name: 'jdbm', version: '2.0.1'
		compile group: 'joda-time', name: 'joda-time', version: '2.10.8'
		compile group: 'com.google.code.gson', name: 'gson', version: '2.8.4'
		compile group: 'org.json', name: 'json', version: '20201115'
		compile group: 'org.yaml', name: 'snakeyaml', version: '1.24'
		// grpc
		compile ("io.grpc:grpc-netty-shaded:1.34.1") //{ exclude (group:"com.google.guava",module:"guava")}
		compile ('io.grpc:grpc-protobuf:1.34.0')//{ exclude (group:"com.google.guava",module:"guava")}
		compile ('io.grpc:grpc-stub:1.34.0')//{ exclude (group:"com.google.guava",module:"guava")}
		compile ("io.grpc:grpc-auth:1.34.0")//{ exclude (group:"com.google.guava",module:"guava")}
		runtime 'io.netty:netty-tcnative-boringssl-static:2.0.36.Final'
		//script engine groovy-jsr223
		compile 'org.codehaus.groovy:groovy-all:2.5.14'
		compile group: 'org.codehaus.groovy', name: 'groovy-jsr223', version: '2.5.14'
		compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
		compile group: 'org.apache.commons', name: 'commons-compress', version: '1.18'
		compile group: 'commons-codec', name: 'commons-codec', version: '1.15'
		compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.9.0.202009080501-r'
		// non toccare le versioni de non consapevolmente sotto
		compile group: 'javax.websocket', name: 'javax.websocket-api', version: '1.1'
		//compile group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: '3.0.0'
		compile group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '3.0.0'
		compile group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '2.0.0'
		compile group: 'jakarta.activation', name: 'jakarta.activation-api', version: '2.0.1'
		compile (group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '3.0.0') 
		compile (group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '3.0.0') 
		compile (group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '3.0.0') 
		compile (group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '3.0.0') 
		compile (group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '3.0.0') 
		compile (group: 'org.glassfish.jersey.ext', name: 'jersey-entity-filtering', version: '3.0.0')
		compile group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '1.9'
		//compile group: 'org.eclipse.jetty.websocket', name: 'websocket-jetty-client', version: '10.0.2'
		compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.3'
		// non toccare le versioni de non consapevolmente sopra
		compile group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: '3.0.0'
	        testCompile('org.springframework.boot:spring-boot-starter-test')
	        testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.1'

		// per annotazioni console
		/*
		compile group: 'com.beust', name: 'jcommander', version: '1.48'
		compile group: 'org.springframework.shell', name: 'spring-shell-starter', version:'2.0.1.RELEASE'
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
		compile 'io.netty:netty-all:4.1.56.Final'
		compile("org.springframework.boot:spring-boot-configuration-processor")
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.1'	
		*/
	}

	jar { enabled = true }

	jar.doLast { task ->
		ant.checksum file: task.archivePath
	}
/*
	uploadArchives {
		repositories {
			mavenDeployer { repository(url: "file://maven") }
		}
	}
*/

	uploadArchives {
	  repositories {
	    mavenDeployer {
	      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	        authentication(userName: "rossonet", password: "${rootProject.ext.ossrhPassword}")
	      }
	      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
	        authentication(userName: "rossonet", password: "${rootProject.ext.ossrhPassword}")
	      }
	
	      pom.project {
	        name 'Ar4k Edge Agent'
	        packaging 'jar'
	        description 'Java Edge Agent Rossonet.'
	        url 'https://app.rossonet.net/'
	
	        scm {
	          connection 'scm:git:git://github.com/rossonet/EdgeAgentAr4k.git'
	          developerConnection 'scm:git:ssh://github.com:rossonet/EdgeAgentAr4k.git'
	          url 'https://github.com/rossonet/EdgeAgentAr4k/tree/master'
	        }
	        
	        licenses {
	          license {
	            name 'GNU AFFERO GENERAL PUBLIC LICENSE 3.0'
	            url 'https://www.gnu.org/licenses/agpl-3.0.html'
	          }
	        }
	
	        developers {
	          developer {
	            id 'ar4k'
	            name 'Andrea Ambrosini'
	            email 'andrea.ambrosini@rossonet.org'
	          }
	        }
	      }
	    }
	  }
	}
	
	gitProperties {
		failOnNoGitDirectory = false
		customProperty 'ar4kComponent', "${project.name}"
		customProperty 'ar4kVersion', "${version}"
		dateFormat = "yyyy-MM-dd HH:mm:ssZ"
		dateFormatTimeZone = 'GMT'
	}

	task endBootJar {
		doLast{ println ("You can find the fat jar of ${project.name} in ${jar.archivePath}") }
	}

	jacocoTestReport {
    		reports {
        		xml.enabled true
        		html.enabled false
    		}
	}

	javadoc{
		destinationDir = file("${rootProject.buildDir}/docs/javadoc/${project.name}/")
		failOnError=true
		exclude 'com/vaadin/server/**','org/ar4k/agent/tunnels/http2/grpc/beacon/**'
	}

	publishing {
		repositories {
			maven {
				name = "GitHubPackages"
				url = uri("https://maven.pkg.github.com/rossonet/EdgeAgentAr4k")
				credentials {
					username = System.getenv("GITHUB_ACTOR")
					password = System.getenv("PASSWORD")
				}
			}
		}
		publications {
			gpr(MavenPublication) {
				from(components.java)
			}
		}
	}

	clean {
		println("starting clean in ${projectDir}")
		delete ('logs')
		delete ('build')
		delete ('bin')
		delete ('tmp')
		delete fileTree(projectDir) { include 'camel-test' }
		delete fileTree(projectDir) { include 'spring-shell.log' }
		delete fileTree(projectDir) { include 'Ar4kAgent' }
		delete fileTree(projectDir) { include 'ar4kAgent' }
		delete fileTree(projectDir) { include '*.ar4k' }
		delete fileTree(projectDir) { include '*.keystore' }
		delete fileTree(projectDir) { include '*.tmp' }
		delete fileTree(projectDir) { include 'ar4k-agent.log' }
		delete fileTree(projectDir) { include '*.keystore' }
		delete fileTree(projectDir) { include '*.ks' }
		delete fileTree(projectDir) { include '*.log' }
		delete fileTree(projectDir) { include '*.log.*.gz' }
		delete fileTree(projectDir) { include 'beacon-client-*-ca.pem' }
		delete fileTree(projectDir) { include 'beacon-client-*.key' }
		delete fileTree(projectDir) { include 'beacon-client-*.pem' }
		delete fileTree(projectDir) { include 'beacon-client-*.tmp' }
		delete fileTree(projectDir) { include '*.ar4k.conf' }
		delete fileTree(projectDir) { include '*.ar4k.conf.crypto' }
	}

	
}


task eclipseClosedDependencies {}


task ar4kRegenerateProtoBuf {
	group "Ar4k Semantic Router Build"
	description 'Rebuild the GRPC classes from the proto file in core project.'
	ar4kRegenerateProtoBuf.dependsOn(":ar4k-core:generateProto")
}

task cleanGradleCache {
	group "Ar4k Semantic Router Build"
	description 'Remove the ar4k artifacts from local Gradle cache'
	delete "~/.gradle/caches/*/*/org.ar4k.agent"
	delete "~/.gradle/caches/*/*/descriptors/org.ar4k.agent"
	delete "~/.gradle/caches/*/*/ar4k-agent"
	delete "~/.gradle/caches/*/*/descriptors/ar4k-agent"
}

task theiaIdeBackend(type: Exec) {
	group "Theia IDE on Docker Container"
	workingDir "./"
	commandLine 'docker', 'run', '--init', '-p', '3000:3000', '-d', '-v', "${projectDir}:/home/project:cached", 'rossonet/theia-ide:latest'
}

task theiaIdeBackendNoCached(type: Exec) {
	group "Theia IDE on Docker Container"
	workingDir "./"
	commandLine 'docker', 'run', '--init', '-p', '3000:3000', '-d', '-v', "${projectDir}:/home/project", 'rossonet/theia-ide:latest'
}

task theiaIdeBackendNoVolume(type: Exec) {
        group "Theia IDE on Docker Container"
        workingDir "./"
        commandLine 'docker', 'run', '--init', '-p', '3000:3000', '-d', '--name', "docker-ide-${project.name}", 'rossonet/theia-ide:latest'
}

task theiaIdeBackendCopy(type: Exec) {
        theiaIdeBackendCopy.dependsOn("theiaIdeBackendNoVolume")
        group "Theia IDE on Docker Container"
        workingDir "./"
        commandLine 'docker', 'cp', '.', "docker-ide-${project.name}:/home/project/"
}

task theiaIdeBackendStart(type: Exec) {
        theiaIdeBackendStart.dependsOn("theiaIdeBackendCopy")
        group "Theia IDE on Docker Container"
        workingDir "./"
        commandLine 'docker', 'exec', '-u', 'root', "docker-ide-${project.name}", '/bin/chown', '-R', 'theia:theia', '/home/project'
}

task printTheiaIdeBackendDockerCommand(type: Exec) {
        group "Theia IDE on Docker Container"
        workingDir "./"
        commandLine 'echo', 'docker', 'run', '--init', '-p', '3000:3000', '-d', '--name', "docker-ide-${project.name}", 'rossonet/theia-ide:latest'
}

task theiaIdeLocalBrowser(type: Exec) {
	group "Theia IDE on Docker Container"
	workingDir "./"
	commandLine 'xdg-open', 'http://localhost:3000'
}

task ar4kListProjects {
	group "Ar4k Semantic Router Build"
	description 'List all the components of Ar4k Semantic Router.'
	subprojects { pr ->
		ar4kListProjects.dependsOn("${pr.path}:view")
	}
}

task ar4kPublishMavenProjects {
	group "Ar4k Semantic Router repository MVN"
	description 'Publish all the artifacts and the pom files of Ar4k Semantic Router.'
	subprojects { pr ->
		ar4kPublishMavenProjects.dependsOn("${pr.path}:uploadArchives")
	}
}

task ar4kAllJavaDoc(type: Javadoc) {
	group "Ar4k Semantic Router Build"
	description 'Generate Java Doc for all the apis.'
	subprojects { pr ->
		ar4kAllJavaDoc.dependsOn("${pr.path}:javadoc")
	}
}

task ar4kBootJarSmall {
	group "Ar4k Semantic Router Build"
	description 'Build Ar4k Semantic Router as a single fat jar. This is the small version.'
	ar4kBootJarSmall.dependsOn(":ar4k-agent-small:bootJar")
	ar4kBootJarSmall.dependsOn(":ar4k-agent-small:endBootJar")
}

task ar4kDockerContainerSmall {
	group "Ar4k Semantic Router Build"
	description 'Build Ar4k Semantic Router as a docker container. This is for the small version.'
	ar4kDockerContainerSmall.dependsOn(":ar4k-agent-small:buildDocker")
}

task ar4kBootJarQa {
	group "Ar4k Semantic Router Build"
	description 'Build Ar4k Semantic Router as a single fat jar. This is the quality assurance version for testing.'
	ar4kBootJarQa.dependsOn(":ar4k-agent-qa:bootJar")
	ar4kBootJarQa.dependsOn(":ar4k-agent-qa:endBootJar")
}

task ar4kBootJarWeb {
	group "Ar4k Semantic Router Build"
	description 'Build Ar4k Semantic Router as a single fat jar. This is the web Scada version for testing.'
	ar4kBootJarWeb.dependsOn(":ar4k-agent-web:bootJar")
	ar4kBootJarWeb.dependsOn(":ar4k-agent-web:endBootJar")
}

task webDevelopProcess {
        group "Vaadin"
        description 'Run Vaadin with auto reload'
        //webDevelopProcess.dependsOn(":ar4k-agent-web:clean")
        webDevelopProcess.dependsOn(":ar4k-agent-web:vaadinBuildFrontend")
        webDevelopProcess.dependsOn(":ar4k-agent-web:bootRun")
}

task ar4kDockerContainerQa {
	group "Ar4k Semantic Router Build"
	description 'Build Ar4k Semantic Router as a docker container. This is the quality assurance version fro testing'
	ar4kDockerContainerQa.dependsOn(":ar4k-agent-qa:buildDocker")
}

task ar4kBootJarDruido {
	group "Ar4k Semantic Router Build"
	description 'Build Ar4k Semantic Router as a single fat jar. This is the Druido robot version'
	ar4kBootJarDruido.dependsOn(":ar4k-agent-druido:bootJar")
	ar4kBootJarDruido.dependsOn(":ar4k-agent-druido:endBootJar")
}

task makeRpmDruido(type: Rpm){
  makeRpmDruido.dependsOn("ar4kBootJarDruido")
  requires('java-1.8.0-openjdk')
  requires('telnet')
  requires('bash')
  requires('xterm')
  requires('wget')
  group "Ar4k Semantic Router Build"
  description 'Builds the Druido agent in rpm format'
  packageName "ar4k-agent-druido"
  version "${rootProject.version}"
  release "1"
  user 'root'
  os 'LINUX'
  url 'www.rossonet.com'
  summary 'Ar4k EdgeAgent distribution'
  packageDescription 'Druido agent of Edge System Rossonet'
  license 'AGPL3'
  provides 'ar4k-edge-system'
  from('ar4k-agent-druido/build/libs'){
    into '/opt/rossonet'
  }
  from('dist-utils/init-druido'){
    into '/etc/systemd/system'
  }
  directory('/opt/rossonet/ar4k')
  link('/opt/rossonet/ar4k-agent-druido.jar',"/opt/rossonet/ar4k-agent-druido-${rootProject.version}.jar")
}

task makeRpmWeb(type: Rpm){
  makeRpmWeb.dependsOn("ar4kBootJarWeb")
  requires('java-1.8.0-openjdk')
  requires('telnet')
  requires('bash')
  requires('xterm')
  requires('wget')
  group "Ar4k Semantic Router Build"
  description 'Builds the Web agent in rpm format'
  packageName "ar4k-agent-web"
  version "${rootProject.version}"
  release "1"
  user 'root'
  os 'LINUX'
  url 'www.rossonet.com'
  summary 'Ar4k EdgeAgent distribution'
  packageDescription 'Web agent of Edge System Rossonet'
  license 'AGPL3'
  provides 'ar4k-edge-system'
  from('ar4k-agent-web/build/libs'){
    into '/opt/rossonet'
  }
  from('dist-utils/init-web'){
    into '/etc/systemd/system'
  }
  directory('/opt/rossonet/ar4k')
  link('/opt/rossonet/ar4k-agent-web.jar',"/opt/rossonet/ar4k-agent-web-${rootProject.version}.jar")
}

task makeDebianDruido(type: Deb){
  makeDebianDruido.dependsOn("ar4kBootJarDruido")
  requires('default-jdk')
  requires('telnet')
  requires('wget')
  group "Ar4k Semantic Router Build"
  description 'Builds the Druido agent in deb package format'
  packageName "ar4k-agent-druido"
  version "${rootProject.version}"
  release "1"
  user 'root'
  os 'LINUX'
  url 'www.rossonet.com'
  summary 'Ar4k EdgeAgent distribution'
  packageDescription 'Druido agent of Edge System Rossonet'
  license 'AGPL3'
  provides 'ar4k-edge-system'
  from('ar4k-agent-druido/build/libs'){
    into '/opt/rossonet'
  }
  from('dist-utils/init-druido'){
    into '/etc/systemd/system'
  }
  directory('/opt/rossonet/ar4k')
  link('/opt/rossonet/ar4k-agent-druido.jar',"/opt/rossonet/ar4k-agent-druido-${rootProject.version}.jar")
}

task makeDebianWeb(type: Deb){
  makeDebianWeb.dependsOn("ar4kBootJarWeb")
  requires('default-jdk')
  requires('telnet')
  requires('wget')
  group "Ar4k Semantic Router Build"
  description 'Builds the Web agent in deb package format'
  packageName "ar4k-agent-web"
  version "${rootProject.version}"
  release "1"
  user 'root'
  os 'LINUX'
  url 'www.rossonet.com'
  summary 'Ar4k EdgeAgent distribution'
  packageDescription 'Web agent of Edge System Rossonet'
  license 'AGPL3'
  provides 'ar4k-edge-system'
  from('ar4k-agent-web/build/libs'){
    into '/opt/rossonet'
  }
  from('dist-utils/init-web'){
    into '/etc/systemd/system'
  }
  directory('/opt/rossonet/ar4k')
  link('/opt/rossonet/ar4k-agent-web.jar',"/opt/rossonet/ar4k-agent-web-${rootProject.version}.jar")
}

task printVersionName() {
	group "Ar4k Semantic Router Build"
	description 'Print Agent version'
        println "\nAr4k version ${rootProject.version}"
}

task ar4kDockerContainerDruido {
	group "Ar4k Semantic Router Build"
	description 'Build Ar4k Semantic Router as a docker container. This is the Druido robot version'
	ar4kDockerContainerDruido.dependsOn(":ar4k-agent-druido:buildDocker")
}

task buildAllDockerContainers {
	group "Ar4k Semantic Router Build"
	description 'Build Ar4k Semantic Router as a docker container. This builds all the containers: standard, small, qa and full.'
	buildAllDockerContainers.dependsOn(":ar4k-agent-small:buildDocker")
	buildAllDockerContainers.dependsOn(":ar4k-agent-qa:buildDocker")
	buildAllDockerContainers.dependsOn(":ar4k-agent-druido:buildDocker")
}

task buildAllBootJars {
	group "Ar4k Semantic Router Build"
	description 'Build Ar4k Semantic Router as a single fat jar. This builds all the jars: standard, small, qa and full.'
	buildAllBootJars.dependsOn("ar4kBootJarSmall")
	buildAllBootJars.dependsOn("ar4kBootJarQa")
	buildAllBootJars.dependsOn("ar4kBootJarWeb")
}


test {
	useJUnit()
	maxHeapSize = "1024m"
	minHeapSize = "1024m"
	failFast = true
	jvmArgs '-Xdebug','-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
	testLogging {
		showStandardStreams = true
		events = [
			"standard_out",
			"standard_error"
		]
	}
	finalizedBy jacocoTestReport
}

eclipse {
    classpath {
        downloadJavadoc = true
	downloadSources = true
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}


tasks.eclipse.dependsOn(cleanEclipse)
