/*
 *   Copyright (C) 2019-2020 bkosaraju
 *   All Rights Reserved.
 *
 *   Licensed to the Apache Software Foundation (ASF) under one
 *   or more contributor license agreements.  See the NOTICE file
 *   distributed with this work for additional information
 *   regarding copyright ownership.  The ASF licenses this file
 *   to you under the Apache License, Version 2.0 (the
 *   "License"); you may not use this file except in compliance
 *   with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */


buildscript {
    ext.scalaVariant = "2.12"
    ext.sparkVersion = "3.0.0"
    ext.awsSDKVersion = "1.11.721"

    repositories {
        maven {
            url "${gradle.artifactoryUrl}"
            if (System.getenv("ARTIFACTORY_USER") || Project.hasProperty('artifactoryUser')) {
                credentials {
                    username = System.getenv("ARTIFACTORY_USER") ?: artifactoryUser
                    password = System.getenv("ARTIFACTORY_PASSWORD") ?: artifactoryPassword
                }
            }
        }
        dependencies {
            classpath "org.ajoberstar:grgit:2.3.0"
            classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        }
    }
}

plugins {
    id 'scala'
    id "org.scoverage" version "4.0.2"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "jacoco"
    id "java-library"
    id "com.adarshr.test-logger" version "1.3.0"
    id "maven-publish"
}

group "${gradle.projectGroup}"

repositories {
    maven {
        url "${gradle.artifactoryUrl}"
        if (System.getenv("ARTIFACTORY_USER") || Project.hasProperty('artifactoryUser')) {
            credentials {
                username = System.getenv("ARTIFACTORY_USER") ?: artifactoryUser
                password = System.getenv("ARTIFACTORY_PASSWORD") ?: artifactoryPassword
            }
        }
    }
}
configurations {
    assembly
    compile.extendsFrom assembly
}

configurations {
    provided
    compile.extendsFrom provided
}

configurations {
    testImplementation.extendsFrom compileOnly
}

configurations {
    archivesBaseName = "${gradle.projectName}" + "_${scalaVariant}"
}

dependencies {
    api group: 'org.scala-lang', name :'scala-library', version : "$scalaVariant"+'.12'

    api group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    api group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    api group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'
    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    //Amazon SDK internal dependency
    implementation 'commons-logging:commons-logging:1.1.1'
    api group: 'com.zaxxer', name: 'HikariCP', version: '3.3.1'
    api group: 'org.springframework', name: 'spring-jdbc', version: '5.2.0.RELEASE'
    api group: 'org.springframework', name: 'spring-web', version: '5.2.0.RELEASE'
    api group: 'commons-io', name: 'commons-io', version: '2.4'

    //SSM Dependencies
    api group: 'com.amazonaws', name: 'aws-java-sdk-ssm', version: "$awsSDKVersion"
    api group: 'com.amazonaws', name: 'aws-java-sdk-core', version: "$awsSDKVersion"
    api group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: "$awsSDKVersion"
    api group: 'com.amazonaws', name: 'aws-java-sdk-eks', version: "$awsSDKVersion"
    api group: 'com.amazonaws', name: 'aws-java-sdk-sts', version: "$awsSDKVersion"
    api group: 'com.amazonaws', name: 'aws-java-sdk-emr', version: "$awsSDKVersion"

    //JSCH(sftp) library
    api group: 'com.jcraft', name: 'jsch', version: '0.1.54'

    //Scala Better Resource management Utils
    api group: 'com.jsuereth', name: 'scala-arm_'+"$scalaVariant", version: '2.0'

    //Mail API
    api group: 'com.sun.mail', name: 'javax.mail', version: '1.6.0'

    //Spark dependencies(only for compile)
    compileOnly group: 'org.apache.spark', name: 'spark-core_'+"$scalaVariant", version:"$sparkVersion"
    compileOnly group: 'org.apache.spark', name: 'spark-sql_'+"$scalaVariant", version:"$sparkVersion"
    compileOnly group: 'org.apache.spark', name: 'spark-hive_'+"$scalaVariant", version:"$sparkVersion"

    //Kubernetes Client
    api group: 'io.kubernetes', name: 'client-java', version: '7.0.0'

    //Template Wrapper
    //api group: 'org.scalatra.scalate', name: 'scalate-core_'+"$scalaVariant", version: '1.8.0'
    compile group: 'com.github.spullara.mustache.java', name: 'scala-extensions-2.12', version: '0.9.6'

    //Splunk HEC Integration
    api group: 'org.apache.camel', name: 'camel-splunk-hec', version: '3.4.3'
    api group: 'org.apache.camel', name: 'camel-core', version: '3.4.3'


    // Use Scalatest for testing our library
    testImplementation group: "org.scalatest", name: "scalatest_$scalaVariant", version :"3.0.5"
    testImplementation group: "junit", name: "junit", version :"4.12"
    testImplementation group: "com.github.stefanbirkner", name: "system-rules", version: "1.16.0"
    testRuntimeOnly group: "org.pegdown", name: "pegdown", version: "1.6.0"
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
}


compileScala {
    scalaCompileOptions.additionalParameters = ["-feature"]
}

shadowJar {
    zip64 true
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}

tasks.build.dependsOn tasks.shadowJar

test {
    useJUnit {}
    jvmArgs '-Xmx1024m'
    testLogging.showStandardStreams = true
    reports {
        junitXml.enabled = true
    }

}


testlogger {
    theme 'standard'
    showExceptions true
    slowThreshold 10000
    showSummary true
    showStandardStreams false
}

//Enable only on need basis
//def gitlogDir = new File( project.projectDir.toString() + '/.git')
//if (gitlogDir.exists()) {
//    apply from: 'ci/git.gradle'
//    apply from: 'ci/artifactory.gradle'
//    apply from: 'ci/sonatype.gradle'
//}
