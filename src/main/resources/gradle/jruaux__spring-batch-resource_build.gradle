plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'distribution'
	id 'java-library'
    id 'java-library-distribution'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.8.5'
	id 'net.researchgate.release' version '2.8.1'
	id 'com.github.ben-manes.versions' version '0.38.0'
	id 'com.github.breadmoirai.github-release' version '2.2.12'
}

group = 'org.ruaux'
description = 'Spring Batch Resource'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

bootJar {
    enabled = false
}

jar {
    enabled = true
}

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
	jcenter()
	mavenCentral()
	mavenLocal()
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.hsqldb:hsqldb'
	testImplementation 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

test {
	useJUnitPlatform()
}

distributions {
    main {
        contents {
            from (project.docsDir) {
                into 'docs'
            }
            from 'README.adoc'
            from 'LICENSE'
        }
    }
}

distTar {
    compression = Compression.GZIP
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Spring Batch Resource'
                description = 'Spring Batch item writers for file resources instead of actual files'
                url = 'https://github.com/jruaux/spring-batch-resource'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jruaux'
                        name = 'Julien Ruaux'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jruaux/spring-batch-resource'
                    developerConnection = 'scm:git:git@github.com:jruaux/spring-batch-resource'
                    url = 'https://github.com/jruaux/spring-batch-resource'
                }
            }
        }
    }
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('BINTRAY_KEY')
	publications = ['mavenJava']
	publish = true
	pkg {
		repo = 'maven'
		name = project.name
		licenses = ['Apache-2.0']
		vcsUrl = 'https://github.com/jruaux/spring-batch-resource.git'
		version {
			gpg {
				sign = true
			}
			mavenCentralSync {
				sync = true
				user = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
				password = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
			}
		}
	}
}

githubRelease {
	token = project.hasProperty('githubToken') ? project.property('githubToken') : ''
	owner "jruaux"
	repo "spring-batch-resource"
    releaseAssets distZip, distTar
    draft true
	body changelog()
}

tasks.distZip.shouldRunAfter tasks.javadocJar
afterReleaseBuild.dependsOn ":githubRelease"
afterReleaseBuild.dependsOn bintrayUpload