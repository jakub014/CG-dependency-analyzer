import groovy.json.JsonSlurper

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.22.0' // Requires nexusUsername and nexusPassword properties to be defined
    id 'de.undercouch.download' version '4.1.1'
}

group = 'com.unstoppabledomains'
archivesBaseName = 'resolution'

sourceCompatibility=JavaVersion.VERSION_1_8
targetCompatibility=JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

java {
    withSourcesJar()
    withJavadocJar()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'com.esaulpaugh:headlong:3.4.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.65.01'

    compileOnly 'org.projectlombok:lombok-maven-plugin:1.18.16.0'

    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name.set('resolution')
                description.set('Resolution library that talks with Ethereum .crypto registry to resolve various information attached to .crypto domain')
                url.set('https://github.com/unstoppabledomains/resolution-java')
                licenses {
                    license {
                        name.set('MIT License')
                        url.set('http://www.opensource.org/licenses/mit-license.php')
                    }
                }
                developers {
                    developer {
                        id.set('GentelmanJohn')
                        name.set('Jeyhun')
                        email.set('johnny@unstoppabledomains.com')
                        organization.set('com.github.unstoppabledomains')
                        organizationUrl.set('https://unstoppabledomains.com')
                    }
                }
                scm {
                    connection.set('scm:git:git://github.com/unstoppabledomains/resolution-java.git')
                    developerConnection.set('scm:git:ssh://github.com/unstoppabledomains/resolution-java.git')
                    url.set('https://github.com/unstoppabledomains/resolution-java')
                }
            }
        }
    }
    repositories {
        maven {
            name = 'MavenCentral'
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv('nexusUsername')
                password = System.getenv('nexusPassword')
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(System.getenv('PGP_SIGNING_KEY'), System.getenv('PGP_SIGNING_PASSWORD'))
    sign publishing.publications.mavenJava
}

nexusStaging {
    username = System.getenv('nexusUsername')
    password = System.getenv('nexusPassword')
}

task getVersion {
    def client = file('src/main/resources/com/unstoppabledomains/config/client/client.json')
    version = new JsonSlurper().parseText(client.text).'version'
}

task pullNetworkConfig(type: Download) {
    src 'https://raw.githubusercontent.com/unstoppabledomains/dot-crypto/master/src/network-config/network-config.json'
    dest 'src/main/resources/com/unstoppabledomains/config/network'
}
