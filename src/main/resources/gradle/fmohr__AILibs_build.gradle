buildscript { 
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
	}
}

// Artifact publishing and versoning
plugins {
	id 'nebula.release' version '6.0.2'
	id "nebula.project" version "3.4.0"
	id "nebula.maven-base-publish" version "5.1.4"
	id "org.sonarqube" version "2.6.2"
}

allprojects {
	//Shadow for fat-jars
	apply plugin: "com.github.johnrengelman.shadow"

	//IDE
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "idea"

	//Other
	apply plugin: "maven"
	apply plugin: "jacoco"
	apply plugin: "signing"

	//Nebula
	apply plugin: 'nebula.project'
	apply plugin: 'nebula.nebula-release'
	apply plugin: 'nebula.maven-base-publish'

	//Java version
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	//Project properties
	project.group = 'ai.libs'
	project.version = '0.2.4'
	
	ext {
	    ossrhUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("ossrhUsername")
	    ossrhPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("ossrhPassword")
	    
	    // api4 dependencies
	    api4Version = '1.0.0'
	    api4common = 'org.api4:common:' + api4Version
	    api4algorithm = 'org.api4:algorithm:' + api4Version
	    api4datastructure = 'org.api4:datastructure:' + api4Version
	    api4AIgraphsearch = 'org.api4:ai-graphsearch:' + api4Version
	    api4AIml = 'org.api4:ai-ml:' + api4Version
	    
	    // apache dependencies
	    apacheCommonsCollections = 'org.apache.commons:commons-collections4:4.1'
	    apacheCommonsMath = 'org.apache.commons:commons-math3:3.6.1'
	    apacheCommonsLang = 'org.apache.commons:commons-lang3:3.9'
	    
	    // openml dependencies
	    openmlAPIConnector = 'org.openml:apiconnector:1.0.23'
	    
	    // graphstream
	    gsCore = 'com.github.mwever:gs-core:2.0.2-synchrofix'
	    gsUIJavaFX = 'com.github.graphstream:gs-ui-javafx:2.0-alpha'
	    gsAlgo = 'com.github.graphstream:gs-algo:2.0-alpha'
	    
	    // ProtoBuf
	    grpcAPI = 'io.grpc:grpc-api:1.24.1'
	    grpcCore = 'io.grpc:grpc-core:1.24.1'
	    grpcStub = 'io.grpc:grpc-stub:1.24.1'
	    grpcPB = 'io.grpc:grpc-protobuf:1.24.1'
	    protoBuf = 'com.google.protobuf:protobuf-java:3.11.0'
	    
	    // Common utilities
	    jsonDatabind = 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
	    owner = 'org.aeonbits.owner:owner-java8:1.0.10'
	    guava = 'com.google.guava:guava:27.0-jre'
	    
	    // Specific Utils
	    fastUtil = 'it.unimi.dsi:fastutil:8.2.1' // JAICore-Basic
	    mtj = 'io.github.andreas-solti.matrix-toolkits-java:mtj:1.0.8'
	    jna = 'net.java.dev.jna:jna:5.6.0' // JAICore-Processes
	    weka = 'ai.libs.thirdparty:interruptible-weka:0.1.6'
	    wekaRotationForest = 'nz.ac.waikato.cms.weka:rotationForest:1.0.3'
	    meka = 'ai.libs.thirdparty:interruptible-meka:0.1.2'
	    mysql = 'mysql:mysql-connector-java:5.1.45'
	    moea = 'org.moeaframework:moeaframework:2.12'
	    cli = 'commons-cli:commons-cli:1.4'
	}

	
	sourceSets {
		main {
			java {
				srcDir 'src/main/java'
			}
			resources {
				srcDir 'conf'
				srcDir 'resources'
			}
		}
		test {
			java {
				srcDir 'src/test/java'
				srcDir 'src/example/java'
			}
		}
	}

	//Repositories
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://jitpack.io" }
		maven { url "https://clojars.org/repo/" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	//Dependencies for all(!) projects
	dependencies {
		
		// configuration
		compile ('org.aeonbits.owner:owner-java8:1.0.10')
		// event bus
		compile('com.google.guava:guava:27.0-jre')
	
		//Logger
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
		runtimeOnly group: 'org.slf4j', name:'slf4j-log4j12', version:'1.7.25'

		//Testing
		//testCompile group: 'junit', name: 'junit', version: '4.12'
	    testImplementation 'org.junit.platform:junit-platform-runner:1.7.0'
	    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
	    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	    
		testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
		testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
		testImplementation 'org.awaitility:awaitility:4.0.3'
	}
	
	//Always check for updates in SNAPSHOT versions, do not cache
	configurations.all {
		// check for updates every build
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	    exclude module: 'all'
	}

	//Nebula releases
	nebulaRelease { addReleaseBranchPattern('/dev/') }

	//Sonarqube config
	sonarqube {
		properties {
			properties["sonar.projectKey"] = "starlibs.ailibs"
			properties["sonar.projectName"] = project.name
			properties["sonar.projectDescription"] = project.description
			properties["sonar.projectVersion"] = project.version
			properties["sonar.projectBaseDir"] = project.projectDir
			properties["sonar.working.directory"] = "$project.buildDir/sonar"
			properties["sonar.sourceEncoding"] = project.compileJava.options.encoding
			properties["sonar.java.source"] = project.sourceCompatibility
			properties["sonar.java.target"] = project.targetCompatibility
		}
	}

	// This task creates a jar with test classes.
	task testClassesJar(type: Jar) {
		classifier = 'tests'
		from sourceSets.test.output
	}
  
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	// Add a new configuration named testArtifacts
	configurations {
		testArtifacts
	}
	// testArtifacts contains the jar with test classes.
	// Other projects can declare the dependency:
	//      testCompile project(path: ':JAICore:jaicore-basic', configuration: 'testArtifacts')
	artifacts {
		testArtifacts testClassesJar
		archives sourcesJar, javadocJar
	}
	
	// generate JavaDoc for each project
    	task generateJavadoc(type: Javadoc) {
        	source = sourceSets.main.allJava
        	classpath = files(sourceSets.main.compileClasspath)
        	destinationDir = file("docs/javadoc")
//		failOnError = true
    	}
	
	signing {
		sign configurations.archives
	}
	

	eclipse {
	    project.natures "org.eclipse.buildship.core.gradleprojectnature"
	}

	// configure logging behavior for all test tasks
	tasks.withType(Test) {
	
		useJUnitPlatform()
		
	     	reports {
			junitXml.enabled = false
			html.enabled = true
		}
		forkEvery = 1		
		maxParallelForks = 1
		
		minHeapSize = "1g"
	     	maxHeapSize = "4g"
		
		testLogging {
			events "failed", "passed", "skipped"
			exceptionFormat "full"
			showExceptions true
			showCauses true
			showStackTraces true

			// set options for log level DEBUG and INFO
			debug {
			    events "started", "failed", "passed", "skipped", "standard_error", "standard_out"
			    exceptionFormat "full"
			}
			info.events = debug.events
			info.exceptionFormat = debug.exceptionFormat
			

			afterSuite { desc, result ->
			    if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			    }
			}
		}
		
	     	
	     	ext.testFailures = 0
	     	afterSuite { desc, result ->
		    if (desc.getParent() == null) {
		        ext.testFailures += result.getFailedTestCount() //count failures
		    }
		}
         
		gradle.buildFinished { //when it finishes check if there are any failures and blow up
	    		if (ext.testFailures > 0) {
				ant.fail("The build finished but ${ext.testFailures} tests failed - blowing up the build ! ")
	    		}
	    	}
	}
	
	task testQuick(type: Test) {
		useJUnitPlatform{
			excludeTags 'medium-test'
			excludeTags 'long-test'
		}
		minHeapSize = "1g"
	     	maxHeapSize = "4g"
	}
	
	task testInterruptibility(type: Test) {
		useJUnitPlatform{
			filter {
				includeTestsMatching "*testInterrupt"
				includeTestsMatching "*testInterruptWhenParallelized"
			}
		}
	}
	
	task testCancelability(type: Test) {
		useJUnitPlatform{
			filter {
				includeTestsMatching "*testCancel"
				includeTestsMatching "*testCancelWhenParallelized"
			}
		}
	}
	
	task testTimeoutability(type: Test) {
		useJUnitPlatform{
			filter {
				includeTestsMatching "*testTimeout"
				includeTestsMatching "*testTimeoutWhenParallelized"
			}
		}
	}
	
	task testWithoutICT(type: Test) {
		useJUnitPlatform{
			filter {
				excludeTestsMatching "*testInterrupt"
				excludeTestsMatching "*testInterruptWhenParallelized"
				excludeTestsMatching "*testCancel"
				excludeTestsMatching "*testCancelWhenParallelized"
				excludeTestsMatching "*testTimeout"
				excludeTestsMatching "*testTimeoutWhenParallelized"
			}
		}
	}
	
	task testMedium(type: Test) {
		useJUnitPlatform{
			excludeTags 'long-test'
		}
	}
	
	test {
	     	reports {
			junitXml.enabled = false
			html.enabled = true
		}
	}
}

task showDirs {
    doLast {
        logger.quiet(rootDir.toPath().relativize(project.reportsDir.toPath()).toString())
        logger.quiet(rootDir.toPath().relativize(project.testResultsDir.toPath()).toString())
    }
}

dependencies{
	compile project(":hasco-core")
	compile project(":hasco-fanova")
	//compile project(":autofe")
	//compile project(":autofe-reldata")
	compile project(":mlplan-core")
	compile project(":mlplan-weka")
	compile project(":mlplan-sklearn")
	compile project(":mlplan-meka")
	compile project(":mlplan-ext-metalearning")
	compile project(":mlplan-ext-reduction")
	compile project(":mlplan-ext-bigdata")
	compile project(":mlplan-full")
	compile project(":JAICore:jaicore-basic")
	compile project(":JAICore:jaicore-components")
	compile (project(":JAICore:jaicore-ea")) {
		exclude group: 'commons-cli'
	}
	compile project(":JAICore:jaicore-experiments")
	compile project(":JAICore:jaicore-algorithminspector")
	compile project(":JAICore:jaicore-logic")
	compile project(":JAICore:jaicore-math")
	compile project(":JAICore:jaicore-ml")
	compile project(":JAICore:jaicore-ml-weka")
	compile project(":JAICore:jaicore-ml-meka")
	compile project(":JAICore:jaicore-planning")
	compile project(":JAICore:jaicore-processes")
	compile project(":JAICore:jaicore-search")
}

publish.dependsOn shadowJar
