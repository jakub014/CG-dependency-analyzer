buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'jacoco'
    id 'maven'
    id 'signing'
    id 'eclipse'
    id 'maven-publish'
}


group = "com.vonage"
archivesBaseName = "client"
version = "6.2.0"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

dependencies {
    implementation 'commons-codec:commons-codec:1.9'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'org.apache.httpcomponents:httpclient:4.5.8'
    implementation 'commons-io:commons-io:2.5'
    implementation 'org.apache.commons:commons-lang3:3.5'
    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
    implementation 'io.openapitools.jackson.dataformat:jackson-dataformat-hal:1.0.4'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation "com.nexmo:jwt:1.0.1"

    testImplementation  "javax.servlet:javax.servlet-api:3.1.0"
    testImplementation  'junit:junit:4.4'
    testImplementation  "org.mockito:mockito-core:2.25.1"
    testImplementation  'org.hamcrest:hamcrest-all:1.3'
    testImplementation  group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.7'
    testImplementation  group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.7'
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

javadoc {
    /* info for JavaDoc options http://docs.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html#overviewcomment */
    title "Vonage Java Server SDK"
    // uncomment this to use a custom javadoc overview
    //options.overview = file("src/main/javadoc/overview.html")
    // uncomment this to use the custom javadoc styles
    //options.stylesheetFile = file("src/main/javadoc/css/styles.css")
    //exclude "..."
    options.linkSource = true
}

jar {
    manifest {
        attributes(
                "Created-By": 'Vonage',
                'Implementation-Vendor': 'Vonage',
                'Implementation-Title': 'Vonage Java Server SDK',
                'Implementation-Version': archiveVersion
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc
}
assemble.dependsOn javadocJar

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "Vonage Java Server SDK"
                artifactId = 'client'
                packaging = 'jar'
                description = "Java client for Vonage APIs"
                url = "https://github.com/Vonage/vonage-java-sdk"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://raw.github.com/Vonage/vonage-java-sdk/6.x/LICENCE.txt"
                    }
                }
                developers {
                    developer {
                        id = "devrel"
                        name = "Vonage Devrel"
                        email = "devrel@vonage.com"
                    }
                }
                scm {
                    connection = "scm:git@github.com:Vonage/vonage-java-sdk"
                    developerConnection = "scm:git@github.com:Vonage/vonage-java-sdk"
                    url = "http://github.com:Vonage/vonage-java-sdk"
                }

                issueManagement{
                    system = "GitHub"
                    url = "https://github.com/vonage/vonage-java-sdk/issues"
                }
            }
        }
    }
    repositories{
        maven{
            def releasesRepoUrl = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            def snapshotsRepoUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            credentials.username(System.getenv("OSS_USERNAME"))
            credentials.password(System.getenv("OSS_PASSWORD"))
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    def signingKey = System.getenv("signingKey")
    def signingPassword = System.getenv("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

task zip(type: Zip) {
    from configurations.runtime.allArtifacts.files
    from configurations.runtime
    into(project.name + '-' + project.version)
}

task depJar(type: Jar, dependsOn: configurations.runtime) {
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
