import java.time.Year

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    // check dependency updates: ./gradlew dependencyUpdates -Drevision=release
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'io.codearte.nexus-staging' version '0.30.0'
    id 'com.github.spotbugs' version '4.7.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'org.apache.commons:commons-compress:1.20'
    compile 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    compile 'org.xerial:sqlite-jdbc:3.34.0'
    compile 'com.beust:jcommander:1.78'
    compile 'joda-time:joda-time:2.10.10'
    compile 'net.sf.jchart2d:jchart2d:3.3.2'
    compile 'org.hdrhistogram:HdrHistogram:2.1.12'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.2'
    compile 'net.jcip:jcip-annotations:1.0'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'com.healthmarketscience.jackcess:jackcess:4.0.0'
    compile 'com.opencsv:opencsv:5.4'
    testCompile 'junit:junit:4.13.2'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
}

group = 'nl.stokpop'
version = file("VERSION").readLines().first()
description = 'LogRater'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    options.encoding = "UTF-8"
}
javadoc {
    options.encoding = "UTF-8"
    options.addStringOption('Xdoclint:none', '-quiet')
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

spotbugs {
    ignoreFailures.set(true)
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'nl.stokpop.lograter.LogRater'
    }
    archiveBaseName.set('lograter-exec')
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }
}

license {
    header = rootProject.file("src/main/resources/META-INF/LICENSE.txt")
    ext.year = Year.now().value
    ext.name = 'Peter Paul Bakker, Stokpop Software Solutions'
    excludes(["**/*.txt", "**/*.properties", "src/test/resources/**/*.*"])
    // keeps complaining about header not present, so added this
    skipExistingHeaders = true
    mapping {
        // the standard java style makes intellij complain about dangling javadoc
        java = "SLASHSTAR_STYLE"
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

if (project.hasProperty('release')) {

    subprojects {

        task javadocJar(type: Jar) {
            archiveClassifier.set('javadoc')
            from javadoc
        }

        task sourcesJar(type: Jar) {
            archiveClassifier.set('sources')
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }
    }

    allprojects {
        apply plugin: 'signing'
        apply plugin: 'maven'

        // Signature of artifacts
        signing {
            sign configurations.archives
        }

        // OSSRH publication
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    String repositoryUrl
                    if (version.endsWith("SNAPSHOT")) {
                        repositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                    }
                    else {
                        repositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    }
                    repository(url: repositoryUrl) {
                        authentication(userName: ossrhUser, password: ossrhPassword)
                    }
                    pom.project {
                        name project.name
                        description project.description
                        packaging 'jar'
                        url 'https://github.com/stokpop/lograter.git'

                        scm {
                            connection 'scm:git:https://github.com/stokpop/lograter.git'
                            developerConnection 'scm:git:git@github.com:stokpop/lograter.git'
                            url 'https://github.com/stokpop/lograter.git'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'stokpop'
                                name = 'Peter Paul Bakker'
                                email = 'peter.paul.bakker@stokpop.nl'
                            }
                        }
                    }
                }
            }
        }

    }
}

nexusStaging {
    username = project.hasProperty("ossrhUser") ?: "nobody"
    password = project.hasProperty("ossrhPassword") ?: "nopassword"
}

processResources {
    def props=["version":version]
    filesMatching('lograter.properties') {
        expand(props)
    }
}
