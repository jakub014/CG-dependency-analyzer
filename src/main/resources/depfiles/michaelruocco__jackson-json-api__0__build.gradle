buildscript {
    configurations.classpath {
        resolutionStrategy {
            //this jgit version is required to fix this issue:
            //https://github.com/diffplug/spotless/issues/587 with the spotless plugin
            force 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
        }
    }
}

plugins {
    id "java-library"
    id "java-test-fixtures"
    id "com.diffplug.spotless" version "5.8.2"
    id "com.github.ben-manes.versions" version "0.36.0"
    id "jacoco"
    id "org.sonarqube" version "3.0"
    id "maven-publish"
    id "com.jfrog.bintray" version "1.8.5"
    id "com.jfrog.artifactory" version "4.18.1"
    id "pl.allegro.tech.build.axion-release" version "1.12.1"
    id "nebula.lint" version "16.15.9"
}

group "com.github.michaelruocco"

scmVersion {
    versionCreator "versionWithBranch"
    tag {
        prefix = "jackson-json-api"
    }
}
project.version = scmVersion.version

repositories {
    mavenCentral()
}

ext {
    lombokVersion = "1.18.16"
    jacksonVersion = "2.11.3"

    junitVersion = "5.7.0"
}

gradleLint {
    rules = ['all-dependency']
    alwaysRun = false
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "org.apache.commons:commons-collections4:4.4"

    testRuntimeOnly "org.slf4j:slf4j-simple:1.7.30"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.assertj:assertj-core:3.18.1"
    testImplementation "nl.jqno.equalsverifier:equalsverifier:3.5"
    testImplementation "com.github.michaelruocco:file-loader:6.0.1"
    testImplementation "net.javacrumbs.json-unit:json-unit-assertj:2.21.0"
    testImplementation "org.mockito:mockito-core:3.6.28"

    testFixturesCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testFixturesAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testFixturesImplementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    testFixturesImplementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    testFixturesImplementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
}


tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "org.slf4j.simpleLogger.defaultLogLevel", "debug"
    testLogging {
        events "failed"
        exceptionFormat "full"
        showStandardStreams true
    }
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    sourceSets sourceSets.main
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
}

project.tasks["sonarqube"].dependsOn jacocoTestReport
sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "michaelruocco"
        property "sonar.projectKey", "michaelruocco_jackson-json-api"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/report.xml"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "https://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }

    developers {
        developer {
            id "mruoc"
            name "Michael Ruocco"
            email "michael.ruocco@hotmail.com"
        }
    }

    scm {
        url "https://github.com/michaelruocco/jackson-json-api"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            pom.withXml {
                def root = asNode()
                root.appendNode("description", "Library containing jackson module and classes to help building APIs that follow the json api spec in Java")
                root.appendNode("name", "jackson-json-api")
                root.appendNode("url", "https://github.com/michaelruocco/jackson-json-api")
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")
    publications = ["mavenPublication"]
    publish = true

    pkg {
        repo = "maven"
        name = "jackson-json-api"
        userOrg = "michaelruocco"
        licenses = ["mit"]
        vcsUrl = "https://github.com/michaelruocco/jackson-json-api.git"
        version {
            name = project.version
            desc = project.version
            released = new Date()
            gpg {
                sign = true
            }
            mavenCentralSync {
                sync = true
            }
        }
    }
}

artifactory {
    contextUrl = "http://oss.jfrog.org"
    publish {
        repository {
            repoKey = "oss-snapshot-local"
            username = System.getenv("BINTRAY_USER")
            password = System.getenv("BINTRAY_KEY")
        }
        defaults {
            publications("mavenPublication")
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repoKey = "jcenter"
    }
    clientConfig.info.setBuildNumber(System.getProperty("build.number"))
}

spotless {
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()

        replace 'Not enough space after if', 'if(', 'if ('
        replaceRegex 'Too much space after if', 'if +\\(', 'if ('

        replace 'Not enough space after for', 'for(', 'for ('
        replaceRegex 'Too much space after for', 'for +\\(', 'for ('

        replace 'Not enough space after while', 'while(', 'while ('
        replaceRegex 'Too much space after while', 'while +\\(', 'while ('
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}
