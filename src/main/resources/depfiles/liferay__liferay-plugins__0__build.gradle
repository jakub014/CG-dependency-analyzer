buildscript {
	if (System.properties["http.proxyHost"] == "squid.lax.liferay.com") {
		logger.lifecycle "Using proxy {}:{}.", System.properties["http.proxyHost"], System.properties["http.proxyPort"]

		ext {
			repositoryUrl = "http://repository.liferay.com/nexus/content/groups/public"
		}
	}
	else {
		ext {
			repositoryUrl = "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}

	repositories {
		maven {
			url repositoryUrl
		}
	}

	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.node", version: "2.0.0"
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.poshi.runner", version: "1.0.12"
	}
}

configure(subprojects.findAll {!it.childProjects}) {
	apply plugin: "com.liferay.poshi.runner"

	poshiRunner {
		baseDir = "test/functional"
		openCVVersion = "2.4.10-0.10"
		poshiProperties << _getTestProperties(project)
		poshiPropertiesFile = rootProject.file("${baseDir}/test.properties")
		version = "1.0.258"
	}

	repositories {
		maven {
			url repositoryUrl
		}
	}
}

private static Properties _expandProperties(Properties properties) {
	boolean propertyExpanded = true

	while (propertyExpanded) {
		propertyExpanded = false

		Set<String> propertyNames = properties.stringPropertyNames()

		for (String propertyName : propertyNames) {
			String propertyValue = properties.getProperty(propertyName)

			Map<String, String> replacements = new HashMap<>()

			propertyValue.eachMatch(/\$\{.+?\}/) {
				String group ->

				String name = group.replace('${', '')

				name = name.replace('}', '')

				if (propertyNames.contains(name) && (group != properties.getProperty(name))) {
					replacements.put group, properties.getProperty(name)

					propertyExpanded = true
				}
			}

			for (String group : replacements.keySet()) {
				propertyValue = propertyValue.replace(group, replacements.get(group))
			}

			properties.setProperty propertyName, propertyValue
		}
	}

	properties
}

private static Properties _getCustomProperties(String prefix, File dir) {
	Properties properties = new Properties()

	for (File propertiesFile in _getCustomPropertiesFiles(prefix, dir)) {
		properties << GUtil.loadProperties(propertiesFile)
	}

	properties
}

private static List<File> _getCustomPropertiesFiles(String prefix, File dir) {
	List<String> propertiesFileNames = ["${prefix}.properties"]

	if (System.env.HOSTNAME) {
		propertiesFileNames << "${prefix}.${System.env.HOSTNAME}.properties"
	}

	if (System.env.HOST) {
		propertiesFileNames << "${prefix}.${System.env.HOST}.properties"
	}

	if (System.env.COMPUTERNAME) {
		propertiesFileNames << "${prefix}.${System.env.COMPUTERNAME}.properties"
	}

	if (System.env.USER) {
		propertiesFileNames << "${prefix}.${System.env.USER}.properties"
	}

	List<File> propertiesFiles = new ArrayList<>()

	for (String propertiesFileName in propertiesFileNames) {
		File propertiesFile = new File(dir, propertiesFileName)

		if (propertiesFile.exists()) {
			propertiesFiles.add(propertiesFile)
		}
	}

	propertiesFiles
}

private static Properties _getTestProperties(Project project) {
	Properties properties = new Properties()

	properties << _getCustomProperties("test", project.rootProject.projectDir)

	if (project != project.rootProject) {
		properties << _getCustomProperties("test", new File(project.projectDir, "test/functional"))
	}

	_expandProperties properties
}