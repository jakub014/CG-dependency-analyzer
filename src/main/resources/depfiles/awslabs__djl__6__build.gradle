plugins {
    id 'application'
}

dependencies {
    implementation "commons-cli:commons-cli:${commons_cli_version}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_slf4j_version}"
    implementation project(":basicdataset")
    implementation project(":model-zoo")

    if (System.getProperty("ai.djl.default_engine") == "PyTorch") {
        runtimeOnly project(":pytorch:pytorch-model-zoo")
        runtimeOnly "ai.djl.pytorch:pytorch-native-auto:${pytorch_version}"
    } else if (System.getProperty("ai.djl.default_engine") == "TensorFlow") {
        // javacpp bug fix https://github.com/bytedeco/javacpp/commit/7f27899578dfa18e22738a3dd49701e1806b464a
        runtimeOnly "org.bytedeco:javacpp:1.5.6-SNAPSHOT"
        runtimeOnly (project(":tensorflow:tensorflow-model-zoo")) {
            exclude group: "org.bytedeco", module: "javacpp"
        }
        runtimeOnly "ai.djl.tensorflow:tensorflow-native-auto:${tensorflow_version}"
    } else {
        runtimeOnly project(":mxnet:mxnet-model-zoo")
        runtimeOnly "ai.djl.mxnet:mxnet-native-auto:${mxnet_version}"
    }

    // DLR, tflite, PaddlePaddle and OnnxRuntime are only used for benchmark
    if (System.getProperty("ai.djl.default_engine") == "DLR") {
        runtimeOnly project(":dlr:dlr-engine")
        runtimeOnly "ai.djl.dlr:dlr-native-auto:${dlr_version}"
    } else if (System.getProperty("ai.djl.default_engine") == "TFLite") {
        runtimeOnly project(":tflite:tflite-engine")
        runtimeOnly "ai.djl.tflite:tflite:tflite-native:${tflite_version}"
    } else if (System.getProperty("ai.djl.default_engine") == "PaddlePaddle") {
        runtimeOnly project(":paddlepaddle:paddlepaddle-model-zoo")
        runtimeOnly "ai.djl.paddlepaddle:paddlepaddle-native-auto:${paddlepaddle_version}"
    } else if (System.getProperty("ai.djl.default_engine") == "OnnxRuntime") {
        // onnxruntime requires user install libgomp.so.1 manually, exclude from default dependency
        runtimeOnly project(":onnxruntime:onnxruntime-engine")
    }

    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
}

application {
    mainClassName = System.getProperty("main", "ai.djl.examples.inference.ObjectDetection")
}

run {
    environment("TF_CPP_MIN_LOG_LEVEL", "1") // turn off TensorFlow print out
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
}

task listmodels(type: JavaExec) {
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
    classpath = sourceSets.main.runtimeClasspath
    main = "ai.djl.examples.inference.ListModels"
}

task benchmark(type: JavaExec) {
    environment("TF_CPP_MIN_LOG_LEVEL", "1") // turn off TensorFlow print out
    List<String> arguments = gradle.startParameter["taskRequests"]["args"].getAt(0)
    for (String argument : arguments) {
        if (argument.trim().startsWith("--args")) {
            String[] line = argument.split("=", 2)
            if (line.length == 2) {
                line = line[1].split(" ");
                if (line.contains("-t")) {
                    if (System.properties["ai.djl.default_engine"] == "PyTorch") {
                        System.setProperty("ai.djl.pytorch.num_interop_threads", "1")
                        System.setProperty("ai.djl.pytorch.num_threads", "1")
                    } else if (System.properties["ai.djl.default_engine"] == "TensorFlow") {
                        environment("OMP_NUM_THREADS", "1")
                        environment("TF_NUM_INTRAOP_THREADS", "1")
                    } else {
                        environment("MXNET_ENGINE_TYPE", "NaiveEngine")
                        environment("OMP_NUM_THREADS", "1")
                    }
                }
                break;
            }
        }
    }

    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
    classpath = sourceSets.main.runtimeClasspath
    // restrict the jvm heap size for better monitoring benchmark
    jvmArgs = ["-Xmx2g"]
    if (Boolean.getBoolean("loggc")) {
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            jvmArgs += ["-XX:+PrintGCTimeStamps", "-Xloggc:build/gc.log"]
        } else {
            jvmArgs += ["-Xlog:gc*=debug:file=build/gc.log"]
        }
    }
    main = "ai.djl.examples.inference.benchmark.Benchmark"
}
tasks.distTar.enabled = false
