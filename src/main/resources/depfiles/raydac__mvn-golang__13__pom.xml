<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.igormaznitsa</groupId>
    <artifactId>mvn-golang-examples</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>mvn-golang-example-helloworld</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>mvn-golang</packaging>

  <name>Hello World example</name>
  <description>Example of minimalistic usage of mvn-golang-wrapper to build a 'Hello World' example.</description>

  <build>
    <sourceDirectory>${basedir}${file.separator}src</sourceDirectory>
    <directory>${basedir}${file.separator}bin</directory>

    <plugins>
      <plugin>
        <artifactId>exec-maven-plugin</artifactId>
        <groupId>org.codehaus.mojo</groupId>
        <version>1.6.0</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>bash</executable>
              <arguments>
                <arg>-c</arg>
                <arg>echo build.date.stamp=`date +%Y%m%d.%H%M%S`</arg>
              </arguments>
              <outputFile>${project.build.directory}/timestamp.properties</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
            <configuration>
              <files>
                <file>${project.build.directory}/timestamp.properties</file>
              </files>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.igormaznitsa</groupId>
        <artifactId>mvn-golang-wrapper</artifactId>
        <version>${main-project-version}</version>
        <extensions>true</extensions>
        <configuration>
          <env>
            <GO111MODULE>auto</GO111MODULE>
          </env>
          <goVersion>${go.sdk.version}</goVersion>
        </configuration>
        <executions>
          <execution>
            <id>default-build</id>
            <configuration>
              <ldFlags>
                <flag>-X</flag>
                <flag>"main.Buildstamp=${build.date.stamp}"</flag>
                <flag>-X</flag>
                <flag>"main.svnRevision=22543"</flag>
              </ldFlags>
            </configuration>
          </execution>
          <execution>
            <id>default-test</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>go-vet</id>
            <phase>test-compile</phase>
            <goals>
              <goal>vet</goal>
            </goals>
            <configuration>
              <ignoreErrorExitCode>true</ignoreErrorExitCode>
              <outLogFile>vet.out.log</outLogFile>
              <errLogFile>vet.err.log</errLogFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>check-vet-out-log-size</id>
            <phase>test-compile</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireFilesSize>
                  <maxsize>0</maxsize>
                  <minsize>0</minsize>
                  <files>
                    <file>${project.build.directory}${file.separator}reports${file.separator}vet.out.log</file>
                  </files>
                </requireFilesSize>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
          <execution>
            <id>check-vet-err-log-size</id>
            <phase>test-compile</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireFilesSize>
                  <minsize>100</minsize>
                  <maxsize>200</maxsize>
                  <files>
                    <file>${project.build.directory}${file.separator}reports${file.separator}vet.err.log</file>
                  </files>
                </requireFilesSize>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>

  </build>

</project>
