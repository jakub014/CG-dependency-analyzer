buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

ext {
    encoding = "UTF-8"

    javaVersion = '1.8' //11
    junitVersion = '4.12'
    typesafeConfigVersion = '1.3.0'
    //
    scalaVersion = rootProject.hasProperty("scala-version") ? rootProject.property("scala-version") : '2.12.6'
    baseScalaVersion = scalaVersion.split("\\.")[0] + '.' + scalaVersion.split("\\.")[1]
    scalaTestVersion = '3.0.5'
    scalaCheckVersion = '1.13.5'
    slf4jVersion = '1.7.21'
    akkaVersion = '2.5.31'
    akkaHttpVersion = '10.2.0'
    metricsVersion = '3.1.2'
    //
    avroVersion = '1.8.2' // avro version provides also org.codehouse.jackson transitively
    jacksonVersion = '2.6.7' // com.fasterxml.jackson - spark 2.x uses 2.6.5 while the newer kafka 2.9.1, as usually testing with embedded instances has conflicts
    zkClientVersion = '0.11' // zkclient provides zookeeper server transitively
    //


}

allprojects {

    version = rootProject.version

    task compile {}

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://packages.confluent.io/maven/" }
        maven { url "https://jitpack.io" }
    }

    plugins.withType(MavenPlugin).whenPluginAdded {

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        artifacts {
            archives javadocJar, sourcesJar
        }

        if (rootProject.hasProperty("maven-central")) {

            signing {
                sign configurations.archives
            }

            uploadArchives {
                repositories {

                    mavenDeployer {

                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }

                        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }

                        if (plugins.hasPlugin(ScalaPlugin)) {
                            pom.artifactId = project.name + "_scala-" + baseScalaVersion
                        }

                        pom.project {

                            name 'Affinity Library'
                            packaging 'jar'
                            // optionally artifactId can be defined here
                            description 'Library for building fast, scalable, fault-tolerant Data APIs based on Akka, ZooKeeper and Kafka.'
                            url 'https://github.com/amient/affinity'

                            scm {
                                connection 'scm:git:https://github.com/amient/affinity.git'
                                developerConnection 'scm:git:https://github.com/amient/affinity.git'
                                url 'https://github.com/amient/affinity.git'
                            }

                            licenses {
                                license {
                                    name 'The Apache License, Version 2.0'
                                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }

                            developers {
                                developer {
                                    id 'michal.haris'
                                    name 'Michal Haris'
                                    email 'mharis@amient.io'
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    plugins.withType(JavaPlugin).whenPluginAdded {

        sourceCompatibility = rootProject.ext.javaVersion

        compileJava.options.encoding = 'UTF-8'

        libsDirName = 'lib' //gradle's default is libs but CreateStartScripts needs this to be lib

        compile.dependsOn compileJava
        compile.dependsOn compileTestJava

        configurations {
            provided
            testCompile.extendsFrom provided
            all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }

        sourceSets {
            main.compileClasspath += configurations.provided
            test {
                compileClasspath += configurations.provided
                runtimeClasspath += configurations.provided
            }
        }

        dependencies {
            compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
            testCompile group: 'junit', name: 'junit', version: junitVersion
            testCompile group: "ch.qos.logback", name: "logback-classic", version: "1.2.3"
            testCompile group: "ch.qos.logback", name: "logback-core", version: "1.2.3"
        }

    }

    plugins.withType(ScalaPlugin).whenPluginAdded {

        compile.dependsOn compileScala
        compile.dependsOn compileTestScala

        task scalaTest(dependsOn: ['testClasses'], type: JavaExec) {
            main = 'org.scalatest.tools.Runner'
            args = ['-R', "${project.buildDir}/classes/scala/test", '-o', '-u', "${project.buildDir}/test-results"]
            classpath = sourceSets.test.runtimeClasspath
            inputs.files(sourceSets.test.compileClasspath)
            outputs.dir(file("${project.buildDir}/test-results"))
        }
        test.dependsOn scalaTest

        dependencies {
            compile group: 'org.scala-lang', name: 'scala-library', version: rootProject.scalaVersion
            testCompile group: 'org.scalatest', name: 'scalatest_' + rootProject.baseScalaVersion, version: rootProject.scalaTestVersion
            testCompile group: 'org.scalacheck', name: 'scalacheck_' + rootProject.baseScalaVersion, version: rootProject.scalaCheckVersion
        }
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.additionalParameters = [
                                                   "-feature",
                                                    "-target:jvm-1.8",
                                                    "-encoding", "UTF-8",
                                                    "-unchecked",
                                                    "-deprecation",
                                                    "-Ywarn-dead-code",
                                                    "-Ywarn-numeric-widen",
                                                    "-Ywarn-unused"
                                                    ]
    }
}
