/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "org.sonarqube" version "2.7"
    id 'ch.netzwerg.release' version '1.2.5'
    id 'org.ajoberstar.git-publish' version '3.0.0-rc.1'
    id "de.marcphilipp.nexus-publish" version "0.4.0"
    id 'io.codearte.nexus-staging' version '0.21.1'
    id 'signing'
}

def artifactVersion = rootProject.file('version.txt').text.trim()



def getPropertyValue(key, defaultValue = null) {
    def value = project.hasProperty(key) ? project[key] : System.getenv(key)
    return value == null || value.trim() == '' ? defaultValue : value.trim()
}

def ossrhUsername = getPropertyValue('ossrhUsername');
def ossrhPassword = getPropertyValue('ossrhPassword');

def signingSecretKeyRingFile = getPropertyValue('signingSecretKeyRingFile')
def signingKeyId = getPropertyValue('signingKeyId')
def signingPassword = getPropertyValue('signingPassword')

def githubToken = getPropertyValue('GITHUB_TOKEN')
def repoPath = getPropertyValue('TRAVIS_REPO_SLUG', 'nemtech/symbol-openapi-generator')

allprojects {
    ext."signing.keyId" = signingKeyId
    ext."signing.secretKeyRingFile" = signingSecretKeyRingFile
    ext."signing.password" = signingPassword
}

apply plugin: 'java'

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: "de.marcphilipp.nexus-publish"

    group 'io.nem'
    sourceCompatibility = 1.8

    javadoc {
        failOnError = false
    }

    signing {
        required { signingKeyId }
        sign publishing.publications
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    dependencies {
        compile 'javax.annotation:javax.annotation-api:1.3.2'
        compile 'org.openapitools:jackson-databind-nullable:0.2.1'

    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    packaging = 'jar'
                    url = "https://github.com/${repoPath}"
                    name = "${project.name}"
                    description = "${project.name} Generated Open API client for symbol-sdk-java"
                    scm {
                        connection = "scm:git:https://github.com/${repoPath}.git"
                        developerConnection = "scm:svn:https://github.com/${repoPath}"
                        url = "https://github.com/${repoPath}"
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'fullcircle23'
                            name = 'Ravi Shanker'
                        }
                        developer {
                            id = 'rg911'
                            name = 'Steven Liu'
                        }
                        developer {
                            id = 'fboucquez'
                            name = 'Fernando Boucquez'
                        }
                    }
                }
            }
        }
        nexusPublishing {
            repositories {
                sonatype {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
            connectTimeout = Duration.ofSeconds(360)
            clientTimeout = Duration.ofSeconds(360)
        }
    }

    gitPublish {
        if (githubToken) {
            repoUri = "https://github.com/${repoPath}.git".toString()
        } else {
            repoUri = "git@github.com:${repoPath}.git".toString()
        }
        branch = 'gh-pages'
        preserve { include '**/*' }
        commitMessage = "Publishing ${project.name} Generated Client Javadocs for version ${artifactVersion}".toString()
        contents {
            from(file("$buildDir/docs/javadoc")) {
                into "${project.name}/javadoc/${artifactVersion}".toString()
            }
        }
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}

release {
    push = false
}

nexusStaging {
    packageGroup = "io.nem"
    stagingProfileId = "365f7aa90b3b13"
    username = ossrhUsername
    password = ossrhPassword
    numberOfRetries = 40
    delayBetweenRetriesInMillis = 3000
}

release.dependsOn subprojects.install
