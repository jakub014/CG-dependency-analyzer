import org.gradle.api.artifacts.maven.MavenDeployment

plugins {
    id 'groovy'
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'io.codearte.nexus-staging' version '0.21.2'
}

group = 'com.cedarsoftware'
description = 'n-cube'
version = '4.13.0-SNAPSHOT'

// Example builds
//gradle clean build 
//gradle clean build publishToMavenLocal
//gradle clean build publish upload closeAndReleaseRepository -Pperform-release=true
//gradle clean build publish -x test --warning-mode all

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

test {
    maxHeapSize = '1G'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

jar {
    enabled = true
    manifest {
        attributes(
                'Implementation-Title'      : 'n-cube',
                'Implementation-Version'    : getArchiveVersion(),
                'Implementation-Vendor-Id'  : 'com.cedarsoftware',
                'Implementation-URL'        : 'https://github.com/jdereg/n-cube',
                'Built-By'                  : System.properties['user.name'],
                'Build-Timestamp'           : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By'                : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'                 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'                  : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'org.codehaus.groovy:groovy-all:2.4.21'
    api 'com.cedarsoftware:java-util:1.64.0'
    api 'com.cedarsoftware:json-io:4.12.0'
    api 'com.google.guava:guava:30.1-jre'
    api 'it.unimi.dsi:fastutil:8.4.4'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.2.7.RELEASE'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.2.7.RELEASE'
    implementation 'org.springframework:spring-aspects:5.2.8.RELEASE'
    implementation 'org.springframework:spring-web:5.2.8.RELEASE'
    implementation 'org.springframework:spring-jdbc:5.2.8.RELEASE'
    implementation 'org.springframework.security:spring-security-core:5.2.8.RELEASE'
    implementation 'com.cedarsoftware:json-command-servlet:1.9.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.ivy:ivy:2.5.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.4'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.hsqldb:hsqldb:2.5.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-web:2.2.7.RELEASE'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.2.7.RELEASE'
    testImplementation 'mysql:mysql-connector-java:8.0.22'
    testImplementation 'org.openjdk.jol:jol-core:0.14'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    from groovydoc
    archiveClassifier.set('javadoc')
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact sourcesJar
            artifact groovydocJar
            from components.java
        }
    }
}

signing {
    sign configurations.archives
    sign publishing.publications.maven
}

tasks.withType(Sign) {
    onlyIf { project.hasProperty("perform-release") }
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("perform-release"))
            {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            pom.project {
                name = 'n-cube'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'Multi-dimensional Rule Engine'
                url = 'https://github.com/jdereg/n-cube'

                scm {
                    connection = 'scm:git:git://github.com/jdereg/n-cube.git'
                    developerConnection = 'scm:git:git@github.com:jdereg/n-cube.git'
                    url = 'https://github.com/jdereg/n-cube'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'jdereg'
                        name = 'John DeRegnaucourt'
                        email = 'jdereg@gmail.com'
                    }
                }
            }
        }
    }
}