

buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
	}
}

plugins {
	id "com.jfrog.bintray" version "1.8.5"
	id "io.spring.dependency-management" version "1.0.6.RELEASE"
	// id "io.micronaut.library" version "1.0.0.RC13"
}





apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'idea'

group = 'com.bertramlabs.plugins'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
repositories {
	mavenCentral()
	jcenter()
}

ext {
	micronautVersion = '2.0.2'
}

configurations {
	provided
	doc.extendsFrom(runtime)
}

sourceSets {
	main {
		compileClasspath += configurations.provided
		groovy.srcDirs   += ['src/main/java']
		java.srcDirs      = []
	}
}

// micronaut {
//     version "2.0.2"
//     processing {
//     	incremental true
//     	annotations 'asset.pipeline.micronaut.*'
//     }
// }

dependencies {
	compileOnly(platform("io.micronaut:micronaut-bom:2.0.2"))
	api     project(':asset-pipeline-core')
	compileOnly "io.micronaut:micronaut-inject-groovy"
	annotationProcessor "io.micronaut:micronaut-inject-java:2.0.2"
    api "io.micronaut:micronaut-http-server-netty:2.0.2"
    api 'javax.annotation:javax.annotation-api:1.3.2'

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testImplementation("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude module:'groovy-all'
    }
    testImplementation "io.micronaut:http-client:${micronautVersion}"
    testImplementation "io.micronaut:inject-groovy:${micronautVersion}"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId 'asset-pipeline-micronaut'
			pom.withXml {
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name 'asset-pipeline-micronaut'
					description 'JVM Asset Pipeline Micronaut Adapter.'
					url 'https://github.com/bertramdev/asset-pipeline'
					scm {
						url 'https://github.com/bertramdev/asset-pipeline'
						connection 'scm:https://bertramdev@github.com/bertramdev/asset-pipeline.git'
						developerConnection 'scm:git://github.com/bertramdev/asset-pipeline.git'
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'davydotcom'
							name 'David Estes'
							email 'davydotcom@gmail.com'
						}
					}
				}
			}
			from components.java
			afterEvaluate {
				artifact sourcesJar
				artifact javadocJar
			}
		}
	}

	repositories {
		maven {
			credentials {
				username project.properties.get('artifactoryPublishUsername')
				password project.properties.get('artifactoryPublishPassword')
			}
			url 'https://repo.grails.org/grails/libs-snapshots-local/'
		}
	}
}

bintray {
	if(project.hasProperty('bintrayUser')) {
		user = bintrayUser
		key = bintrayKey
	}
	publications = ['maven']
    publish=true//true
	pkg {
		repo = 'asset-pipeline'
		userOrg = 'bertramlabs'
		name = 'asset-pipeline-micronaut'
		licenses = ['Apache-2.0']
		websiteUrl = 'https://github.com/bertramdev/asset-pipeline'
        issueTrackerUrl = 'https://github.com/bertramdev/asset-pipeline/issues'
        vcsUrl = 'https://github.com/bertramdev/asset-pipeline.git'
        version {
            if (project.hasProperty('mavenUser')) {
                mavenCentralSync {
                    sync = true//true //Optional (true by default). Determines whether to sync the version to Maven Central.
                    user = mavenUser //OSS user token
                    password = mavenPassword //OSS user password
                    close = '1'
                    //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task(console, dependsOn: 'classes', type: JavaExec) {
	main = 'groovy.ui.Console'
	classpath = sourceSets.main.runtimeClasspath
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}


bintrayUpload.dependsOn build, sourcesJar, javadocJar