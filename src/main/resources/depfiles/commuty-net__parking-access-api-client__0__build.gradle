import static java.lang.System.getenv

plugins {
    id "idea"
    id "java-library"
    id "maven"
    id "maven-publish"
    id "groovy"
    id "signing"
    id "org.sonarqube" version "$sonarqubeVersion"
    id "io.codearte.nexus-staging" version "$nexusVersion"
    id "com.github.ben-manes.versions" version "$outdatedVersion"
}

group "net.commuty"
version "2.2.2"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    mavenLocal()
}

compileJava {
    exclude "module-info.java"
    options.compilerArgs = ["--release", "8"]
}

task compileModuleInfoJava(type: JavaCompile) {
    classpath = files()
    source = "src/main/java/module-info.java"
    destinationDir = compileJava.destinationDir
    doFirst {
        options.compilerArgs = [
                "--release", "9",
                "--module-path", compileJava.classpath.asPath,
        ]
    }
}

compileModuleInfoJava.dependsOn compileJava
classes.dependsOn compileModuleInfoJava

jar {
    archiveBaseName = "parking-access-api-client"

    manifest {
        attributes "Implementation-Version": archiveVersion, "provider": gradle
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation (
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
            "org.slf4j:slf4j-api:$slf4jVersion"
    )

    testImplementation (
            "org.spockframework:spock-core:$spockVersion",
            "org.codehaus.groovy:groovy-all:$groovyVersion",
            "org.mock-server:mockserver-netty:$mockServerVersion",
            "ch.qos.logback:logback-classic:$logbackVersion"
    )
}

javadoc {
    exclude "module-info.java"
}

sonarqube {
    properties {
        property "sonar.host.url", getenv("SONARQUBE_URL")
        property "sonar.login", getenv("SONARQUBE_TOKEN")
        property "sonar.gitlab.commit_sha", getenv("CI_BUILD_REF")
        property "sonar.gitlab.ref_name", getenv("CI_BUILD_REF_NAME")
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.test.exclusions", "**/src/test/**/*,**/src/main/java/module-info.java"
        property "sonar.verbose", "false"
        property "sonar.projectKey", "nedap"
    }
}

if (project.hasProperty("release")) {
    def sonatypeUsername = hasProperty("ossrhUser") ? ossrhUser : System.getenv("ossrhUser")
    def sonatypePassword = hasProperty("ossrhPassword") ? ossrhPassword : System.getenv("ossrhPassword")

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name project.name
                    description project.description
                    packaging "jar"
                    url = "https://www.commuty.net"

                    licenses {
                        license {
                            name = "The MIT License (MIT)"
                            url = "http://opensource.org/licenses/MIT"
                        }
                    }
                    developers {
                        developer {
                            id = "commuty"
                            name = "Commuty SA"
                            email = "support@commuty.net"
                        }
                    }
                    scm {
                        connection "scm:git:https://github.com/commuty-net/parking-access-api-client"
                        developerConnection "scm:git:git@github.com:commuty-net/parking-access-api-client.git"
                        url "https://github.com/commuty-net/parking-access-api-client"
                    }
                }
            }
        }
    }

    signing {
        sign configurations.archives
    }

    javadoc {
        doFirst {
            options.addStringOption("Xdoclint:none", "-quiet")
        }
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption("html5", true)
        }
    }

    nexusStaging {
        username = sonatypeUsername
        password = sonatypePassword
        packageGroup = "net.commuty"
    }
}

