plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false
}

allprojects {
    group = 'com.ocadotechnology.newrelicalertsconfigurator'

    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'signing'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.encoding = 'UTF-8'
}

subprojects {
    repositories {
        mavenCentral()
    }

    dependencies {
        api 'org.slf4j:slf4j-api:1.7.30'

        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'

        testImplementation 'junit:junit:4.13'
        testImplementation 'com.google.guava:guava:29.0-jre'
        testImplementation 'org.mockito:mockito-core:3.4.6'
        testImplementation 'com.github.tomakehurst:wiremock:2.27.1'
        testImplementation 'org.assertj:assertj-core:3.16.1'
    }
}

configure(subprojects - project(':newrelic-alerts-configurator-examples')) {
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    if(project.hasProperty('release')) {
        signing {
            required { !version.endsWith("-SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }

        uploadArchives {
            doFirst {
                println "Uploading archive ${project.name} in version ${version}"
            }

            repositories {
                mavenDeployer {

                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name 'NewRelic Alerts Configurator'
                        packaging 'jar'
                        // optionally artifactId can be defined here
                        description 'NewRelic Alerts Configurator can be used to configure NewRelic alerts for your application. Instead of defining alerts through UI you can define them in code. It allows you to automatize alerts configuration, easily recover them in case of wipe out and have full history of changes in your version control system.'
                        url 'https://github.com/ocadotechnology/newrelic-alerts-configurator'

                        scm {
                            connection 'scm:git:git://github.com/ocadotechnology/newrelic-alerts-configurator.git'
                            developerConnection 'scm:git:git@github.com:ocadotechnology/newrelic-alerts-configurator.git'
                            url 'https://github.com/ocadotechnology/newrelic-alerts-configurator'
                        }

                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        organization {
                            name 'Ocado Technology'
                            url 'http://www.ocadotechnology.com/'
                        }
                        developers {
                            developer {
                                id 'panda.team'
                                name 'Panda Team'
                                email 'panda.team@ocado.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

project(':newrelic-api-client') {
    dependencies {
        api 'commons-io:commons-io:2.7'
        api 'org.apache.commons:commons-lang3:3.11'
        api 'org.glassfish.jersey.core:jersey-client:2.24.1'
        api 'org.glassfish.jersey.media:jersey-media-json-jackson:2.24.1'
        api 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
        api 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.11.1'
        api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1'
    }
}

project(':newrelic-alerts-configurator') {
    dependencies {
        api project(':newrelic-api-client')
    }
}

project(':newrelic-alerts-configurator-examples') {
    apply plugin: 'kotlin'
    
    dependencies {
        api project(':newrelic-alerts-configurator')
        api project(':newrelic-alerts-configurator-dsl')
    }
}

project(':newrelic-alerts-configurator-dsl') {
    apply plugin: 'kotlin'

    dependencies {
        api project(':newrelic-alerts-configurator')
        api 'org.jetbrains.kotlin:kotlin-stdlib'
    }
}
