plugins {
    id 'java-gradle-plugin'
    id "com.gradle.plugin-publish" version "0.12.0"
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.4.2"
}

repositories {
    jcenter()
}

group 'org.scoverage'
description = 'gradle-scoverage is a Gradle plugin for calculating code coverage using Scoverage'
if (project.version == 'unspecified') {
    version = '3.0.0-SNAPSHOT'
}
ext {
    website = 'http://scoverage.org'
    vcsUrl = 'https://github.com/scoverage/gradle-scoverage.git'
    scmUrl = "scm:git:$vcsUrl"
    sonatypeUser = System.env.SONATYPE_USER
    sonatypePass = System.env.SONATYPE_PASS
}

gradlePlugin {
    plugins {
        gradleScoverage {
            id = 'org.scoverage'
            implementationClass = 'org.scoverage.ScoveragePlugin'
            displayName = 'Gradle Scoverage plugin'
        }
    }
}

pluginBundle {
    website = project.website
    vcsUrl = ext.vcsUrl
    description = project.description
    tags = ['coverage', 'scala', 'scoverage']
}

apply plugin: 'maven'
apply plugin: 'groovy'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'


dependencies {
    compileOnly "org.scoverage:scalac-scoverage-plugin_2.13:1.4.2"
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.5.2'

    testImplementation 'org.hamcrest:hamcrest-library:1.3'
}

sourceSets {
    functionalTest {
        java.srcDir file('src/functionalTest/java')
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    crossScalaVersionTest {
        java.srcDir file('src/crossScalaVersionTest/java')
        compileClasspath += sourceSets.main.output + sourceSets.functionalTest.output
        runtimeClasspath += sourceSets.main.output + sourceSets.functionalTest.output
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom testRuntimeOnly

    crossScalaVersionTestImplementation.extendsFrom testImplementation
    crossScalaVersionTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task crossScalaVersionTest(type: Test) {
    description = 'Runs the cross scala version functional test.'
    group = 'verification'
    testClassesDirs = sourceSets.crossScalaVersionTest.output
    classpath = sourceSets.crossScalaVersionTest.runtimeClasspath
    forkEvery = 1 // crucial to run every test in its own JVM

    testLogging.showStandardStreams = true

    mustRunAfter test
}
check.dependsOn crossScalaVersionTest

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output
    classpath = sourceSets.functionalTest.runtimeClasspath

    testLogging.showStandardStreams = true

    mustRunAfter crossScalaVersionTest
}
check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest, sourceSets.crossScalaVersionTest
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from "$buildDir/docs/groovydoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives groovydocJar
    archives sourcesJar
}

if (project.properties.containsKey('signing.keyId')) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.properties.containsKey('signing.keyId')) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: sonatypeUser, password: sonatypePass)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUser, password: sonatypePass)
            }

            pom.project {
                name 'GradleScoverage'
                description project.description
                url project.website

                scm {
                    url scmUrl
                    developerConnection scmUrl
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'maiflai'
                    }
                    developer {
                        id 'ubourdon'
                    }
                    developer {
                        id 'D-Roch'
                    }
                    developer {
                        id 'eyalroth'
                    }
                }
            }
        }
    }
}

// see https://stackoverflow.com/questions/44679007
task fixIdeaPluginClasspath {
    doFirst {
        configure(tasks.pluginUnderTestMetadata) {
            def ideaClassesPath = project.buildDir.toPath().resolveSibling("out").resolve("production")
            def newClasspath = pluginClasspath as List
            newClasspath.add(0, ideaClassesPath)
            pluginClasspath.setFrom(newClasspath)
        }
    }
}
pluginUnderTestMetadata.mustRunAfter(fixIdeaPluginClasspath)

idea.project.settings {
    taskTriggers {
        beforeBuild fixIdeaPluginClasspath, pluginUnderTestMetadata
    }
}