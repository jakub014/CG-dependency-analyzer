import java.text.SimpleDateFormat

plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    google()
}

apply from: "ext.gradle"

group rootProject.ext.groupId
version rootProject.ext.version

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.warnings = false
    options.deprecation = true
    options.compilerArgs += ["-parameters"]
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

jar {
    afterEvaluate {
        manifest {
            attributes 'Implementation-Version': archiveVersion
            attributes 'Built-Gradle': gradle.gradleVersion
            attributes 'Bundle-DocURL': 'https://github.com/yhyzgn/'
            attributes 'Build-OS': System.getProperty("os.name")
            attributes 'Built-By': System.getProperty("user.name")
            attributes 'Build-Jdk': System.getProperty("java.version")
            attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
        }
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'

    api 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    api 'com.fasterxml.jackson.core:jackson-core:2.12.3'
    api 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    api 'com.google.code.gson:gson:2.8.6'
    api 'com.google.guava:guava:29.0-jre'
    compileOnly 'org.slf4j:slf4j-api:2.0.0-alpha1'
    compileOnly 'org.jetbrains:annotations:19.0.0'
    testImplementation 'org.slf4j:slf4j-simple:2.0.0-alpha1'
}

task replaceVersion() {
    ant.replaceregexp(
            file: "./src/main/java/com/yhy/http/pigeon/utils/Utils.java",
            match: "public final static String VERSION = \"(.+)\"",
            replace: "public final static String VERSION = \"${rootProject.ext.version}\"",
            flags: 'g',
            byline: "true"
    )
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

javadoc {
    afterEvaluate {
        configure(options) {
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version true
            failOnError false
            links "http://docs.oracle.com/javase/8/docs/api"
        }
    }
}

compileJava.dependsOn replaceVersion

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.ext.groupId
            artifactId = rootProject.ext.artifactId
            version = rootProject.ext.version
            from components.java

            pom {
                name = rootProject.ext.artifactId
                description = rootProject.ext.description
                url = "https://${rootProject.ext.url}"
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                        comments = 'A business-friendly OSS license'
                    }
                }
                developers {
                    developer {
                        name = 'yhyzgn'
                        email = 'yhyzgn@gmail.com'
                        url = "https://github.com/yhyzgn/"
                    }
                }
                scm {
                    url = "https://${rootProject.ext.url}.git"
                    connection = "scm:git:https://${rootProject.ext.url}.git"
                    developerConnection = "scm:git:https://${rootProject.ext.url}.git"
                }
            }
        }
    }

    repositories {
        maven {
            name "oss"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}