import io.franzbecker.gradle.lombok.task.DelombokTask

plugins {
  id 'java-library'
  id 'jacoco'
  id 'maven-publish'
  id 'signing'
  id 'de.undercouch.download' version '4.1.1'
  id 'io.franzbecker.gradle-lombok' version '4.0.0'
  id 'org.jetbrains.gradle.plugin.idea-ext' version '0.7'
}

group 'com.jshobe.secrethub'
version '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  main {
    resources {
      output.dir "$buildDir/native", builtBy: 'extractNativeLibraries'
    }
  }
}

repositories {
  jcenter()
}

dependencies {
  implementation 'net.java.dev.jna:jna:5.6.0'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
  testImplementation 'org.mockito:mockito-junit-jupiter:3.7.7'
  testImplementation 'org.hamcrest:hamcrest-library:2.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
  environment "TEST_KEY", "secrethub://jasonshobe/secrethub-java/test"
  useJUnitPlatform {
    if (!project.hasProperty("includeIntegrationTests")) {
      excludeTags 'integration'
    }
  }
  jacoco {
    excludes = [
        'com.jshobe.secrethub.SecretHubLibrary.Client',
        'com.jshobe.secrethub.SecretHubLibrary.Secret',
        'com.jshobe.secrethub.SecretHubLibrary.SecretVersion',
        'com.jshobe.secrethub.SecretHubLibrary.SecretVersion.ByValue'
    ]
  }
  finalizedBy jacocoTestReport
}

lombok {
  version = '1.18.16'
}

java {
  withJavadocJar()
  withSourcesJar()
}

jacocoTestReport {
  dependsOn test

  afterEvaluate {
    getClassDirectories().setFrom(classDirectories.files.collect {
      fileTree(dir: it, exclude: ['**/com/jshobe/secrethub/SecretHubLibrary$*.class'])
    })
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = 'CLASS'
      excludes = [
          'com.jshobe.secrethub.SecretHubLibrary.*'
      ]
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.9
      }
    }
  }
}

if (project.hasProperty('verifyCoverage')) {
  check.dependsOn jacocoTestCoverageVerification
}

idea {
  project {
    jdkName = '1.8'
    languageLevel = '1.8'
    settings {
      delegateActions {
        delegateBuildRunToGradle = true
        testRunner = org.jetbrains.gradle.ext.ActionDelegationConfig.TestRunner.PLATFORM
      }
      copyright {
        useDefault = 'Apache'
        profiles {
          Apache {
            notice = '''\
Copyright $today.year Jason Shobe

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.'''
          }
        }
      }
    }
  }
}

task downloadNativeLibraries(type: Download) {
  src([
      'https://files.pythonhosted.org/packages/40/80/1422a3d8c79309d952dcf61af4f50fcf67e4bfe22c71dcc4e06ee684ace9/secrethub-0.1.1-cp36-cp36m-macosx_10_14_x86_64.whl',
      'https://files.pythonhosted.org/packages/43/8a/41e419be57678472131b528ecc0db420ca30f30b8e8073bfb1f4c8a5b846/secrethub-0.1.1-cp36-cp36m-manylinux2014_x86_64.whl',
      'https://files.pythonhosted.org/packages/e9/37/57a04ba72bf96a395df1b4e3e8f333a6069261f2d9df8d1632a1f759f334/secrethub-0.1.1-cp36-cp36m-win32.whl',
      'https://files.pythonhosted.org/packages/c0/85/0fdc7e4a7f2f4f4a658a9005b0c6702cf16120e2f0f0cd445f0fb14a01be/secrethub-0.1.1-cp36-cp36m-win_amd64.whl'
  ])
  dest "$buildDir/downloads"
  onlyIfModified true
}

task extractMacNativeLibrary(type: Copy) {
  dependsOn downloadNativeLibraries
  from zipTree("$buildDir/downloads/secrethub-0.1.1-cp36-cp36m-macosx_10_14_x86_64.whl").matching {
    include 'secrethub/.dylibs/Client.dylib'
  }
  eachFile {
    path = name
  }
  into "$buildDir/native/darwin"
  rename 'Client\\.dylib', 'secrethub.dylib'
  includeEmptyDirs = false
}

task extractLinuxNativeLibrary(type: Copy) {
  dependsOn downloadNativeLibraries
  from zipTree("$buildDir/downloads/secrethub-0.1.1-cp36-cp36m-manylinux2014_x86_64.whl").matching {
    include 'secrethub.libs/Client-*.so'
  }
  eachFile {
    path = name
  }
  into "$buildDir/native/linux-x86-64"
  rename 'Client-.+\\.so', 'libsecrethub.so'
  includeEmptyDirs = false
}

task extractWin32NativeLibrary(type: Copy) {
  dependsOn downloadNativeLibraries
  from zipTree("$buildDir/downloads/secrethub-0.1.1-cp36-cp36m-win32.whl").matching {
    include 'secrethub/CLIENT-*.dll'
  }
  eachFile {
    path = name
  }
  into "$buildDir/native/win32-x86"
  rename 'CLIENT-.+\\.dll', 'secrethub.dll'
  includeEmptyDirs = false
}

task extractWin64NativeLibrary(type: Copy) {
  dependsOn downloadNativeLibraries
  from zipTree("$buildDir/downloads/secrethub-0.1.1-cp36-cp36m-win_amd64.whl").matching {
    include 'secrethub/CLIENT-*.dll'
  }
  eachFile {
    path = name
  }
  into "$buildDir/native/win32-x86-64"
  rename 'CLIENT-.+\\.dll', 'secrethub.dll'
  includeEmptyDirs = false
}

task extractNativeLibraries {
  dependsOn extractMacNativeLibrary, extractLinuxNativeLibrary, extractWin32NativeLibrary, extractWin64NativeLibrary
}

task delombok(type: DelombokTask) {
  dependsOn compileJava
  ext.outputDir = file("$buildDir/delombok")
  outputs.dir outputDir
  sourceSets.main.java.srcDirs.each {
    inputs.dir(it)
    args(it, '-d', outputDir)
  }
  doFirst {
    outputDir.deleteDir()
  }
}

javadoc {
  dependsOn delombok
  source = delombok.outputDir
  failOnError = false
  title = 'SecretHub Java Client API'
  options {
    links 'https://docs.oracle.com/javase/8/docs/api/', 'http://java-native-access.github.io/jna/5.6.0/javadoc/'
    windowTitle = 'SecretHub Java Client API'
    overview = 'src/main/docs/overview.html'
    stylesheetFile = file('src/main/docs/stylesheet.css')
    header = """<b>SecretHub Java Client API</b> <font size="-1">${project.version}</font>"""
    bottom "<center>Copyright &copy; ${new Date().format('YYYY')} Jason Shobe </center>"
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
        pom {
          name = 'SecretHub Client for Java'
          description = 'A library that provides a Java client for the SecretHub Secrets Management API.'
          url = 'https://github.com/jasonshobe/secrethub-java'
          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
          developers {
            developer {
              id = 'jasonshobe'
              name = 'Jason Shobe'
              email = 'jason.shobe@gmail.com'
            }
          }
          scm {
            connection = 'scm:git:https://github.com/jasonshobe/secrethub-java.git'
            developerConnection = 'scm:git:https://github.com/jasonshobe/secrethub-java.git'
            url = 'https://github.com/jasonshobe/secrethub-java'
          }
        }
      }
    }
  }
  repositories {
    maven {
      credentials {
        username project.hasProperty('mavenUsername') ? project.property('mavenUsername') : System.getenv('MAVEN_USERNAME')
        password project.hasProperty('mavenPassword') ? project.property('mavenPassword') : System.getenv('MAVEN_PASSWORD')
      }

      def snapshotsUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
      def releasesUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      url = project.version.endsWith('-SNAPSHOT') ? snapshotsUrl : releasesUrl
    }
  }
}

signing {
  def signingKeyId = findProperty('signingKeyId')
  def signingKey = findProperty('signingKey')
  def signingPassword = findProperty('signingPassword')
  println signingKey
  useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
  sign publishing.publications.mavenJava
}
