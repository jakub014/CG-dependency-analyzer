buildscript {
	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/plugins-release' }
	}

	ext.springBootVersion = "2.4.3"
	ext.springCloudVersion = "2020.0.1"
	ext.springCloudConnectorsVersion = "2.0.7.RELEASE"
	ext.springCloudStarterNetflixVersion = "3.0.1"
	ext.springCloudStarterNetflixHystrixVersion = "2.2.7.RELEASE"

	dependencies {
		classpath("io.spring.gradle:propdeps-plugin:0.0.10.RELEASE")
		classpath("io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE")
		classpath("io.spring.gradle:spring-io-plugin:0.0.8.RELEASE")
	}
}

allprojects {
	group = "io.pivotal.spring.cloud"

	apply plugin: "propdeps"
	apply plugin: "propdeps-eclipse"
	apply plugin: "propdeps-idea"
	apply plugin: "java"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "io.spring.dependency-management"

	dependencyManagement {
		imports {
			mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}

	if (project.hasProperty('platformVersion')) {
		apply plugin: 'spring-io'

		// necessary to resolve the Spring IO versions (which may include snapshots)
		repositories {
			maven { url "https://repo.spring.io/libs-snapshot" }
		}

		dependencyManagement {
			springIoTestRuntime {
				imports {
					mavenBom "io.spring.platform:platform-bom:${platformVersion}"
				}
			}
		}
	}

	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/libs-release" }
	}

	dependencies {
		testCompile("org.springframework.boot:spring-boot-starter-test")
	}

	compileJava {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}
	compileTestJava {
		sourceCompatibility=1.8
		targetCompatibility=1.8
	}

	ext.javadocLinks = [
			'https://docs.oracle.com/javase/8/docs/api/',
			'https://docs.oracle.com/javaee/7/api/',
			'https://docs.spring.io/spring/docs/current/javadoc-api/',
	] as String[]
}

subprojects {
	apply from: "${rootProject.projectDir}/publish-maven.gradle"

	task allDependencies(type: DependencyReportTask)

	jar {
		manifest.attributes["Created-By"] =
				"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = project.name
		manifest.attributes["Implementation-Version"] = project.version

		from("${rootProject.projectDir}/src/dist") {
			include "license.txt"
			include "notice.txt"
			into "META-INF"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}
	}

	javadoc {
		description = "Generates project-level javadoc for use in -javadoc jar"

		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		options.links(project.ext.javadocLinks)
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	java {
		withJavadocJar()
		withSourcesJar()
		registerFeature('optional') {
			usingSourceSet(sourceSets.main)
		}
	}
}

project(":spring-cloud-services-connector-core") {
	description = "Spring Cloud Services Connector Core"
	dependencies {
		compile("org.springframework:spring-core")
		compile("org.springframework.cloud:spring-cloud-connectors-core:${springCloudConnectorsVersion}")
		testImplementation("org.junit.vintage:junit-vintage-engine") {
			exclude group: "org.hamcrest", module: "hamcrest-core"
		}
	}
}

project(":spring-cloud-services-cloudfoundry-connector") {
	description = "Spring Cloud Services Cloud Foundry Connector"
	dependencies {
		compile(project(":spring-cloud-services-connector-core"))
		compile("org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudConnectorsVersion}")
		testCompile(group: "org.springframework.cloud", name: "spring-cloud-cloudfoundry-connector", classifier: "tests")
		testCompile("com.fasterxml.jackson.core:jackson-databind")
		testImplementation("org.junit.vintage:junit-vintage-engine") {
			exclude group: "org.hamcrest", module: "hamcrest-core"
		}
	}
}

project(":spring-cloud-services-spring-connector") {
	description = "Spring Cloud Services Spring Connector"

	// see https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor
	compileJava.dependsOn(processResources)

	dependencies {
		compile "org.springframework.cloud:spring-cloud-starter-bootstrap"
		compile(project(":spring-cloud-services-connector-core"))
		compile("org.springframework.cloud:spring-cloud-spring-service-connector:${springCloudConnectorsVersion}")
		annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
		annotationProcessor("org.springframework.boot:spring-boot-autoconfigure-processor")
		optionalApi("org.springframework.cloud:spring-cloud-config-client")
		optionalApi("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        optionalApi("org.springframework.security:spring-security-oauth2-client")
		testCompile("org.apache.tomcat.embed:tomcat-embed-el")
		testCompile(group: "org.springframework.cloud", name: "spring-cloud-commons")
		testCompile(group: "org.springframework.cloud", name: "spring-cloud-connectors-core", classifier: "tests", version: "${springCloudConnectorsVersion}")
		testCompile("org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudConnectorsVersion}")
		testCompile(group: "org.springframework.cloud", name: "spring-cloud-cloudfoundry-connector", classifier: "tests", version: "${springCloudConnectorsVersion}")
		testCompile("org.springframework.cloud:spring-cloud-starter-stream-rabbit")
		testCompile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${springCloudStarterNetflixVersion}")
		testCompile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix:${springCloudStarterNetflixHystrixVersion}")
		testCompile("org.springframework.cloud:spring-cloud-config-server")
		testCompile("org.awaitility:awaitility:4.0.3")
		testImplementation("org.junit.vintage:junit-vintage-engine") {
			exclude group: "org.hamcrest", module: "hamcrest-core"
		}
	}
}

configure(rootProject) {
	description = "Spring Cloud Services Connector"

	// do not publish the default jar for the root project
	configurations.archives.artifacts.clear()

	dependencies { // for integration tests
	}

	task api(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.overview = "src/api/overview.html"
		options.links(project.ext.javadocLinks)
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}

		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}

		classpath = files(subprojects.collect { project ->
			project.sourceSets.main.compileClasspath
		})

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "api")
	}

	task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
				"for deployment at docs.spring.io."

		from(api) {
			into 'api'
		}
	}

	task distZip(type: Zip, dependsOn: docsZip) {
		group = "Distribution"
		classifier = "dist"
		description = "Builds -${classifier} archive, containing all jars and docs, " +
				"suitable for community download page."

		def baseDir = "${project.name}-${project.version}";

		from("src/dist") {
			include "license.txt"
			include "notice.txt"
			into "${baseDir}"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}

		from(zipTree(docsZip.archivePath)) {
			into "${baseDir}/docs"
		}

		subprojects.each { subproject ->
			into ("${baseDir}/libs") {
				from subproject.jar
				if (subproject.tasks.findByPath("sourcesJar")) {
					from subproject.sourcesJar
				}
				if (subproject.tasks.findByPath("javadocJar")) {
					from subproject.javadocJar
				}
			}
		}
	}

	artifacts {
		archives docsZip
		archives distZip
	}
}
