plugins {
	id "java-library"
	id "org.springframework.boot.conventions"
	id "org.springframework.boot.deployed"
	id "org.springframework.boot.optional-dependencies"
}

description = "Spring Boot Test AutoConfigure"

dependencies {
	api(project(":spring-boot-project:spring-boot"))
	api(project(":spring-boot-project:spring-boot-test"))
	api(project(":spring-boot-project:spring-boot-autoconfigure"))

	optional("javax.json.bind:javax.json.bind-api")
	optional("javax.servlet:javax.servlet-api")
	optional("javax.transaction:javax.transaction-api")
	optional("com.fasterxml.jackson.core:jackson-databind")
	optional("com.google.code.gson:gson")
	optional("com.jayway.jsonpath:json-path")
	optional("com.sun.xml.messaging.saaj:saaj-impl")
	optional("io.rest-assured:rest-assured")
	optional("net.sourceforge.htmlunit:htmlunit")
	optional("org.hibernate:hibernate-core")
	optional("org.junit.jupiter:junit-jupiter-api")
	optional("org.seleniumhq.selenium:htmlunit-driver")
	optional("org.seleniumhq.selenium:selenium-api")
	optional("org.springframework:spring-orm")
	optional("org.springframework:spring-test")
	optional("org.springframework:spring-web")
	optional("org.springframework:spring-webmvc")
	optional("org.springframework:spring-webflux")
	optional("org.springframework.data:spring-data-cassandra")
	optional("org.springframework.data:spring-data-jdbc")
	optional("org.springframework.data:spring-data-jpa")
	optional("org.springframework.data:spring-data-ldap")
	optional("org.springframework.data:spring-data-mongodb")
	optional("org.springframework.data:spring-data-neo4j")
	optional("org.springframework.data:spring-data-r2dbc")
	optional("org.springframework.data:spring-data-redis")
	optional("org.springframework.restdocs:spring-restdocs-mockmvc")
	optional("org.springframework.restdocs:spring-restdocs-restassured")
	optional("org.springframework.restdocs:spring-restdocs-webtestclient")
	optional("org.springframework.security:spring-security-config")
	optional("org.springframework.security:spring-security-test")
	optional("org.springframework.ws:spring-ws-core")
	optional("org.springframework.ws:spring-ws-test")
	optional("org.apache.tomcat.embed:tomcat-embed-core")
	optional("org.mongodb:mongodb-driver-reactivestreams")
	optional("org.mongodb:mongodb-driver-sync")

	testImplementation(project(":spring-boot-project:spring-boot-actuator"))
	testImplementation(project(":spring-boot-project:spring-boot-actuator-autoconfigure"))
	testImplementation(project(":spring-boot-project:spring-boot-tools:spring-boot-test-support"))
	testImplementation("ch.qos.logback:logback-classic")
	testImplementation("com.fasterxml.jackson.module:jackson-module-parameter-names")
	testImplementation("com.h2database:h2")
	testImplementation("com.unboundid:unboundid-ldapsdk")
	testImplementation("io.lettuce:lettuce-core")
	testImplementation("io.micrometer:micrometer-registry-prometheus")
	testImplementation("io.projectreactor:reactor-core")
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("io.r2dbc:r2dbc-h2")
	testImplementation("javax.json:javax.json-api")
	testImplementation("org.apache.commons:commons-pool2")
	testImplementation("org.apache.johnzon:johnzon-jsonb")
	testImplementation("org.apache.tomcat.embed:tomcat-embed-el")
	testImplementation("org.aspectj:aspectjrt")
	testImplementation("org.aspectj:aspectjweaver")
	testImplementation("org.assertj:assertj-core")
	testImplementation("org.awaitility:awaitility")
	testImplementation("org.hibernate.validator:hibernate-validator")
	testImplementation("org.hsqldb:hsqldb")
	testImplementation("org.jooq:jooq")
	testImplementation("org.junit.platform:junit-platform-engine")
	testImplementation("org.junit.jupiter:junit-jupiter")
	testImplementation("org.mockito:mockito-core")
	testImplementation("org.mockito:mockito-junit-jupiter")
	testImplementation("org.skyscreamer:jsonassert")
	testImplementation("org.springframework.hateoas:spring-hateoas")
	testImplementation("org.springframework.plugin:spring-plugin-core")
	testImplementation("org.testcontainers:cassandra")
	testImplementation("org.testcontainers:junit-jupiter")
	testImplementation("org.testcontainers:mongodb")
	testImplementation("org.testcontainers:neo4j")
	testImplementation("org.testcontainers:testcontainers")
	testImplementation("org.thymeleaf:thymeleaf")
}

configurations {
	configurationPropertiesMetadata
}

artifacts {
	configurationPropertiesMetadata new File(sourceSets.main.output.resourcesDir, "META-INF/spring-configuration-metadata.json"), { artifact ->
		artifact.builtBy sourceSets.main.processResourcesTaskName
	}
}

test {
	include "**/*Tests.class"
}

task testSliceMetadata(type: org.springframework.boot.build.test.autoconfigure.TestSliceMetadata) {
	sourceSet = sourceSets.main
	outputFile = file("${buildDir}/test-slice-metadata.properties")
}
