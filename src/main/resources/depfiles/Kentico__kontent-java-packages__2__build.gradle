plugins {
    id "io.franzbecker.gradle-lombok" version "1.14"
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    implementation("org.slf4j:slf4j-api:1.7.25")

    implementation("com.fasterxml.jackson.core:jackson-core:2.8.9")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.8.9")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.4.0")

    implementation("com.madrobot:madrobotbeans:0.1")
    implementation("io.github.classgraph:classgraph:4.8.90")

    implementation("com.squareup.okhttp3:okhttp:4.5.0")

    compileOnly("org.thymeleaf:thymeleaf:3.0.0.RELEASE")
    testCompile("org.thymeleaf:thymeleaf:3.0.0.RELEASE")

    testCompile("junit:junit:4.12")
    testCompile("org.apache.httpcomponents:httpclient:4.5.3:tests")
    testCompile("org.apache.httpcomponents:httpclient:4.5.3")
}

lombok {
    version = "1.18.2"
    sha256 = ""
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

import io.franzbecker.gradle.lombok.task.DelombokTask

import java.nio.file.Files
import java.nio.file.Paths

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each { dir ->
        inputs.dir(dir)
        args(dir, "-d", outputDir)
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

def packageSummary = 'Kontent Delivery SDK client.'
def packageDescription = 'Java client around Kentico Kontent Delivery REST API.'
def repoArtifactId = 'kontent-delivery'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId = repoArtifactId
            groupId = repoGroupId
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom.withXml {
                def root = asNode()
                root.appendNode('description', packageDescription)
                root.appendNode('name', packageSummary)
                root.appendNode('url', 'https://kontent.ai')
                root.children().last() + pomConfig
            }
        }
    }
    repositories {
        maven {
            if (project.getVersion().toString().endsWith('SNAPSHOT')) {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username nexusUsername
                password nexusPassword
            }
        }
    }
}

signing {
    // https://docs.gradle.org/current/userguide/signing_plugin.html#using_in_memory_ascii_armored_openpgp_subkeys
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}


task createTrackingHeaderProperties(dependsOn: processResources) {
    doLast {
        def propertiesPath = "$buildDir/resources/main/kentico/kontent/delivery"
        Files.createDirectories(Paths.get(propertiesPath))
        new File("$propertiesPath/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = version.toString()
            p['package-id'] = repoGroupId.toString() + ':' + repoArtifactId.toString()
            p['repository-host'] = repositoryHost.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createTrackingHeaderProperties
}