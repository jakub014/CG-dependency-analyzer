import org.gradle.internal.jvm.Jvm

import java.time.Duration

/*
* Copyright (c) 2016-present Acrolinx GmbH
*/

plugins {
	id "idea"
	// id 'eclipse'

	id "java"
	id 'maven-publish'

	id 'signing'
	id 'org.ajoberstar.grgit' version '4.1.0'

	id 'io.codearte.nexus-staging' version '0.22.0'
	id 'de.marcphilipp.nexus-publish' version '0.4.0'

	id 'se.patrikerdes.use-latest-versions' version '0.2.15'
	id 'com.github.ben-manes.versions' version '0.34.0'

	id "com.moowork.node" version "1.3.1"
	id "com.diffplug.swt.nativedeps" version "3.25.0"
	id "org.owasp.dependencycheck" version "6.0.2"

	id 'com.github.hierynomus.license' version '0.15.0'
	id 'com.github.hierynomus.license-report' version '0.15.0'

	id "com.github.spotbugs" version "4.5.1"

	id "org.openjfx.javafxplugin" version "0.0.9" apply false
	id "org.sonarqube" version "3.0"
}

sonarqube {
	properties {
		property "sonar.organization", "acrolinx"
		property "sonar.projectKey", "acrolinx_sidebar-sdk-java"
		property "sonar.exclusions", "src/test/**/*.java"
	}
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.memberLevel = JavadocMemberLevel.PUBLIC
}

project.version = currentVersion
group = 'com.acrolinx.client'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
	mavenCentral()
	maven {
		url "http://maven-eclipse.github.io/maven"
	}
}

def buildNumber = System.getenv('TRAVIS_BUILD_NUMBER');

def buildVersion = buildNumber != null ? buildNumber : 123

def artifactName = "sidebar-sdk"
def fullVersion = "${project.version}.${buildVersion}"

def isReleaseBuild = !fullVersion.contains('SNAPSHOT')

def isMasterBranch = false

dependencyCheck {
	cveValidForHours = 1
	format = 'HTML'
	failBuildOnCVSS = 4.0
	scanConfigurations = ['compile', 'runtime']
}

task getIsMasterBranch {
	def branch = ""
	def proc = "git rev-parse --abbrev-ref HEAD".execute()
	proc.in.eachLine { line -> branch = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()
	if (branch.startsWith('master')) {
		isMasterBranch = true
	} else {
		isMasterBranch = false
	}
}

task createVersionPropertiesFile {
	doFirst {
		def Properties versionProps = new Properties()
		def versionPropsFile = file('versionJavaSDK.properties')
		if (versionPropsFile.exists())
			versionProps.load(new FileInputStream(versionPropsFile))
		def code = "${fullVersion}"
		versionProps['VERSION_JAVA_SDK'] = code.toString()
		versionProps.store(versionPropsFile.newWriter(), null)
	}
}

jar {
	archiveFileName = "${artifactName}-${fullVersion}.jar"
	manifest {
		attributes(
				"Implementation-Title": "${artifactName}",
				"Implementation-Version": "${fullVersion}",
				"Specification-Title": "${artifactName}",
				"Specification-Version": project.version
		)

	}
	from("$projectDir") {
		include 'versionJavaSDK.properties'
	}
	from("$rootDir") {
		include 'dependency-licenses/*.html'
	}
}

task copyServerSelectorRessources(type: Copy, dependsOn: npm_install) {
	doFirst {
		def mainDir = new File('src/main/resources')
		def subDir = new File(mainDir, 'server-selector')
		if (subDir.exists()) {
			def result = subDir.deleteDir()
			assert result
		}
		subDir.mkdirs()
		assert subDir.exists()
	}
	from('node_modules/@acrolinx/sidebar-startpage/dist/dist-offline')
	into('src/main/resources/server-selector')
}

task convertLocalizationEncoding() {
	def dir = new File("$projectDir/src/main/resources/localization_iso-8859-1/")
	if (!dir.exists()) {
		dir.mkdirs()
	}
	def sourceDir = new File("$projectDir/src/main/resources/localization")
	sourceDir.eachFile {
		pFile ->
			if (pFile.name.endsWith(".properties")) {
				def f = pFile.getText('utf-8')
				def pFileName = pFile.name
				if (!pFileName.contains("_ja")) {
					def write = new File("$projectDir/src/main/resources/localization_iso-8859-1/" + pFileName)
					write.createNewFile();
					write.write(f, 'ISO-8859-1')
				} else {
					def write = new File("$projectDir/src/main/resources/localization_iso-8859-1/" + pFileName)
					write.createNewFile();
					StringBuilder b = new StringBuilder();
					for (char c : f.toCharArray()) {
						//noinspection GroovyAssignabilityCheck
						if (c >= 128)
						//noinspection GroovyAssignabilityCheck
							b.append("\\u").append(String.format("%04X", (int) c));
						else
							b.append(c);
					}
					def string = b.toString();
					write.write(string, 'ISO-8859-1')
				}

			}
	}
}

javadoc {
	source = sourceSets.main.allJava
	destinationDir = new File(rootProject.projectDir, "docs/")
	classpath += sourceSets.main.runtimeClasspath
	failOnError = false
}

task sourcesJar(type: Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}


artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

def devId = "Acrolinx Open Source"
def devName = "Acrolinx"
def devEmail = "opensource@acrolinx.com"


publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			afterEvaluate {
				pom.withXml {
					Node pomNode = asNode()
					pomNode.dependencies.'*'.findAll() {
						it.groupId.text() == 'eclipse-swt-deps'
					}.each() {
						it.parent().remove(it)
					}
					asNode().children().last() + {
						resolveStrategy = Closure.DELEGATE_FIRST
						name 'sidebar-sdk'
						description 'Acrolinx Sidebar SDK to build Acrolinx integrations for Java FX, Swing or SWT based clients.'
						url 'https://github.com/acrolinx/sidebar-sdk-java'
						scm {
							url 'https://github.com/acrolinx/sidebar-sdk-java'
							connection 'scm:git@github.com:acrolinx/sidebar-sdk-java.git'
							developerConnection 'scm:git@github.com:acrolinx/sidebar-sdk-java.git'
						}
						licenses {
							license {
								name 'The Apache Software License, Version 2.0'
								url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
								distribution 'repo'
							}
						}
						developers {
							developer {
								id devId
								name devName
								email devEmail
								organization 'Acrolinx'
								organizationUrl 'https://www.acrolinx.com/'
							}
						}
					}
				}
			}
		}
	}
	repositories {
		maven {
			if (isReleaseBuild) {
				url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
				credentials {
					username = sonatypeUsername
					password = sonatypePassword
				}
			} else if (sonatypeUsername == null) {
				url "$buildDir/repo"
			} else if (!isReleaseBuild) {
				url "https://oss.sonatype.org/content/repositories/snapshots/"
				credentials {
					username = sonatypeUsername
					password = sonatypePassword
				}
			}
		}
	}
}

nexusStaging {
	numberOfRetries = 40
	delayBetweenRetriesInMillis = 4000
}

nexusPublishing {
	connectTimeout = Duration.ofMinutes(5);
	clientTimeout = Duration.ofMinutes(5);
	repositories {
		sonatype {
			username = sonatypeUsername
			password = sonatypePassword
		}
	}
}


signing {
	required { isReleaseBuild }
	sign publishing.publications.mavenJava
}

def isNonStable = { String version ->
	def nonStableKeyword = ['alpha'].any { it -> version.toUpperCase().contains(it) }
	return nonStableKeyword
}

tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		isNonStable(it.candidate.version)
	}
}

task createGithubReleaseTag {
	doLast {
		println 'Creating Github Release Tag'
		if (isReleaseBuild) {
			grgit.open(currentDir: rootDir)
			def hasOldReleaseVersion = grgit.tag.list().find { it.getName() == "release-${project.version}" }
			println 'Finding tags'
			if (!hasOldReleaseVersion) {
				println 'is new release version'
				grgit.tag.add(name: "release-${project.version}", message: "Releasing ${project.version}")
				grgit.push(tags: true)
				println 'Done releasing'
			} else {
				println 'This version was already released'
			}
		} else {
			println 'NO RELEASE VERSION'
		}
	}
}

spotbugs {
	toolVersion = '3.1.12'
	ignoreFailures = false    // bug free or it doesn't ship!
	reportsDir = file('build/spotbugs')
	effort = 'max'            // min|default|max
	reportLevel = 'medium'        // low|medium|high (low = sensitive to even minor mistakes)
	excludeFilter = file("$rootProject.projectDir/findbugs/excludeFilter.xml")
	omitVisitors = []        // bugs that we want to ignore
}


if (Integer.parseInt(Jvm.current().getJavaVersion().getMajorVersion()) >= 11) {
	apply plugin: "org.openjfx.javafxplugin"

	javafx {
		modules = ["javafx.web", "javafx.swing"]
		configuration = 'compileOnly'
	}
}

dependencies {
	// overwrite vulnerability in transitive dependencies...
	compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
	compile group: 'org.bitbucket.cowwoc', name: 'diff-match-patch', version: '1.2'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
	compile group: 'commons-validator', name: 'commons-validator', version: '1.7'
	compile group: 'commons-io', name: 'commons-io', version: '2.8.0'
	compile group: 'org.jsoup', name: 'jsoup', version: '1.13.1'
	compile 'com.google.guava:guava:30.0-jre'
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

// Vunerability fix for transitive library common-beanutils
configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == "commons-beanutils"
				&& details.requested.name == "commons-beanutils"
				&& details.requested.version == "1.9.2") {
			details.useTarget("commons-beanutils:commons-beanutils:1.9.4")
		}
	}
}


license {
	header rootProject.file('LICENSE_HEADER')
	skipExistingHeaders true
	include("**/*.java")
}

downloadLicenses {
	includeProjectDependencies true
	dependencyConfiguration = "compileClasspath"
}

task checkLicenseHeaders {
	doLast {
		println 'If this fails run \'./gradlew licenseFormat\' to apply missing headers'
	}
}

//npm_install.dependsOn npm_cache_clean

//noinspection GroovyAssignabilityCheck,GroovyAssignabilityCheck
processResources.dependsOn copyServerSelectorRessources
processResources.dependsOn convertLocalizationEncoding
licenseMain.dependsOn checkLicenseHeaders
licenseTest.dependsOn checkLicenseHeaders
jar.dependsOn 'downloadLicenses'
jar.dependsOn createVersionPropertiesFile
check.dependsOn dependencyCheckAnalyze
test.dependsOn javadoc
