buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
	}
}

plugins {
	id "com.jfrog.bintray" version "1.8.5"
}


apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'idea'

group = 'com.bertramlabs.plugins'
sourceCompatibility = '1.7'
targetCompatibility = '1.7'
repositories {
	mavenCentral()
}

configurations {
	provided
	doc.extendsFrom(runtime)
}

sourceSets {
	main {
		compileClasspath += configurations.provided
		groovy.srcDirs   += ['src/main/java']
		java.srcDirs      = []
	}
}

dependencies {
	implementation    'org.codehaus.groovy:groovy:2.4.19'
	api     project(':asset-pipeline-core')
	api 'javax.servlet:javax.servlet-api:3.1.0'
	testImplementation 'org.codehaus.groovy:groovy:2.4.19'
    testImplementation 'org.eclipse.jetty:jetty-server:9.2.10.v20150310'
    testImplementation 'org.eclipse.jetty:jetty-servlet:9.2.10.v20150310'
    testImplementation 'org.eclipse.jetty:jetty-webapp:9.2.10.v20150310'
    testImplementation "org.apache.httpcomponents:httpclient:4.3.4"
    testImplementation "org.apache.httpcomponents:fluent-hc:4.3.4"
    testImplementation 'junit:junit:4.10'
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			artifactId 'asset-pipeline-servlet'
			pom.withXml {
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name 'asset-pipeline-servlet'
					description 'JVM Asset Pipeline Servlet Adapter.'
					url 'https://github.com/bertramdev/asset-pipeline-core'
					scm {
						url 'https://github.com/bertramdev/asset-pipeline-core'
						connection 'scm:https://bertramdev@github.com/bertramdev/asset-pipeline-core.git'
						developerConnection 'scm:git://github.com/bertramdev/asset-pipeline-core.git'
					}
					licenses {
						license {
							name 'The Apache Software License, Version 2.0'
							url 'http://www.apache.org/license/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'davydotcom'
							name 'David Estes'
							email 'davydotcom@gmail.com'
						}
					}
				}
			}
			from components.java
			afterEvaluate {
			artifact sourcesJar
			artifact javadocJar
}
		}
	}

	repositories {
		maven {
			credentials {
				username project.properties.get('artifactoryPublishUsername')
				password project.properties.get('artifactoryPublishPassword')
			}
			url 'https://repo.grails.org/grails/libs-snapshots-local/'
		}
	}
}

bintray {
	if(project.hasProperty('bintrayUser')) {
		user = bintrayUser
		key = bintrayKey
	}
	publications = ['maven']
    publish=true
	pkg {
		repo = 'asset-pipeline'
		userOrg = 'bertramlabs'
		name = 'asset-pipeline-servlet'
		licenses = ['Apache-2.0']
		websiteUrl = 'https://github.com/bertramdev/asset-pipeline-core'
        issueTrackerUrl = 'https://github.com/bertramdev/asset-pipeline-core/issues'
        vcsUrl = 'https://github.com/bertramdev/asset-pipeline-core.git'
        version {
            if (project.hasProperty('mavenUser')) {
                mavenCentralSync {
                    sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
                    user = mavenUser //OSS user token
                    password = mavenPassword //OSS user password
                    close = '1'
                    //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                }
            }
        }
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task(console, dependsOn: 'classes', type: JavaExec) {
	main = 'groovy.ui.Console'
	classpath = sourceSets.main.runtimeClasspath
}



bintrayUpload.dependsOn build, sourcesJar, javadocJar