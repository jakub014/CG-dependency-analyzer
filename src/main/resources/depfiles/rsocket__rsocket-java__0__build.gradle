/*
 * Copyright 2015-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.github.sherter.google-java-format' version '0.8' apply false
    id 'com.jfrog.artifactory' version '4.15.2' apply false
    id 'com.jfrog.bintray' version '1.8.5' apply false
    id 'me.champeau.gradle.jmh' version '0.5.0' apply false
    id 'io.spring.dependency-management' version '1.0.9.RELEASE' apply false
    id 'io.morethan.jmhreport' version '0.9.0' apply false
}

boolean isCiServer = ["CI", "CONTINUOUS_INTEGRATION", "TRAVIS", "CIRCLECI", "bamboo_planKey", "GITHUB_ACTION"].with {
    retainAll(System.getenv().keySet())
    return !isEmpty()
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.sherter.google-java-format'

    ext['reactor-bom.version'] = '2020.0.7'
    ext['logback.version'] = '1.2.3'
    ext['netty-bom.version'] = '4.1.59.Final'
    ext['netty-boringssl.version'] = '2.0.36.Final'
    ext['hdrhistogram.version'] = '2.1.10'
    ext['mockito.version'] = '3.2.0'
    ext['slf4j.version'] = '1.7.25'
    ext['jmh.version'] = '1.21'
    ext['junit.version'] = '5.5.2'
    ext['hamcrest.version'] = '1.3'
    ext['micrometer.version'] = '1.0.6'
    ext['assertj.version'] = '3.11.1'
    ext['netflix.limits.version'] = '0.3.6'

    group = "io.rsocket"

    googleJavaFormat {
        toolVersion = '1.6'
    }

    ext {
        if (project.hasProperty('versionSuffix')) {
            project.version += project.getProperty('versionSuffix')
        }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 60, "minutes"
    }

    dependencyManagement {
        imports {
            mavenBom "io.projectreactor:reactor-bom:${ext['reactor-bom.version']}"
            mavenBom "io.netty:netty-bom:${ext['netty-bom.version']}"
            mavenBom "org.junit:junit-bom:${ext['junit.version']}"
        }

        dependencies {
            dependency "com.netflix.concurrency-limits:concurrency-limits-core:${ext['netflix.limits.version']}"
            dependency "ch.qos.logback:logback-classic:${ext['logback.version']}"
            dependency "io.netty:netty-tcnative-boringssl-static:${ext['netty-boringssl.version']}"
            dependency "io.micrometer:micrometer-core:${ext['micrometer.version']}"
            dependency "org.assertj:assertj-core:${ext['assertj.version']}"
            dependency "org.hdrhistogram:HdrHistogram:${ext['hdrhistogram.version']}"
            dependency "org.slf4j:slf4j-api:${ext['slf4j.version']}"
            dependencySet(group: 'org.mockito', version: ext['mockito.version']) {
                entry 'mockito-junit-jupiter'
                entry 'mockito-core'
            }
            // TODO: Remove after JUnit5 migration
            dependency 'junit:junit:4.12'
            dependency "org.hamcrest:hamcrest-library:${ext['hamcrest.version']}"
            dependencySet(group: 'org.openjdk.jmh', version: ext['jmh.version']) {
                entry 'jmh-core'
                entry 'jmh-generator-annprocess'
            }
        }
        generatedPomCustomization {
            enabled = false
        }
    }

    repositories {
        mavenCentral()

        maven {
            url 'https://repo.spring.io/milestone'
            content {
                includeGroup "io.projectreactor"
                includeGroup "io.projectreactor.netty"
            }
        }

        maven {
            url 'https://repo.spring.io/snapshot'
            content {
                includeGroup "io.projectreactor"
                includeGroup "io.projectreactor.netty"
            }
        }

        if (version.endsWith('SNAPSHOT') || project.hasProperty('versionSuffix')) {
            maven { url 'https://repo.spring.io/libs-snapshot' }
            maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    plugins.withType(JavaPlugin) {
        compileJava {
            sourceCompatibility = 1.8

            // TODO: Cleanup warnings so no need to exclude
            options.compilerArgs << '-Xlint:all,-overloads,-rawtypes,-unchecked'
        }

        javadoc {
            def jdk = JavaVersion.current().majorVersion
            def jdkJavadoc = "https://docs.oracle.com/javase/$jdk/docs/api/"
            if (JavaVersion.current().isJava11Compatible()) {
                jdkJavadoc = "https://docs.oracle.com/en/java/javase/$jdk/docs/api/"
            }
            options.with {
                links jdkJavadoc
                links 'https://projectreactor.io/docs/core/release/api/'
                links 'https://netty.io/4.1/api/'
            }
            failOnError = false
        }

        tasks.named("javadoc").configure {
            onlyIf { System.getenv('SKIP_RELEASE') != "true" }
        }

        test {
            useJUnitPlatform()
            testLogging {
                events "FAILED"
                showExceptions true
                exceptionFormat "FULL"
                stackTraceFilters "ENTRY_POINT"
                maxGranularity 3
            }

            //show progress by displaying test classes, avoiding test suite timeouts
            TestDescriptor last
            afterTest { TestDescriptor td, TestResult tr ->
                if (last != td.getParent()) {
                    last = td.getParent()
                    println last
                }
            }

            if (isCiServer) {
                def stdout = new LinkedList<TestOutputEvent>()
                beforeTest { TestDescriptor td ->
                    stdout.clear()
                }
                onOutput { TestDescriptor td, TestOutputEvent toe ->
                    stdout.add(toe)
                }
                afterTest { TestDescriptor td, TestResult tr ->
                    if (tr.resultType == TestResult.ResultType.FAILURE && stdout.size() > 0) {
                        def stdOutput = stdout.collect {
                            it.getDestination().name() == "StdErr"
                                    ? "STD_ERR: ${it.getMessage()}"
                                    : "STD_OUT: ${it.getMessage()}"
                        }
                                .join()
                        println "This is the console output of the failing test below:\n$stdOutput"
                    }
                }

                reports {
                    junitXml.outputPerTestCase = true
                }
            }

            if (JavaVersion.current().isJava9Compatible()) {
                println "Java 9+: lowering MaxGCPauseMillis to 20ms in ${project.name} ${name}"
                println "Java 9+: enabling leak detection [ADVANCED]"
                jvmArgs = ["-XX:MaxGCPauseMillis=20", "-Dio.netty.leakDetection.level=ADVANCED"]
            }

            systemProperty("java.awt.headless", "true")
            systemProperty("testGroups", project.properties.get("testGroups"))

            //allow re-run of failed tests only without special test tasks failing
            // because the filter is too restrictive
            filter.setFailOnNoMatchingTests(false)

            //display intermediate results for special test tasks
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    println('\n' + "${desc} Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)")
                }
            }
        }
    }

    plugins.withType(JavaLibraryPlugin) {
        task sourcesJar(type: Jar) {
            classifier 'sources'
            from sourceSets.main.allJava
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier 'javadoc'
            from javadoc.destinationDir
        }

        plugins.withType(MavenPublishPlugin) {
            publishing {
                publications {
                    maven(MavenPublication) {
                        from components.java
                        artifact sourcesJar
                        artifact javadocJar
                    }
                }
            }
        }
    }
}

apply from: "${rootDir}/gradle/publications.gradle"

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

description = 'RSocket: Stream Oriented Messaging Passing with Reactive Stream Semantics.'

repositories {
    mavenCentral()
}
