plugins {
  id 'java-library'
  id 'scala'
  id 'com.github.maiflai.scalatest'
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'signing'
  id 'com.gradle.plugin-publish'
}

version = docBookProjectVersion
description = 'Gradle DocBook Plugin'

apply from: '../configure.gradle'

dependencies {
  implementation project(':opentorah-site')  // TODO exclude flexmark...
  implementation project(':opentorah-base')

  implementation "org.xmlresolver:xmlresolver:$xmlresolverVersion"
  implementation "saxon:saxon:$saxon6Version"
  implementation "net.sf.saxon:Saxon-HE:$saxon10Version"

  // FOP
  // TODO probably used by JEuclid; drop support for it and V8...
  // FOP 2.4 uses JAI and JAI Codec from JBoss repository;
  // since at plugin application time it is too late to define the repository *or* to substitute JAI modules with the
  // ones from JCenter, and I do not want every project that uses the plugin to have to do either,
  // I exclude them and add the ones from JCenter;
  // I have to also exclude FOP from the JEuclid dependencies lest it drags the JAI back in...
  implementation ("org.apache.xmlgraphics:fop:$fopVersion") {
    exclude group: 'javax.media', module: 'jai-core'
    exclude group: 'com.sun.media', module: 'jai-codec'
  }
//  implementation "javax.media.jai:com.springsource.javax.media.jai.core:$jaiVersion"
//  implementation "javax.media.jai:com.springsource.javax.media.jai.codec:$jaiVersion"

  // Hyphenation patterns
  implementation "net.sf.offo:fop-hyph:$fopHyphVersion"

  implementation "org.apache.xmlgraphics:batik-transcoder:$batikVersion"
  implementation "org.apache.xmlgraphics:batik-extension:$batikVersion"

  // JEuclid
  implementation ("de.rototor.jeuclid:jeuclid-fop:$jeuclidFopVersion") {
    exclude group: 'org.apache.xmlgraphics', module: 'fop'
  }

  // J2V8 integration
  // Note: Native library (if needed and available) is loaded from a dynamically retrieved artifact,
  // not from this one - but it needs to be compatible with the Java JNI wrappers, so I probably
  // have to use the same version on all platforms.
  // Since 4.6.0 doesn't work on Linux, and 4.8.0 doesn't work with mathjax-node,
  // this probably won't work on any other platform :(
  //
  // For reasons that are not clear to me, if I declare this dependency as compileOnly (as I think it should be),
  // tests fail...
  implementation "com.eclipsesource.j2v8:j2v8_linux_x86_64:$j2v8Version"

  // Needed to compile classes using Gradle, but does not become a dependency:
  compileOnly gradleApi()

  // added by the 'java-gradle-plugin': testImplementation gradleTestKit()
  // it has its own slf4j implementation, so we exclude the default one
  // that is added by the scala.gradle to avoid the warning
  // "Class path contains multiple SLF4J bindings."
  configurations.testRuntimeOnly {
    exclude group: 'ch.qos.logback', module: 'logback-classic'
  }
}

// run tests sequentially
test {
  maxParallelForks = 1
}

gradlePlugin {
  plugins {
    docBook {
      id = 'org.opentorah.docbook'
      implementationClass = 'org.opentorah.docbook.plugin.DocBookPlugin'
    }
  }
}

pluginBundle {
  website = 'https://github.com/opentorah/opentorah/tree/master/docbook'
  vcsUrl  = 'https://github.com/opentorah/opentorah/tree/master/docbook' //.git' ?

  plugins {
    docBook {
      displayName = project.description
      description = project.description
      tags        = ['Scala', 'DocBook', 'Html', 'Epub', 'Pdf', 'FOP', 'MathML', 'MathJax', 'JEuclid']
    }
  }

  // If you have an existing plugin deployed to Bintray and would like to keep
  // your existing group ID and artifact ID for continuity, you can specify
  // them here (needs manual approval on first publication).
  mavenCoordinates {
    groupId    = 'org.opentorah'
    artifactId = 'opentorah-docbook'
  }
}

upload.dependsOn(publishPlugins)
