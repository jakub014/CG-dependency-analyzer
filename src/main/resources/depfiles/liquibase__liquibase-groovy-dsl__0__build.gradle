#!groovy
// The above triggers groovy syntax highlighting in vim

buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
	}
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Release version that won't conflict with the bintray plugin
def releaseVersion = '3.0.1'
group = 'org.liquibase'
archivesBaseName = 'liquibase-groovy-dsl'
version = releaseVersion
ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

if ( isReleaseVersion ) {
	println 'using staging'
	ext.mavenCentralUploadUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
} else {
	println 'using snapshot'
	ext.mavenCentralUploadUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

repositories {
	mavenCentral()
	mavenLocal()
}


dependencies {
	compile 'org.codehaus.groovy:groovy:2.4.12'
	compile 'org.codehaus.groovy:groovy-sql:2.4.12'
	// This seems redundant, but it isn't.  We need compileOnly so that the main
	// classes will compile, but that dependency doesn't transfer to the unit
	// tests, so we also need testCompile.
//	compileOnly 'org.liquibase:liquibase-core:3.10.0-local-SNAPSHOT'
//	testCompile 'org.liquibase:liquibase-core:3.10.0-local-SNAPSHOT'
//	compileOnly 'org.liquibase:liquibase-core:3.10.2'
//	testCompile 'org.liquibase:liquibase-core:3.10.2'
//	compileOnly 'org.liquibase:liquibase-core:4.0.0-local-SNAPSHOT'
//	testCompile 'org.liquibase:liquibase-core:4.0.0-local-SNAPSHOT'
//	compileOnly 'org.liquibase:liquibase-core:4.2.2'
//	testCompile 'org.liquibase:liquibase-core:4.2.2'
	compileOnly 'org.liquibase:liquibase-core:4.3.3'
	testCompile 'org.liquibase:liquibase-core:4.3.3'
	testCompile 'junit:junit:4.12'
	testRuntime 'com.h2database:h2:1.4.185'
	testRuntime 'ch.qos.logback:logback-classic:1.2.3'
	archives 'org.apache.maven.wagon:wagon-ssh:2.8'
	archives 'org.apache.maven.wagon:wagon-ssh-external:2.8'
}


task sourceJar(type: Jar) {
	description = 'An archive of the source code for Maven Central'
	classifier = 'sources'
	from sourceSets.main.allSource
}


task groovydocJar(type: Jar, dependsOn: groovydoc) {
	description = 'An archive of the GroovyDocs for Maven Central'
	classifier = 'javadoc'
	from groovydoc
}

// Configure the maven-publish plugin
publishing {
	publications {
		liquibaseGroovyDsl(MavenPublication) {
			from components.java
			artifact groovydocJar
			artifact sourceJar
			pom {
				name = 'Liquibase Groovy DSL'
				description = 'A Groovy-based DSL for the Liquibase database refactoring tool.'
				url = 'https://github.com/liquibase/liquibase-groovy-dsl'
				packaging = 'jar'
				licenses {
					license {
						name = 'The Apache Software License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'stevesaliman'
						name = 'Steven C. Saliman'
						email = 'support@saliman.net'
					}
				}
				scm {
					connection = 'scm:https://liquibase@github.com/liquibase/liquibase-groovy-dsl'
					developerConnection = 'scm:git@github.com:liquibase/liquibase-groovy-dsl.git'
					url = 'https://github.com/liquibase/liquibase-groovy-dsl'
				}
			}
		}
	}

	repositories {
		maven {
			url = mavenCentralUploadUrl
			// We only need to mess with credentials if we're publishing...
			if ( gradle.startParameter.taskNames.contains("publish") ) {
				// Use Java's console to read from the console (no good for a CI
				// environment)
				def console = System.console()
				console.printf "\n\nWe have to upload some things in this build...\n\n"

				if ( !project.hasProperty('mavenCentralUsername') ) {
					def mavenCentralUsername = console.readLine("Maven Central Username: ")
					allprojects { ext."mavenCentralUsername" = mavenCentralUsername }
				}

				if ( !project.hasProperty('mavenCentralPassword') ) {
					def mavenCentralPassword = console.readLine("Maven Central Password: ")
					allprojects { ext."mavenCentralPassword" = mavenCentralPassword }
				}
				credentials {
					username mavenCentralUsername
					password mavenCentralPassword
				}
			}
		}
	}
}

// Configure BinTray publishing
bintray {
	user = project.hasProperty('bintrayUsername') ? project.getProperty('bintrayUsername') : ''
	key = project.hasProperty('bintrayApiKey') ? project.getProperty('bintrayApiKey') : ''

	publications = ['liquibaseGroovyDsl']

	pkg {
		// repo = 'gradle-plugins'
		repo = 'maven'
		name = 'liquibase-groovy-dsl'
		desc = 'A parser that can parse Groovy change sets for the Liquibase database update tool.'
		licenses = ['Apache-2.0']
		websiteUrl = 'https://github.com/liquibase/liquibase-groovy-dsl'
		issueTrackerUrl = 'https://github.com/liquibase/liquibase-groovy-dsl/issues'
		vcsUrl = 'https://github.com/liquibase/liquibase-groovy-dsl.git'
		labels = ['liquibase', 'groovy']
		publicDownloadNumbers = true
		version {
			// name = version
			// vcsTag = version
			vcsTag = "Release_${releaseVersion}"
		}
	}
}

signing {
	sign publishing.publications.liquibaseGroovyDsl
}

// When we're ready to go, there are a couple of things we'll need to do before
// we execute anything.
gradle.taskGraph.whenReady { taskGraph ->
	// This is a rather nasty little hack.  When we apply java-gradle-plugin,
	// It creates some maven-publish tasks that conflict with the manual
	// configuration - it tries to publish a org.liquibase.gradle artifact,
	// which is wrong.  The quick and very dirty solution is to disable those
	// tasks.
	// Comment this to publish to Gradle and Bintray, Uncomment for Maven Central
	taskGraph.allTasks.findAll { it.name ==~ /.*MavenPublication.*/ }*.enabled = false

	// Only *require* signing if we are uploading a release version.  If we do
	// need to sign, make sure we've got the properties we need to do the signing.
	if ( isReleaseVersion && taskGraph.hasTask(":publish") ) {
		// Use Java's console to read from the console (no good for a CI
		// environment)
		def console = System.console()
		console.printf "\n\nWe have to sign some things in this build...\n\n"

		if ( !project.hasProperty('signing.keyId') ) {
			def id = console.readLine("PGP Public Key Id: ")
			allprojects { ext."signing.keyId" = id }
		}

		if ( !project.hasProperty('signing.secretKeyRingFile') ) {
			def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
			allprojects { ext."signing.secretKeyRingFile" = file }
		}

		if ( !project.hasProperty('signing.password') ) {
			def password = console.readPassword("PGP Private Key Password: ")
			allprojects { ext."signing.password" = password }
		}

		console.printf "\nThanks.\n\n"
	} else {
		tasks.withType(org.gradle.plugins.signing.Sign).all {
			it.enabled = false
		}
	}
}

