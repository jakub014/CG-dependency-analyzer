buildscript {
    dependencies {
        classpath "gradle.plugin.org.jruyi.gradle:thrift-gradle-plugin:0.4.1"
    }
}

plugins {
    id "com.github.hierynomus.license" version"0.15.0"
    id 'com.github.nbaztec.coveralls-jacoco' version '1.2.11'
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'net.ltgt.errorprone' version  '1.1.1'
    id 'java-library'
    id 'jacoco'
}

repositories {
    maven {
        url 'https://plugins.gradle.org/m2/'
    }
    mavenCentral()
    jcenter()
}

apply plugin: 'maven'
apply plugin: 'org.jruyi.thrift'
apply plugin: 'maven-publish'
apply plugin: 'com.github.sherter.google-java-format'

if (hasProperty('signing.keyId')) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}

googleJavaFormat {
    toolVersion '1.5'
    include '**/*.java'
    exclude '**/generated-sources/*'
}

group = 'com.uber.cadence'
version = '3.1.0'

description = '''Uber Cadence Java Client'''

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')
    errorprone('com.google.errorprone:error_prone_core:2.3.4')

    compile group: 'com.uber.tchannel', name: 'tchannel-core', version: '0.8.5'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.apache.thrift', name: 'libthrift', version: '0.9.3'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    compile group: 'com.uber.m3', name: 'tally-core', version: '0.4.0'
    compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    compile group: 'com.cronutils', name: 'cron-utils', version: '9.0.0'
    compile group: 'io.micrometer', name: 'micrometer-core', version: '1.1.2'
    compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.googlecode.junit-toolbox', name: 'junit-toolbox', version: '2.4'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

license {
    header rootProject.file('license-header.txt')
    skipExistingHeaders true
    excludes(["**/*.json", "com/uber/cadence/*.java", "com/uber/cadence/shadower/*.java"]) // config files and generated code
}

task initDlsSubmodule(type: Exec) {
    description = 'Initializes src/main/idls submodule'
    commandLine 'git', 'submodule', 'init'
}

task updateDlsSubmodule(type: Exec) {
    dependsOn initDlsSubmodule
    description = 'Updates src/main/idls submodule'
    commandLine 'git', 'submodule', 'update'
}

compileThrift {
    dependsOn updateDlsSubmodule
    sourceItems "${projectDir}/src/main/idls/thrift/cadence.thrift","${projectDir}/src/main/idls/thrift/shared.thrift","${projectDir}/src/main/idls/thrift/shadower.thrift"

    nowarn true
}

compileJava {
    dependsOn 'googleJavaFormat'
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
    options.errorprone.excludedPaths = '.*/generated-sources/.*'
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
    options.errorprone.excludedPaths = '.*/generated-sources/.*'
}

// Generation version.properties for value to be included into the request header
task createProperties(dependsOn: processResources) {
    doLast {
        def subdir = new File('$buildDir/resources/main/com/uber/cadence/')
        if( !subdir.exists() ) {
            subdir.mkdirs()
        }
        new File('$buildDir/resources/main/com/uber/cadence/version.properties').withWriter { w ->
            Properties p = new Properties()
            p['cadence-client-version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

javadoc {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

def ossrhUsername = hasProperty('ossrhUsername') ? property('ossrhUsername') : ''
def ossrhPassword = hasProperty('ossrhPassword') ? property('ossrhPassword') : ''

publishing {

    publications {
        maven(MavenPublication) {
            pom.withXml {
                asNode().with {
                    appendNode('packaging', 'jar')
                    appendNode('name', 'cadence-client')
                    appendNode('description', description)
                    appendNode('url', 'https://github.com/uber-java/cadence-client')
                    appendNode('scm').with {
                        appendNode('url', 'https://github.com/uber-java/cadence-client')
                        appendNode('connection', 'git@github.com:uber-java/cadence-client.git')
                    }
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'The Apache License, Version 2.0')
                            appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                        }
                    }
                    appendNode('developers').with {
                        appendNode('maxim').with {
                            appendNode('id', 'maxim')
                            appendNode('name', 'Maxim Fateev')
                            appendNode('email', 'maxim@uber.com')
                        }
                        appendNode('developer').with {
                            appendNode('id', 'meiliang')
                            appendNode('name', 'Liang Mei')
                            appendNode('email', 'meiliang@uber.com')
                        }
                    }
                }
            }
        }

        mavenJava(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
            if(project.version.endsWith('-SNAPSHOT')) {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            } else {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            }
        }
    }
}

task registerDomain(type:JavaExec) {
    main = 'com.uber.cadence.RegisterTestDomain'
    classpath = sourceSets.test.runtimeClasspath
}

test {
    dependsOn 'registerDomain'
    dependsOn 'licenseMain'
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        // Uncomment the following line if you want to see test logs in gradlew run.
        showStandardStreams true
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'cadence-client'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Uber Cadence Java Client'
                url 'https://github.com/uber-java/cadence-client'

                scm {
                    connection 'scm:git:git@github.com:uber-java/cadence-client.git/'
                    developerConnection 'scm:git:git@github.com:uber-java/cadence-client.git/'
                    url 'https://github.com/uber-java/cadence-client'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'maxim'
                        name 'Maxim Fateev'
                        email 'maxim@uber.com'
                    }
                    developer {
                        id 'meiliang'
                        name 'Liang Mei'
                        email 'meiliang@uber.com'
                    }
                }
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: ['com/uber/cadence/shadower/*.class', 'com/uber/cadence/*.class'])
        }))
    }
}
