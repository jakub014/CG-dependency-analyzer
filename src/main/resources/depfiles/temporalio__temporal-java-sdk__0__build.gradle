plugins {
    id 'com.github.sherter.google-java-format' version '0.9' apply false
}

// Logs list of failed tests after build is done.
subprojects {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    apply plugin: 'com.github.sherter.google-java-format'

    googleJavaFormat {
        toolVersion '1.7'
        include '**/*.java'
        exclude '**/generated/*'
        exclude '**/.idea/**'
    }

    // v0.20.0-2-g000a42a -> 0.20.0-2-g000a42a
    ext.getTag = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim().substring(1)
    }

// 0.20.0-2-g000a42a -> 0.20.0-SNAPSHOT
// 0.20.0 -> 0.20.0
// Used to name jar files
    ext.getVersionName = { ->
        def split = getTag().split('-')
        if (split.size() > 1) {
            return split[0] + '-SNAPSHOT'
        }
        return split[0]
    }

// 0.20.0-SNAPSHOT -> 0.20.0
// 0.20.0 -> 0.20.0
// Stored int version.properties which is loaded
// and used as a value of temporal-client-version gRPC header.
    ext.getClientVersionName = { ->
        def split = getVersionName().split('-')
        return split[0]
    }

    // add a collection to track failedTests
    ext.failedTests = []

    // add a testlistener to all tasks of type Test
    tasks.withType(Test) {
        afterTest { TestDescriptor descriptor, TestResult result ->
            if (result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
                failedTests << ["${descriptor.className}::${descriptor.name}"]
            }
        }
    }

    // print out tracked failed tests when the build has finished
    gradle.buildFinished {
        if (!failedTests.empty) {
            println "Failed tests for ${project.name}:"
            failedTests.each { failedTest ->
                println failedTest
            }
            println ""
        }
    }
}
//logging.captureStandardOutput LogLevel.INFO

task clean {
    subprojects.each {
        it.afterEvaluate {
            def cleanTask = it.tasks.findByName('clean')
            if (cleanTask) {
                dependsOn(cleanTask)
            }
        }
    }
}
