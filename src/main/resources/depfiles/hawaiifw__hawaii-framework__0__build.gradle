import java.time.Duration

buildscript {
    ext {
        apacheCxfVersion = "3.4.1"
        asciidoctorjVersion = "1.5.7"
        asciidoctorjDiagramVersion = "1.5.9"
        asciidoctorjPdfVersion = "1.5.0-alpha.16"
        asciidoctorPluginVersion = "1.5.8.1"
        bouncycastleVersion = "1.64"
        checkstyleToolVersion = "8.12"
        commonsIoVersion = "2.6"
        commonsTextVersion = "1.6"
        dataSourceProxyVersion = "1.5.1"
        dependencyManagementPluginVersion = "1.0.9.RELEASE"
        findbugsAnnotationsVersion = "3.0.1"
        hamcrestVersion = "2.2"
        jasyptVersion = "1.9.3"
        javaVersion = "11"
        jrubyVersion = "9.1.17.0"
        jsonVersion = "20180813"
        logbackVersion = "1.2.3"
        pmdToolVersion = "6.17.0"
        powerMockVersion = "2.0.2"
        propdepsPluginVersion = "0.0.10.RELEASE"
        spotbugsPluginVersion = "2.0.0"
        spotbugsToolVersion = "3.1.12"
        springBootVersion = "2.4.1"
        versionsPluginVersion = "0.21.0"
        nexusStagingVersion = "0.21.1"
        nexusPublishVersion = "0.4.0"
    }
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:${versionsPluginVersion}"
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:${spotbugsPluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}"
        classpath "io.spring.gradle:propdeps-plugin:${propdepsPluginVersion}"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorPluginVersion}"
        classpath "org.asciidoctor:asciidoctorj-diagram:${asciidoctorjDiagramVersion}"
        classpath "org.asciidoctor:asciidoctorj-pdf:${asciidoctorjPdfVersion}"
        classpath "org.jruby:jruby-complete:${jrubyVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:${nexusStagingVersion}"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:${nexusPublishVersion}"
    }
}

ext.coreprojects = subprojects.findAll { project -> !project.name.startsWith("hawaii-samples") }
ext.sampleprojects = subprojects.findAll { project -> project.name.startsWith("hawaii-samples") }

ext.javadocLinks = [
        "https://docs.oracle.com/en/java/javase/11/docs/api/",
        "http://docs.oracle.com/javaee/7/api/",
        "http://docs.spring.io/spring/docs/5.1.2.RELEASE/javadoc-api/",
        "http://docs.spring.io/spring-boot/docs/2.1.0.RELEASE/api/",
        "http://fasterxml.github.io/jackson-core/javadoc/2.9/",
        "http://fasterxml.github.io/jackson-databind/javadoc/2.9/",
        "http://fasterxml.github.io/jackson-datatype-json-org/javadoc/2.8/",
        "http://fasterxml.github.io/jackson-datatype-jsr310/javadoc/2.8/",
        "http://hamcrest.org/JavaHamcrest/javadoc/2.2/"
] as String[]

//Can only be applied to the root. See https://github.com/Codearte/gradle-nexus-staging-plugin/issues/47
apply plugin: 'io.codearte.nexus-staging'

configure(allprojects) { project ->

    group = "org.hawaiiframework"

    apply plugin: "io.spring.dependency-management"
    apply plugin: "idea"
    apply plugin: "propdeps"
    apply plugin: "propdeps-maven"
    apply plugin: "propdeps-idea"
    apply plugin: "propdeps-eclipse"
    apply plugin: "com.github.ben-manes.versions"
    apply plugin: 'de.marcphilipp.nexus-publish'
    apply plugin: 'project-report'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
    }

    configurations {
        all*.exclude group: "commons-logging", module: "commons-logging"
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    dependencies {
        implementation "commons-io:commons-io:${commonsIoVersion}"
        implementation "org.apache.commons:commons-lang3"
        implementation "org.slf4j:jcl-over-slf4j"
        implementation "org.slf4j:slf4j-api"
        testImplementation "junit:junit"
        testImplementation "org.mockito:mockito-core"
        testImplementation "org.springframework.boot:spring-boot-starter-logging"
        testImplementation "org.springframework:spring-test"
        optional "org.springframework.boot:spring-boot-configuration-processor"
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    test {
        outputs.upToDateWhen { false }
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }

    dependencyUpdates.resolutionStrategy {
        componentSelection { rules ->
            rules.all { selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    compileJava.dependsOn(processResources)
}

configure(subprojects - sampleprojects) { subproject ->

    apply plugin: "java-library"
    apply plugin: "maven"
    apply plugin: "signing"
    apply plugin: "checkstyle"
    apply plugin: "com.github.spotbugs"
    apply plugin: "pmd"

    project.group = 'org.hawaiiframework'

    jar {
        manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        manifest.attributes["Implementation-Title"] = subproject.name
        manifest.attributes["Implementation-Version"] = subproject.version

        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            include "release-notes.md"
            into "META-INF"
            expand(copyright: new Date().format("yyyy"), version: project.version)
        }
    }

    javadoc {
        description = "Generates project-level Javadoc API documentation."

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
        options.links(javadocLinks)
        options.addBooleanOption("html5", true)
        options.addStringOption("Xdoclint:none", "-quiet")

        // Suppress warnings due to cross-module @see and @link references;
        // Note that global 'api' task does display all warnings.
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    checkstyle {
        configDir = file("${rootProject.projectDir}/src/quality/config/checkstyle")
        ignoreFailures = false
        sourceSets = [sourceSets.main]
        toolVersion = checkstyleToolVersion
    }

    pmd {
        ignoreFailures = false
        ruleSetFiles = files("${rootProject.projectDir}/src/quality/config/pmd/pmd.xml")
        ruleSets = [] // https://github.com/pmd/pmd/issues/876
        sourceSets = [sourceSets.main]
        toolVersion = pmdToolVersion
    }

    spotbugs {
        excludeFilter = file("${rootProject.projectDir}/src/quality/config/spotbugs/exclude.xml")
        ignoreFailures = false
        sourceSets = [sourceSets.main]
        toolVersion = spotbugsToolVersion
    }

    if (project.hasProperty("signing.keyId")) {
        signing {
            sign publishing.publications
        }
    }

    publishing.publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact tasks.sourcesJar
            artifact tasks.javadocJar

            pom {
                name = "Hawaii Framework"
                packaging "jar"
                description = "Hawaii Framework"
                url = "https://github.com/hawaiifw/hawaii-framework"

                scm {
                    connection = "scm:git@github.com/hawaiifw/hawaii-framework.git"
                    developerConnection = "scm:git@github.com:hawaiifw/hawaii-framework.git"
                    url = "https://github.com/hawaiifw/hawaii-framework"
                }

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        id = "marceloverdijk"
                        name = "Marcel Overdijk"
                        email = "marcel@overdijk.me"
                    }
                }
            }
        }
    }

    //io.codearte.gradle
    nexusStaging {
        packageGroup = 'org.hawaiiframework'
        numberOfRetries = 20
        delayBetweenRetriesInMillis = 3000
    }

    nexusPublishing {
        repositories {
            sonatype {
                packageGroup = 'org.hawaiiframework'
                username = System.getenv("SONATYPE_OSSRH_USERNAME")
                password = System.getenv("SONATYPE_OSSRH_PASSWORD")
            }
        }
        connectTimeout = Duration.ofSeconds(1000)
        clientTimeout = Duration.ofSeconds(1000)
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

project("hawaii-async") {

    description = "Hawaii Async"

    dependencies {
        api project(":hawaii-logging")
        implementation "javax.validation:validation-api"
        implementation "net.ttddyy:datasource-proxy:${dataSourceProxyVersion}"
        implementation "org.springframework:spring-core"
        implementation "org.springframework:spring-context"
        implementation "org.springframework.boot:spring-boot"
        implementation "org.apache.httpcomponents:httpclient"
        implementation "org.springframework.boot:spring-boot-autoconfigure"
        implementation "org.yaml:snakeyaml"
        compileOnly "org.springframework:spring-web"
        compileOnly "io.opentracing:opentracing-api:0.33.0"
        testCompile "org.springframework:spring-context"
    }
}

project("hawaii-autoconfigure") {

    description = "Hawaii Autoconfigure"

    dependencies {
        api project(":hawaii-core")
        implementation "org.springframework.boot:spring-boot"
        implementation "org.springframework.boot:spring-boot-autoconfigure"
        implementation "org.springframework.boot:spring-boot-test"
        implementation "org.yaml:snakeyaml"
        compileOnly project(":hawaii-async")
        compileOnly project(":hawaii-logging")
        compileOnly project(":hawaii-cache")
        compileOnly "com.fasterxml.jackson.core:jackson-databind"
        compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-json-org"
        compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        compileOnly "javax.servlet:javax.servlet-api"
        compileOnly "org.springframework:spring-webmvc"
        compileOnly("org.springframework.data:spring-data-redis")
        compileOnly("redis.clients:jedis")
    }
}

project("hawaii-cache") {

    description = "Hawaii Cache"

    dependencies {
        implementation project(":hawaii-core")
        implementation("javax.validation:validation-api")
        implementation("org.apache.commons:commons-dbcp2")
        implementation("org.springframework.boot:spring-boot")
        compileOnly("org.springframework.data:spring-data-redis")
        compileOnly("redis.clients:jedis")
        testImplementation("org.springframework.data:spring-data-redis")
        testImplementation("redis.clients:jedis")
    }
}

project("hawaii-core") {

    description = "Hawaii Core"

    dependencies {
        api "org.jasypt:jasypt:${jasyptVersion}"
        api "org.hamcrest:hamcrest:${hamcrestVersion}"
        api "org.bouncycastle:bcprov-jdk15on:${bouncycastleVersion}"
        implementation "commons-codec:commons-codec"
        implementation "org.apache.commons:commons-lang3"
        compileOnly "com.fasterxml.jackson.core:jackson-databind"
        compileOnly "javax.servlet:javax.servlet-api"
        compileOnly "org.aspectj:aspectjweaver"
        compileOnly "org.springframework:spring-aop"
        compileOnly "org.springframework:spring-core"
        compileOnly "org.springframework:spring-context"
        compileOnly "org.springframework:spring-web"
        compileOnly "org.springframework:spring-webmvc"
        compileOnly "org.springframework.boot:spring-boot-autoconfigure"
        compileOnly "net.ttddyy:datasource-proxy:${dataSourceProxyVersion}"
        testImplementation "javax.servlet:javax.servlet-api"
        testImplementation "org.springframework:spring-core"
        testImplementation "org.springframework:spring-web"
        testImplementation "org.springframework:spring-webmvc"
    }
}

project("hawaii-logging") {

    description = "Hawaii Logging"

    dependencies {
        api project(":hawaii-core")
        implementation "javax.servlet:javax.servlet-api"
        implementation "org.springframework:spring-web"
        implementation "org.springframework.boot:spring-boot"
        implementation "org.springframework.boot:spring-boot-autoconfigure"
        compileOnly "org.apache.cxf:cxf-rt-features-logging:${apacheCxfVersion}"
        compileOnly "org.aspectj:aspectjrt"
        compileOnly "ch.qos.logback:logback-core:${logbackVersion}"
        compileOnly "ch.qos.logback:logback-classic:${logbackVersion}"
        compileOnly "org.springframework.security:spring-security-core"
        compileOnly "org.springframework:spring-webmvc"
        compileOnly "net.ttddyy:datasource-proxy:${dataSourceProxyVersion}"
        compileOnly "io.opentracing.contrib:opentracing-api-extensions:0.6.0"
        compileOnly "io.opentelemetry:opentelemetry-api:0.12.0"
        compileOnly "com.nimbusds:nimbus-jose-jwt:9.2"
        testImplementation "org.apache.commons:commons-text:${commonsTextVersion}"
        testImplementation "org.powermock:powermock-api-mockito2:${powerMockVersion}"
        testImplementation "org.powermock:powermock-module-junit4:${powerMockVersion}"
        testImplementation "org.springframework.security:spring-security-core"
    }
}

project("hawaii-security") {

    description = "Hawaii Security"

    dependencies {
        implementation project(":hawaii-cache")
        implementation project(":hawaii-core")
        compileOnly "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:${springBootVersion}"
0    }
}

project("hawaii-starter") {

    description = "Hawaii Starter"

    dependencies {
        api project(":hawaii-autoconfigure")
        api project(":hawaii-core")
        implementation "org.springframework.boot:spring-boot-starter"
        implementation "org.springframework.boot:spring-boot-starter-aop"
    }
}

project("hawaii-starter-async") {

    description = "Hawaii Starter Async"

    dependencies {
        api project(":hawaii-starter")
        api project(":hawaii-async")
    }
}

project("hawaii-starter-cache") {

    description = "Hawaii Starter Cache"

    dependencies {
        api project(":hawaii-starter")
        api project(":hawaii-cache")
    }
}

project("hawaii-starter-logging") {

    description = "Hawaii Starter Logging"

    dependencies {
        api project(":hawaii-starter")
        api project(":hawaii-logging")
    }
}

project("hawaii-starter-rest") {

    description = "Hawaii Starter Rest"

    dependencies {
        api project(":hawaii-starter")
        api "org.json:json:${jsonVersion}"
        implementation "com.fasterxml.jackson.core:jackson-databind"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-json-org"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    }
}

project("hawaii-starter-test") {

    description = "Hawaii Starter Test"

    dependencies {
        api project(":hawaii-test")
    }
}

project("hawaii-test") {

    description = "Hawaii Test"

    dependencies {
        api project(":hawaii-core")
        implementation "com.jayway.jsonpath:json-path"
        implementation "com.jayway.jsonpath:json-path-assert"
        implementation "junit:junit"
        implementation "org.mockito:mockito-core"
        implementation "org.skyscreamer:jsonassert"
        implementation "org.springframework:spring-beans"
        implementation "org.springframework:spring-core"
        implementation "org.springframework:spring-test"
        implementation "org.springframework:spring-web"
        compileOnly "com.google.code.findbugs:annotations:${findbugsAnnotationsVersion}"
    }
}

configure(rootProject) {

    description = "Hawaii Framework"

    apply plugin: "org.asciidoctor.convert"

    // Don't publish the default jar for the root project.
    configurations.archives.artifacts.clear()

    dependencies {
        "asciidoctor"("org.jruby:jruby-complete:${jrubyVersion}")
    }

    asciidoctorj {
        // We can change the AsciidoctorJ dependency version.
        version = asciidoctorjVersion
    }

    asciidoctor {

        requires = ["asciidoctor-diagram"]

        // backends = ["html5", "pdf"]
        backends = ["html5"] // TODO: pdf backend currently doesn't work on Java 11

        // If can be removed when jruby 9.2.1.0 is used https://github.com/jruby/jruby/issues/5204
        if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {
            backends.removeIf { it == "pdf" }
        }

        sourceDir project.file("src/asciidoc")

        attributes "revnumber": project.version,
                "spring-version": "${dependencyManagement.importedProperties['spring.version']}",
                "spring-boot-version": "${dependencyManagement.importedProperties['spring-boot.version']}"

        // Split resources in 'real' images and generated resources (by asciidoctor-diagram)
        // so we can ignore the generated once. Bundle in a single resources directory because
        // the resources method takes a single CopySpec, which only has one target directory.
        resources {
            from(project.file("src/asciidoc/resources")) {
                include "**/*.svg"
                include "**/*.png"
            }
            into "./resources"
        }
    }

    task api(type: Javadoc) {
        group = "Documentation"
        description = "Generates aggregated Javadoc API documentation."
        title = "${rootProject.description} ${version} API"

        dependsOn {
            coreprojects.collect {
                it.tasks.getByName("jar")
            }
        }
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.overview = "src/api/overview.html"
        options.splitIndex = true
        options.links(javadocLinks)
        options.addBooleanOption("html5", true)
        options.addStringOption("Xdoclint:none", "-quiet")

        source coreprojects.collect { project ->
            project.sourceSets.main.allJava
        }

        classpath += files(coreprojects.collect { it.sourceSets.main.compileClasspath })
        destinationDir = new File(buildDir, "api")
        maxMemory = "1024m"
    }

    task docs(dependsOn: ["api", "asciidoctor"]) {
        group = "Documentation"
        description = "Generates aggregated Javadoc API and reference documentation."
    }

    task docsZip(type: Zip, dependsOn: "docs") {
        group = "Distribution"
        baseName = "hawaii-framework"
        classifier = "docs"
        description = "Builds -${classifier} archive containing Javadoc API and reference documentation."

        from(api) {
            into "api"
        }

        from(asciidoctor) {
            include "html5/**/*.*"
            include "pdf/index.pdf"
            into "reference"
            rename { filename ->
                filename.replace "index", "reference-documentation"
            }
        }
    }

    task distZip(type: Zip, dependsOn: "docsZip") {
        group = "Distribution"
        baseName = "hawaii-framework"
        classifier = "dist"
        description = "Builds -${classifier} archive containing all jars and documentation."

        from("src/dist") {
            include "license.txt"
            include "notice.txt"
            expand(copyright: new Date().format("yyyy"), version: project.version)
        }

        from(zipTree(docsZip.archivePath)) {
            into "docs"
        }

        coreprojects.each { subproject ->
            into("libs") {
                from subproject.jar
                if (subproject.tasks.findByPath("sourcesJar")) {
                    from subproject.sourcesJar
                }
                if (subproject.tasks.findByPath("javadocJar")) {
                    from subproject.javadocJar
                }
            }
        }
    }

    artifacts {
        archives docsZip
        archives distZip
    }
}
