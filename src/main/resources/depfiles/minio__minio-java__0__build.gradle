/*
 * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2015,2016 MinIO, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/***************************/
/* gradleVersion = '6.6.1' */
/***************************/

plugins {
  id "com.github.johnrengelman.shadow" version "6.1.0"
  id "com.github.spotbugs" version "4.5.0"
  id "io.codearte.nexus-staging" version "0.22.0"
  id "de.marcphilipp.nexus-publish" version "0.4.0"
  id "com.diffplug.spotless" version "5.3.0"
}

/*
 * Root project definitions
 */
apply plugin: 'io.codearte.nexus-staging'
apply plugin: "de.marcphilipp.nexus-publish"

allprojects {
    group = 'io.minio'
    version = '8.2.2'
    if (!project.hasProperty('release')) {
        version += '-DEV'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.spotbugs'
    apply plugin: "com.diffplug.spotless"

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile "com.carrotsearch.thirdparty:simple-xml-safe:2.7.1"
        compile "com.google.guava:guava:30.0-jre"
        compile "com.squareup.okhttp3:okhttp:4.8.1"
        compile "com.fasterxml.jackson.core:jackson-annotations:2.11.2"
        compile "com.fasterxml.jackson.core:jackson-core:2.11.2"
        compile "com.fasterxml.jackson.core:jackson-databind:2.11.2"
        compileOnly "com.github.spotbugs:spotbugs-annotations:4.1.2"

        testCompile "com.squareup.okhttp3:mockwebserver:4.8.1"
        testCompile "junit:junit:4.13"
    }

    configurations.all() {
        resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib:1.3.72"
        resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib-common:1.3.72"
    }

    [compileJava, compileTestJava].each() {
        it.options.fork = true
        it.options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation", "-Xlint:-options", "-Werror"]
        it.options.encoding = "UTF-8"
    }

    spotbugs {
        effort = "max"
        reportLevel = "low"
        excludeFilter = file("$rootDir/spotbugs-filter.xml")
    }

    spotbugsMain {
        reports {
            html {
                enabled = true
                destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }

    test {
        // Show stacktrace on test failure than opening in web browser.
        testLogging {
            exceptionFormat = 'full'
            showExceptions true
            showCauses true
            showStackTraces true
        }
    }

    task localeTest(type: Test) {
        description = "Runs tests with locale de.DE"
        System.setProperty('user.language', 'de')
        System.setProperty('user.country', 'DE')
        systemProperties = System.properties
        dependsOn test
    }

    check.dependsOn localeTest

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    spotless {
        java {
            target '**/*.java'
            importOrder 'edu', 'com', 'io', 'java', 'javax', 'org', ''
            removeUnusedImports()
            googleJavaFormat()
        }
        groovyGradle {
            target '*.gradle'
        }
    }
}

project(':api') {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: "de.marcphilipp.nexus-publish"

    archivesBaseName = 'minio'

    configurations.all {
        resolutionStrategy {
            force 'com.fasterxml.jackson.core:jackson-annotations:2.9.6'
            failOnVersionConflict()
        }
    }

    jar {
        manifest {
            attributes('Implementation-Title': archivesBaseName,
            'Implementation-Version': version,
            'Built-By': 'MinIO, inc',
            'Built-JDK': System.getProperty('java.version'),
            'Source-Compatibility': sourceCompatibility,
            'Target-Compatibility': targetCompatibility)
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc.options {
        encoding = 'UTF-8'
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            links 'https://docs.oracle.com/javase/8/docs/api/'
        } else {
            links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
        }
    }

    // Disable JavaDoc doclint on Java 8. It's annoying.
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        archives javadocJar, sourcesJar, shadowJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId archivesBaseName
                from components.java
                pom {
                    name = 'minio'
                    packaging = 'jar'
                    description = 'MinIO Java SDK for Amazon S3 Compatible Cloud Storage'
                    url = 'https://github.com/minio/minio-java'
                    inceptionYear = '2015'

                    scm {
                        connection = 'scm:git:git@github.com:minio/minio-java.git'
                        developerConnection = 'scm:git:git@github.com:minio/minio-java.git'
                        url = 'http://github.com/minio/minio-java'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'minio'
                            name = 'MinIO Inc.'
                            email = 'dev@min.io'
                        }
                    }
                }
            }
        }
    }

    signing {
        if (project.properties.containsKey('signing.keyId')) {
            sign publishing.publications.mavenJava
        }
    }

    nexusStaging {
        packageGroup = group
        stagingProfileId = '9b746c9f8abc1'
        username = project.properties['nexusUsername']
        password = project.properties['nexusPassword']
    }

    nexusPublishing {
        repositories {
            sonatype {
                username = project.properties['nexusUsername']
                password = project.properties['nexusPassword']
            }
        }
    }
}

project(':examples') {
    dependencies {
        compile "me.tongfei:progressbar:0.5.3"
        compile project(':api')
    }

    sourceSets {
        main {
            java {
                srcDirs = ["$rootDir/examples"]
            }
        }
    }
}

import org.gradle.internal.os.OperatingSystem;

project(':functional') {
    dependencies {
        compile "junit:junit:4.13"
        compile project(':api')
    }

    sourceSets {
        main {
            java {
                srcDirs = ["$rootDir/functional"]
            }
        }
    }

    task runFunctionalTest(type:JavaExec) {
        main = 'FunctionalTest'
        classpath = sourceSets.main.runtimeClasspath

        ext.endpoint = 'https://play.min.io:9000'
        if (rootProject.hasProperty('endpoint')) {
            ext.endpoint = rootProject.properties['endpoint']
        }

        ext.accessKey = 'Q3AM3UQ867SPQQA43P2F'
        if (project.properties.containsKey('accessKey')) {
            ext.accessKey = rootProject.properties['accessKey']
        }

        ext.secretKey = 'zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG'
        if (project.properties.containsKey('secretKey')) {
            ext.secretKey = rootProject.properties['secretKey']
        }

        ext.region = 'us-east-1'
        if (project.properties.containsKey('region')) {
            ext.region = rootProject.properties['region']
        }

        maxHeapSize = "4096m"
        jvmArgs "-Xms256m"
        if (rootProject.hasProperty('endpoint') || OperatingSystem.current().isWindows()) {
            args = [ext.endpoint, ext.accessKey, ext.secretKey, ext.region]
        }
    }
}
