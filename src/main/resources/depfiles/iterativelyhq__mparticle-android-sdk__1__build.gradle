ext {
    kitDescription = 'Core mParticle SDK supporting only server-side integrations.'
}

apply plugin: 'com.android.library'
apply from: '../scripts/maven.gradle'
apply plugin: 'kotlin-android'

def javaVersion = JavaVersion.VERSION_1_6

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'
    packagingOptions {
        exclude 'META-INF/LICENSE'
    }
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    String url = '\"\"'
    String identityUrl = '\"\"'
    String configurationUrl = '\"\"'
    try {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        if (properties.stringPropertyNames().contains('mp.url')) {
            url = properties.getProperty('mp.url')
        }
        if (properties.stringPropertyNames().contains('mp.identityurl')) {
            identityUrl = properties.getProperty('mp.identityurl')
        }
        if (properties.stringPropertyNames().contains('mp.configurl')) {
            configurationUrl = properties.getProperty('mp.configurl')
        }
    } catch (Exception e) {

    }

    def gitHash = 'git rev-parse --short HEAD'.execute().text.trim()

    if (gitHash == null || gitHash.length() == 0) {
        gitHash = System.getenv('MP_GIT_SHA').substring(0, 7)
    }

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 30
        versionName project.version.toString().replace('-SNAPSHOT', '')
        versionCode Integer.parseInt(new Date().format('yyyyMMdd'))

        buildConfigField 'String', 'GIT_SHA', "\"$gitHash\""
        buildConfigField 'String', 'MP_URL', url
        buildConfigField 'String', 'MP_IDENTITY_URL', identityUrl
        buildConfigField 'String', 'MP_CONFIG_URL', configurationUrl
        buildConfigField 'Boolean', 'MP_DEBUG', 'false'
        buildConfigField 'String', 'SCHEME', '\"https\"'

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        if (useOrchestrator()) {
            testInstrumentationRunnerArgument 'annotation', 'com.mparticle.OrchestratorOnly'
        } else {
            testInstrumentationRunnerArgument 'notAnnotation', 'com.mparticle.OrchestratorOnly'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            //multidex is required for instrumented test builds
            multiDexEnabled true
            buildConfigField 'Boolean', 'MP_DEBUG', 'true'
        }
        release {
            minifyEnabled true
            proguardFiles 'proguard.pro'
            consumerProguardFiles 'consumer-proguard.pro'
            //buildConfigField 'Boolean', 'MP_DEBUG', 'true'
        }
    }
    testOptions {
        if (useOrchestrator()) {
            execution 'ANDROID_TEST_ORCHESTRATOR'
            reportDir buildDir.absolutePath + '/orchestrator-reports'
            resultsDir buildDir.absolutePath + '/orchestrator-results'
        }
    }
    lintOptions {
        abortOnError false
        enable 'UnknownNullness'
        lintConfig file('lint.xml')
    }
    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}


task coreSdkJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        source += 'build/generated/source/buildConfig/release/'
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        title = 'mParticle Android SDK API Reference'
        failOnError false
        exclude {
            String filePath = it.toString()
            filePath.contains('/com/mparticle/internal/') ||
                    filePath.contains('/com/mparticle/kits/')
        }
        getOptions().setNoTimestamp(true)
}

dependencies {
    compileOnly 'com.google.android.gms:play-services-ads:10.2.1'
    compileOnly 'com.google.firebase:firebase-messaging:[9.4.0, )'
    compileOnly 'com.android.support:support-v4:27.1.1'
    compileOnly 'com.android.installreferrer:installreferrer:[1.0, )'
    compileOnly 'com.google.android.instantapps:instantapps:[1.0, )'

    // Iteratively
    implementation 'ly.iterative.itly:sdk-android:1.2.0'

    //the junit tests seem to explicitly need this dependency while
    //working in Android studio, but from the command line it's not necessary
    testImplementation project(':android-core')
    testImplementation 'junit:junit:4.12'
    testImplementation files('libs/java-json.jar')
    testImplementation 'org.powermock:powermock-module-junit4:2.0.2'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.2'
    testImplementation 'org.powermock:powermock-core:2.0.2'
    testImplementation 'com.android.support:support-v4:27.1.1'
    testImplementation project(':testutils')
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    androidTestImplementation project(':testutils')
    if (useOrchestrator()) {
        androidTestUtil 'com.android.support.test:orchestrator:1.0.2'
    }
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

configurations {
    lintJar
}

dependencies {
    lintJar project(path: ':tooling:custom-lint-rules', configuration:'lintBuild')
}

//copy the lint.jar file from custom-lint-rules, to where it needs to be for release
task copyLintJar(type:Copy) {
    from(configurations.lintJar) {
        rename {
            String fileName ->
                'lint.jar'
        }
    }
    into 'build/intermediates/lint_jar/global/prepareLintJar'
    outputs.upToDateWhen { false }
}


//trigger the secondary core build, which will be consumed by the custom-lint module
afterEvaluate {
    android.buildTypes.all { theBuildType ->
        if (theBuildType.name != 'lintBuild') {
            //build the Linting jar at closest time to when gradle naturally does it when using lintChecks
            tasks.getByName("bundle${theBuildType.name.capitalize()}Aar").dependsOn copyLintJar
        }
        android.sourceSets.all { sourceSet ->
            println(sourceSet.name)
            if (!sourceSet.name.startsWith("test") && !sourceSet.name.startsWith("androidTest")) {
                sourceSet.kotlin.setSrcDirs([])
            }
        }
    }
}

boolean useOrchestrator() {
    return project.hasProperty('orchestrator') ? project.property('orchestrator') : false
}