group "ai.djl.sentencepiece"

dependencies {
    api project(":api")

    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }

    testImplementation project(":mxnet:mxnet-engine")
    testImplementation "ai.djl.mxnet:mxnet-native-auto:${mxnet_version}"
    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
}

processResources {
    outputs.dir file("${project.buildDir}/classes/java/main/native/lib")
    doLast {
        def url = "https://publish.djl.ai/sentencepiece-${sentencepiece_version}/jnilib/${djl_version}"
        def files = [
                "linux-x86_64": "libsentencepiece_native.so",
                "osx-x86_64"  : "libsentencepiece_native.dylib"
        ]
        def jniDir = "${project.buildDir}/jnilib"
        files.each { entry ->
            def downloadPath = new URL("${url}/${entry.key}/${entry.value}")
            def file = file("${jniDir}/${entry.key}/${entry.value}")
            if (!file.exists()) {
                project.logger.lifecycle("${downloadPath}")
                file.getParentFile().mkdirs()
                downloadPath.withInputStream { i -> file.withOutputStream { it << i } }
            }
        }
        def classDir = "${project.buildDir}/classes/java/main/native/lib"
        file(classDir).mkdirs()
        copy {
            from jniDir
            into classDir
        }
        // write properties
        def versionName = "${sentencepiece_version}"
        boolean isRelease = project.hasProperty("release") || project.hasProperty("staging")
        if (!isRelease) {
            versionName += String.format("-%s", new Date().format('yyyyMMdd'))
        }
        def propFile = file("${classDir}/sentencepiece.properties")
        propFile.text = "version=${versionName}\n"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "DJL NLP utilities for SentencePiece"
                description = "Deep Java Library (DJL) NLP utilities for SentencePiece"
                url = "http://www.djl.ai/sentencepiece/${project.name}"
            }
        }
    }
}

apply from: file("${rootProject.projectDir}/tools/gradle/cpp-formatter.gradle")

task compileJNI {
    doFirst {
        if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("mac")
                || System.properties['os.name'].toLowerCase(Locale.ROOT).contains("linux")) {
            exec {
                commandLine 'bash', 'build.sh'
            }
            def jniDir = "${project.buildDir}/jnilib"
            // for ci to upload to S3
            def ciDir = "${project.projectDir}/jnilib/${djl_version}"
            copy {
                from jniDir
                into ciDir
            }
        } else {
            throw new IllegalStateException("Unknown Architecture " + System.properties['os.name'])
        }
    }
}
