plugins {
    id 'maven-publish'
    id 'signing'
}

group "ai.djl.tensorflow"

boolean isRelease = project.hasProperty("release") || project.hasProperty("staging")
version = "${tensorflow_version}" + (isRelease ? "" : "-SNAPSHOT")

configurations {
    download
}

dependencies {
    download "org.tensorflow:tensorflow-core-api:0.3.1:linux-x86_64-gpu"
    download "org.tensorflow:tensorflow-core-api:0.3.1:linux-x86_64"
    download "org.tensorflow:tensorflow-core-api:0.3.1:macosx-x86_64"
    download "org.tensorflow:tensorflow-core-api:0.3.1:windows-x86_64"
    download "org.tensorflow:tensorflow-core-api:0.3.1:windows-x86_64-gpu"
    /*
    download("org.bytedeco:mkl-dnn:${mkl_dnn_version}:macosx-x86_64") {
        exclude group: "org.bytedeco", module: "javacpp"
    }
    download("org.bytedeco:mkl-dnn:${mkl_dnn_version}:linux-x86_64") {
        exclude group: "org.bytedeco", module: "javacpp"
    }
    download("org.bytedeco:mkl-dnn:${mkl_dnn_version}:windows-x86_64") {
        exclude group: "org.bytedeco", module: "javacpp"
    }*/
}

task uploadTensorflowNativeLibs() {
    doLast {
        delete "${buildDir}/download"
        delete "${buildDir}/native"

        copy {
            from configurations.download
            into "${buildDir}/download"
        }

        fileTree("${buildDir}/download").each { f ->
            copy {
                from(zipTree(f)) {
                    exclude "**/pom.xml"
                    exclude "**/*.properties"
                    exclude "**/*.h"
                    exclude "**/*.hpp"
                    exclude "**/*.cmake"
                    exclude "META-INF/**"
                }
                into "${buildDir}/native"
                includeEmptyDirs false
            }
        }

        exec {
            commandLine "sh", "-c", "find ${buildDir}/native -type f | xargs gzip"
        }

        def tfUnzipDir = "${buildDir}/native/org/tensorflow/internal/c_api"

        ant.move(file: "${tfUnzipDir}/linux-x86_64/", toFile: "${buildDir}/native/linux/cpu/")
        ant.move(file: "${tfUnzipDir}/linux-x86_64-gpu/", toFile: "${buildDir}/native/linux/cu110/")
        ant.move(file: "${tfUnzipDir}/macosx-x86_64/", toFile: "${buildDir}/native/osx/cpu/")
        ant.move(file: "${tfUnzipDir}/windows-x86_64/", toFile: "${buildDir}/native/win/cpu/")
        ant.move(file: "${tfUnzipDir}/windows-x86_64-gpu/", toFile: "${buildDir}/native/win/cu110/")

        def f = new File("${buildDir}/native/files.txt")
        def uploadDirs = [
                "${buildDir}/native/linux/cpu/",
                "${buildDir}/native/linux/cu110/",
                "${buildDir}/native/osx/cpu/",
                "${buildDir}/native/win/cpu/",
                "${buildDir}/native/win/cu110/"
        ]
        uploadDirs.each { item ->
            fileTree(item).files.name.each {
                def out = item - "${buildDir}/native/"
                f << out + it
                f << "\n"
            }
        }

        delete("${buildDir}/native/org/")
        delete("${buildDir}/native/com/")
        delete("${buildDir}/native/google/")

        exec {
            commandLine "aws", "s3", "sync", "${buildDir}/native/", "s3://djl-ai/publish/tensorflow-${tensorflow_version}/"
        }
    }
}

jar {
    // this line is to enforce gradle to build the jar
    // otherwise it don't generate the placeholder jar at times
    // when there is no java code inside src/main
    outputs.dir file("build/libs")
    doFirst {
        def dir = file("${project.buildDir}/classes/java/main/native/lib")
        dir.mkdirs()
        def propFile = new File(dir, "tensorflow.properties")
        def versionName = project.version
        if (!isRelease) {
            versionName += String.format("-%s", new Date().format('yyyyMMdd'))
        }
        propFile.text = "placeholder=true\nversion=${versionName}\n"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

project.tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

signing {
    required(project.hasProperty("staging") || project.hasProperty("snapshot"))
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

def BINARY_ROOT = "${project.buildDir}/download"
def flavorNames = file(BINARY_ROOT).list() ?: []
flavorNames.each { flavor ->

    def platformNames = file("${BINARY_ROOT}/${flavor}").list() ?: []

    def artifactsNames = []

    platformNames.each { osName ->
        tasks.create(name: "${flavor}-${osName}Jar", type: Jar) {
            doFirst {
                def propFile = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/tensorflow.properties")
                propFile.delete()
                def dsStore = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/.DS_Store")
                dsStore.delete()

                def versionName = String.format("${version}-%s", new Date().format('yyyyMMdd'))
                def dir = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib")
                def sb = new StringBuilder()
                sb.append("version=${versionName}\nclassifier=${flavor}-${osName}-x86_64\nlibraries=")
                def first = true
                for (String name : dir.list().sort()) {
                    if (first) {
                        first = false
                    } else {
                        sb.append(',')
                    }
                    sb.append(name)
                }
                propFile.text = sb.toString()

                from file("src/main/resources")
            }
            from file("${BINARY_ROOT}/${flavor}/${osName}")
            archiveClassifier = "${osName}-x86_64"

            manifest {
                attributes("Automatic-Module-Name": "ai.djl.tensorflow_native_${flavor}_${osName}")
            }
        }
        artifactsNames.add(tasks["${flavor}-${osName}Jar"])
    }

    // Only publish if the project directory equals the current directory
    // This means that publishing from the main project does not publish the native jars
    // and the native jars have to be published separately
    if (project.getProjectDir().toString() == System.getProperty("user.dir")) {
        publishing.publications.create("${flavor}", MavenPublication) {
            artifactId "tensorflow-native-${flavor}"
            from components.java
            artifacts = artifactsNames
            artifact jar
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = "DJL release for TensorFlow native binaries"
                description = "Deep Java Library (DJL) provided TensorFlow native library binary distribution"
                url = "http://www.djl.ai/tensorflow/${project.name}"
                packaging = "jar"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                scm {
                    connection = "scm:git:git@github.com:deepjavalibrary/djl.git"
                    developerConnection = "scm:git:git@github.com:deepjavalibrary/djl.git"
                    url = "https://github.com/deepjavalibrary/djl"
                    tag = "HEAD"
                }

                developers {
                    developer {
                        name = "DJL.AI Team"
                        email = "djl-dev@amazon.com"
                        organization = "Amazon AI"
                        organizationUrl = "https://amazon.com"
                    }
                }
            }
        }
    }
}

publishing.repositories {
    maven {
        if (project.hasProperty("snapshot")) {
            name = "snapshot"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else if (project.hasProperty("staging")) {
            name = "staging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else {
            name = "local"
            url = "build/repo"
        }
    }
}

import java.util.zip.GZIPInputStream

task downloadTensorflowNativeLib() {
    doLast {
        def url = "https://publish.djl.ai/tensorflow-${tensorflow_version}"
        def files = [
                "linux/cpu/libjnitensorflow.so.gz"                          : "cpu/linux/native/lib/libjnitensorflow.so",
                "linux/cpu/libtensorflow_cc.so.2.gz"                        : "cpu/linux/native/lib/libtensorflow_cc.so.2",
                "linux/cpu/libtensorflow_framework.so.2.gz"                 : "cpu/linux/native/lib/libtensorflow_framework.so.2",
                "linux/cpu/LICENSE.gz"                                      : "cpu/linux/META-INF/LICENSE",
                "linux/cpu/THIRD_PARTY_TF_JNI_LICENSES.gz"                  : "cpu/linux/META-INF/THIRD_PARTY_TF_JNI_LICENSES",
                "linux/cu110/libjnitensorflow.so.gz"                        : "cu110/linux/native/lib/libjnitensorflow.so",
                "linux/cu110/libtensorflow_cc.so.2.gz"                      :  "cu110/linux/native/lib/libtensorflow_cc.so.2",
                "linux/cu110/libtensorflow_framework.so.2.gz"               : "cu110/linux/native/lib/libtensorflow_framework.so.2",
                "linux/cu110/LICENSE.gz"                                    : "cu110/linux/META-INF/LICENSE",
                "linux/cu110/THIRD_PARTY_TF_JNI_LICENSES.gz"                : "cu110/linux/META-INF/THIRD_PARTY_TF_JNI_LICENSES",
                "osx/cpu/libjnitensorflow.dylib.gz"                         : "cpu/osx/native/lib/libjnitensorflow.dylib",
                "osx/cpu/libtensorflow_cc.2.dylib.gz"                       : "cpu/osx/native/lib/libtensorflow_cc.2.dylib",
                "osx/cpu/libtensorflow_framework.2.dylib.gz"                : "cpu/osx/native/lib/libtensorflow_framework.2.dylib",
                "osx/cpu/LICENSE.gz"                                        : "cpu/osx/META-INF/LICENSE",
                "osx/cpu/THIRD_PARTY_TF_JNI_LICENSES.gz"                    : "cpu/osx/META-INF/THIRD_PARTY_TF_JNI_LICENSES",
                "win/cpu/api-ms-win-core-console-l1-1-0.dll.gz"             : "cpu/win/native/lib/api-ms-win-core-console-l1-1-0.dll",
                "win/cpu/api-ms-win-core-datetime-l1-1-0.dll.gz"            : "cpu/win/native/lib/api-ms-win-core-datetime-l1-1-0.dll",
                "win/cpu/api-ms-win-core-debug-l1-1-0.dll.gz"               : "cpu/win/native/lib/api-ms-win-core-debug-l1-1-0.dll",
                "win/cpu/api-ms-win-core-errorhandling-l1-1-0.dll.gz"       : "cpu/win/native/lib/api-ms-win-core-errorhandling-l1-1-0.dll",
                "win/cpu/api-ms-win-core-file-l1-1-0.dll.gz"                : "cpu/win/native/lib/api-ms-win-core-file-l1-1-0.dll",
                "win/cpu/api-ms-win-core-file-l1-2-0.dll.gz"                : "cpu/win/native/lib/api-ms-win-core-file-l1-2-0.dll",
                "win/cpu/api-ms-win-core-file-l2-1-0.dll.gz"                : "cpu/win/native/lib/api-ms-win-core-file-l2-1-0.dll",
                "win/cpu/api-ms-win-core-handle-l1-1-0.dll.gz"              : "cpu/win/native/lib/api-ms-win-core-handle-l1-1-0.dll",
                "win/cpu/api-ms-win-core-heap-l1-1-0.dll.gz"                : "cpu/win/native/lib/api-ms-win-core-heap-l1-1-0.dll",
                "win/cpu/api-ms-win-core-interlocked-l1-1-0.dll.gz"         : "cpu/win/native/lib/api-ms-win-core-interlocked-l1-1-0.dll",
                "win/cpu/api-ms-win-core-libraryloader-l1-1-0.dll.gz"       : "cpu/win/native/lib/api-ms-win-core-libraryloader-l1-1-0.dll",
                "win/cpu/api-ms-win-core-localization-l1-2-0.dll.gz"        : "cpu/win/native/lib/api-ms-win-core-localization-l1-2-0.dll",
                "win/cpu/api-ms-win-core-memory-l1-1-0.dll.gz"              : "cpu/win/native/lib/api-ms-win-core-memory-l1-1-0.dll",
                "win/cpu/api-ms-win-core-namedpipe-l1-1-0.dll.gz"           : "cpu/win/native/lib/api-ms-win-core-namedpipe-l1-1-0.dll",
                "win/cpu/api-ms-win-core-processenvironment-l1-1-0.dll.gz"  : "cpu/win/native/lib/api-ms-win-core-processenvironment-l1-1-0.dll",
                "win/cpu/api-ms-win-core-processthreads-l1-1-0.dll.gz"      : "cpu/win/native/lib/api-ms-win-core-processthreads-l1-1-0.dll",
                "win/cpu/api-ms-win-core-processthreads-l1-1-1.dll.gz"      : "cpu/win/native/lib/api-ms-win-core-processthreads-l1-1-1.dll",
                "win/cpu/api-ms-win-core-profile-l1-1-0.dll.gz"             : "cpu/win/native/lib/api-ms-win-core-profile-l1-1-0.dll",
                "win/cpu/api-ms-win-core-rtlsupport-l1-1-0.dll.gz"          : "cpu/win/native/lib/api-ms-win-core-rtlsupport-l1-1-0.dll",
                "win/cpu/api-ms-win-core-string-l1-1-0.dll.gz"              : "cpu/win/native/lib/api-ms-win-core-string-l1-1-0.dll",
                "win/cpu/api-ms-win-core-synch-l1-1-0.dll.gz"               : "cpu/win/native/lib/api-ms-win-core-synch-l1-1-0.dll",
                "win/cpu/api-ms-win-core-synch-l1-2-0.dll.gz"               : "cpu/win/native/lib/api-ms-win-core-synch-l1-2-0.dll",
                "win/cpu/api-ms-win-core-sysinfo-l1-1-0.dll.gz"             : "cpu/win/native/lib/api-ms-win-core-sysinfo-l1-1-0.dll",
                "win/cpu/api-ms-win-core-timezone-l1-1-0.dll.gz"            : "cpu/win/native/lib/api-ms-win-core-timezone-l1-1-0.dll",
                "win/cpu/api-ms-win-core-util-l1-1-0.dll.gz"                : "cpu/win/native/lib/api-ms-win-core-util-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-convert-l1-1-0.dll.gz"              : "cpu/win/native/lib/api-ms-win-crt-convert-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-environment-l1-1-0.dll.gz"          : "cpu/win/native/lib/api-ms-win-crt-environment-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-filesystem-l1-1-0.dll.gz"           : "cpu/win/native/lib/api-ms-win-crt-filesystem-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-heap-l1-1-0.dll.gz"                 : "cpu/win/native/lib/api-ms-win-crt-heap-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-locale-l1-1-0.dll.gz"               : "cpu/win/native/lib/api-ms-win-crt-locale-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-math-l1-1-0.dll.gz"                 : "cpu/win/native/lib/api-ms-win-crt-math-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-multibyte-l1-1-0.dll.gz"            : "cpu/win/native/lib/api-ms-win-crt-multibyte-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-runtime-l1-1-0.dll.gz"              : "cpu/win/native/lib/api-ms-win-crt-runtime-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-stdio-l1-1-0.dll.gz"                : "cpu/win/native/lib/api-ms-win-crt-stdio-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-string-l1-1-0.dll.gz"               : "cpu/win/native/lib/api-ms-win-crt-string-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-time-l1-1-0.dll.gz"                 : "cpu/win/native/lib/api-ms-win-crt-time-l1-1-0.dll",
                "win/cpu/api-ms-win-crt-utility-l1-1-0.dll.gz"              : "cpu/win/native/lib/api-ms-win-crt-utility-l1-1-0.dll",
                "win/cpu/concrt140.dll.gz"                                  : "cpu/win/native/lib/concrt140.dll",
                "win/cpu/jnitensorflow.dll.gz"                              : "cpu/win/native/lib/jnitensorflow.dll",
                "win/cpu/libiomp5md.dll.gz"                                 : "cpu/win/native/lib/libiomp5md.dll.gz",
                "win/cpu/LICENSE.gz"                                        : "cpu/win/META-INF/LICENSE",
                "win/cpu/msvcp140.dll.gz"                                   : "cpu/win/native/lib/msvcp140.dll",
                "win/cpu/tensorflow_cc.dll.gz"                              : "cpu/win/native/lib/tensorflow_cc.dll",
                "win/cpu/THIRD_PARTY_TF_JNI_LICENSES.gz"                    : "cpu/win/META-INF/THIRD_PARTY_TF_JNI_LICENSES",
                "win/cpu/ucrtbase.dll.gz"                                   : "cpu/win/native/lib/ucrtbase.dll",
                "win/cpu/vcomp140.dll.gz"                                   : "cpu/win/native/lib/vcomp140.dll",
                "win/cpu/vcruntime140_1.dll.gz"                             : "cpu/win/native/lib/vcruntime140_1.dll",
                "win/cpu/vcruntime140.dll.gz"                               : "cpu/win/native/lib/vcruntime140.dll",
                "win/cu110/api-ms-win-core-console-l1-1-0.dll.gz"           : "cu110/win/native/lib/api-ms-win-core-console-l1-1-0.dll",
                "win/cu110/api-ms-win-core-datetime-l1-1-0.dll.gz"          : "cu110/win/native/lib/api-ms-win-core-datetime-l1-1-0.dll",
                "win/cu110/api-ms-win-core-debug-l1-1-0.dll.gz"             : "cu110/win/native/lib/api-ms-win-core-debug-l1-1-0.dll",
                "win/cu110/api-ms-win-core-errorhandling-l1-1-0.dll.gz"     : "cu110/win/native/lib/api-ms-win-core-errorhandling-l1-1-0.dll",
                "win/cu110/api-ms-win-core-file-l1-1-0.dll.gz"              : "cu110/win/native/lib/api-ms-win-core-file-l1-1-0.dll",
                "win/cu110/api-ms-win-core-file-l1-2-0.dll.gz"              : "cu110/win/native/lib/api-ms-win-core-file-l1-2-0.dll",
                "win/cu110/api-ms-win-core-file-l2-1-0.dll.gz"              : "cu110/win/native/lib/api-ms-win-core-file-l2-1-0.dll",
                "win/cu110/api-ms-win-core-handle-l1-1-0.dll.gz"            : "cu110/win/native/lib/api-ms-win-core-handle-l1-1-0.dll",
                "win/cu110/api-ms-win-core-heap-l1-1-0.dll.gz"              : "cu110/win/native/lib/api-ms-win-core-heap-l1-1-0.dll",
                "win/cu110/api-ms-win-core-interlocked-l1-1-0.dll.gz"       : "cu110/win/native/lib/api-ms-win-core-interlocked-l1-1-0.dll",
                "win/cu110/api-ms-win-core-libraryloader-l1-1-0.dll.gz"     : "cu110/win/native/lib/api-ms-win-core-libraryloader-l1-1-0.dll",
                "win/cu110/api-ms-win-core-localization-l1-2-0.dll.gz"      : "cu110/win/native/lib/api-ms-win-core-localization-l1-2-0.dll",
                "win/cu110/api-ms-win-core-memory-l1-1-0.dll.gz"            : "cu110/win/native/lib/api-ms-win-core-memory-l1-1-0.dll",
                "win/cu110/api-ms-win-core-namedpipe-l1-1-0.dll.gz"         : "cu110/win/native/lib/api-ms-win-core-namedpipe-l1-1-0.dll",
                "win/cu110/api-ms-win-core-processenvironment-l1-1-0.dll.gz": "cu110/win/native/lib/api-ms-win-core-processenvironment-l1-1-0.dll",
                "win/cu110/api-ms-win-core-processthreads-l1-1-0.dll.gz"    : "cu110/win/native/lib/api-ms-win-core-processthreads-l1-1-0.dll",
                "win/cu110/api-ms-win-core-processthreads-l1-1-1.dll.gz"    : "cu110/win/native/lib/api-ms-win-core-processthreads-l1-1-1.dll",
                "win/cu110/api-ms-win-core-profile-l1-1-0.dll.gz"           : "cu110/win/native/lib/api-ms-win-core-profile-l1-1-0.dll",
                "win/cu110/api-ms-win-core-rtlsupport-l1-1-0.dll.gz"        : "cu110/win/native/lib/api-ms-win-core-rtlsupport-l1-1-0.dll",
                "win/cu110/api-ms-win-core-string-l1-1-0.dll.gz"            : "cu110/win/native/lib/api-ms-win-core-string-l1-1-0.dll",
                "win/cu110/api-ms-win-core-synch-l1-1-0.dll.gz"             : "cu110/win/native/lib/api-ms-win-core-synch-l1-1-0.dll",
                "win/cu110/api-ms-win-core-synch-l1-2-0.dll.gz"             : "cu110/win/native/lib/api-ms-win-core-synch-l1-2-0.dll",
                "win/cu110/api-ms-win-core-sysinfo-l1-1-0.dll.gz"           : "cu110/win/native/lib/api-ms-win-core-sysinfo-l1-1-0.dll",
                "win/cu110/api-ms-win-core-timezone-l1-1-0.dll.gz"          : "cu110/win/native/lib/api-ms-win-core-timezone-l1-1-0.dll",
                "win/cu110/api-ms-win-core-util-l1-1-0.dll.gz"              : "cu110/win/native/lib/api-ms-win-core-util-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-convert-l1-1-0.dll.gz"            : "cu110/win/native/lib/api-ms-win-crt-convert-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-environment-l1-1-0.dll.gz"        : "cu110/win/native/lib/api-ms-win-crt-environment-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-filesystem-l1-1-0.dll.gz"         : "cu110/win/native/lib/api-ms-win-crt-filesystem-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-heap-l1-1-0.dll.gz"               : "cu110/win/native/lib/api-ms-win-crt-heap-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-locale-l1-1-0.dll.gz"             : "cu110/win/native/lib/api-ms-win-crt-locale-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-math-l1-1-0.dll.gz"               : "cu110/win/native/lib/api-ms-win-crt-math-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-multibyte-l1-1-0.dll.gz"          : "cu110/win/native/lib/api-ms-win-crt-multibyte-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-runtime-l1-1-0.dll.gz"            : "cu110/win/native/lib/api-ms-win-crt-runtime-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-stdio-l1-1-0.dll.gz"              : "cu110/win/native/lib/api-ms-win-crt-stdio-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-string-l1-1-0.dll.gz"             : "cu110/win/native/lib/api-ms-win-crt-string-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-time-l1-1-0.dll.gz"               : "cu110/win/native/lib/api-ms-win-crt-time-l1-1-0.dll",
                "win/cu110/api-ms-win-crt-utility-l1-1-0.dll.gz"            : "cu110/win/native/lib/api-ms-win-crt-utility-l1-1-0.dll",
                "win/cu110/concrt140.dll.gz"                                : "cu110/win/native/lib/concrt140.dll",
                "win/cu110/jnitensorflow.dll.gz"                            : "cu110/win/native/lib/jnitensorflow.dll",
                "win/cu110/libiomp5md.dll.gz"                               : "cu110/win/native/lib/libiomp5md.dll.gz",
                "win/cu110/LICENSE.gz"                                      : "cu110/win/META-INF/LICENSE",
                "win/cu110/msvcp140.dll.gz"                                 : "cu110/win/native/lib/msvcp140.dll",
                "win/cu110/tensorflow_cc.dll.gz"                            : "cu110/win/native/lib/tensorflow_cc.dll",
                "win/cu110/THIRD_PARTY_TF_JNI_LICENSES.gz"                  : "cu110/win/META-INF/THIRD_PARTY_TF_JNI_LICENSES",
                "win/cu110/ucrtbase.dll.gz"                                 : "cu110/win/native/lib/ucrtbase.dll",
                "win/cu110/vcomp140.dll.gz"                                 : "cu110/win/native/lib/vcomp140.dll",
                "win/cu110/vcruntime140_1.dll.gz"                           : "cu110/win/native/lib/vcruntime140_1.dll",
                "win/cu110/vcruntime140.dll.gz"                             : "cu110/win/native/lib/vcruntime140.dll",
        ]

        files.each { entry ->
            project.logger.lifecycle("Downloading ${url}/${entry.key}")
            def file = new File("${BINARY_ROOT}/${entry.value}")
            file.getParentFile().mkdirs()
            new URL("${url}/${entry.key}").withInputStream { i -> file.withOutputStream { it << new GZIPInputStream(i) } }
        }

        new File("${BINARY_ROOT}/auto").mkdirs()
    }
}

if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
    tasks.getByName("spotbugsMain").enabled = false
}
