/*
 * Copyright 2014-2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'nebula.plugin-plugin' version '15.2.1'
    id 'nebula.kotlin' version '1.3.70'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id 'java-gradle-plugin'
}

description 'Pluggable and configurable linter tool for identifying and reporting on patterns of misuse or deprecations in Gradle scripts'

contacts {
    'nebula-plugins-oss@netflix.com' {
        moniker 'Nebula Plugins Maintainers'
        github 'nebula-plugins'
    }
}

configurations {
    plugin.description = 'The compile dependencies for the plugin, excluding the local dependencies to avoid problems with Shadow'
    compile.extendsFrom plugin
}

dependencies {
    compileOnly 'com.netflix.nebula:gradle-info-plugin:latest.release'
    compile 'com.netflix.nebula:nebula-gradle-interop:latest.release'
    compile 'org.apache.maven:maven-model-builder:3.+'
    plugin  'com.google.guava:guava:19.0'

    plugin('org.ow2.asm:asm:7.+') {
        version {
            reject '7.2-beta'
            because 'avoid getting prerelease versions'
        }
    }
    plugin('org.ow2.asm:asm-commons:7.+') {
        version {
            reject '7.2-beta'
            because 'avoid getting prerelease versions'
        }
    }
    plugin('org.codenarc:CodeNarc:0.25.2') {
        transitive = false
    }
    plugin 'commons-lang:commons-lang:2.6'

    plugin ('org.eclipse.jgit:org.eclipse.jgit:5.0.1.201806211838-r') {
        transitive = false
    }
    plugin 'org.eclipse.jdt:core:3.1.1'

    plugin 'org.codehaus.gpars:gpars:1.2.1'

    // these dependencies exist so we can provide a test harness
    // to proprietary rule implementations packed in other jars, but are considered provided
    plugin('org.spockframework:spock-core:1.0-groovy-2.4') { transitive = false }
    plugin('junit:junit:4.12')
    plugin('com.netflix.nebula:nebula-test:latest.release') { transitive = false }

    testImplementation gradleTestKit()
    testImplementation('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testImplementation 'org.ow2.asm:asm-util:5.2'
    testImplementation 'joda-time:joda-time:latest.release'
    testImplementation 'com.netflix.nebula:gradle-info-plugin:latest.release'
}

pluginBundle {
    website = 'https://github.com/nebula-plugins/gradle-lint-plugin'
    vcsUrl = 'https://github.com/nebula-plugins/gradle-lint-plugin.git'
    description = 'Pluggable and configurable linter tool for identifying and reporting on patterns of misuse or deprecations in Gradle scripts'

    plugins {
        dependencyLock {
            id = 'nebula.lint'
            displayName = 'Nebula Lint plugin'
            description = 'Pluggable and configurable linter tool for identifying and reporting on patterns of misuse or deprecations in Gradle scripts'
            tags = ['nebula', 'lint']
        }
    }
}

// Relocate jgit dependency not available in Maven Central
// Replaces the main artifact by removing the classifier for the shadow jar, and replacing jar with shadowJar
// Relocated dependencies are removed from the generated pom
shadowJar {
    configurations = [project.configurations.plugin]
    classifier = null
    dependencies {
        include(dependency('org.eclipse.jdt:core'))
        include(dependency('org.eclipse.jgit:org.eclipse.jgit'))
        include(dependency('commons-lang:commons-lang'))
        include(dependency('org.codenarc:CodeNarc'))
        include(dependency('org.ow2.asm:asm'))
        include(dependency('org.ow2.asm:asm-commons'))
    }
    relocate 'org.eclipse.jdt', 'com.netflix.nebula.lint.jdt'
    relocate 'org.eclipse.jgit', 'com.netflix.nebula.lint.jgit'
    relocate 'org.apache.commons.lang', 'com.netflix.nebula.lint.commons.lang'
    relocate 'org.codenarc', 'com.netflix.nebula.lint.org.codenarc'
    relocate 'org.objectweb.asm', 'com.netflix.nebula.lint.org.objectweb.asm'
    relocate 'org.objectweb.asm.commons', 'com.netflix.nebula.lint.org.objectweb.asm.commons'

    // powerassert is packed inside codenarc without relocation for some reason
    relocate 'org.codehaus.groovy.transform.powerassert', 'com.netflix.nebula.lint.org.codehaus.groovy.transform.powerassert'
}

jar.enabled = false
jar.dependsOn shadowJar

publishing {
    publications {
        withType(MavenPublication) {
            pom.withXml {
                asNode()
                    .dependencies
                    .dependency
                    .findAll {
                        // JGit is shaded inside the distribution, and we want the others to act as 'provided'
                        [
                                'core', 'org.eclipse.jgit', 'CodeNarc', // shaded and relocated
                                'asm', 'asm-commons', 'commons-lang', // shaded and relocated
                                'spock-core', 'nebula-test', 'junit', // act as 'provided'
                        ].contains(it.artifactId.text())
                    }
                    .each { it.parent().remove(it) }
            }
        }
    }
}

tasks.withType(Test) {
    maxHeapSize = '512m'
    maxParallelForks = 4
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

// Kotlin compiles first, stubbing Java dependencies, however it can't stub Groovy and we need to call Groovy code from Kotlin. For details see:
// https://discuss.gradle.org/t/kotlin-groovy-and-java-compilation/14903/10
tasks.named('compileGroovy') {
    classpath = sourceSets.main.compileClasspath
}
tasks.named('compileKotlin') {
    classpath += files(sourceSets.main.groovy.classesDirectory)
}

targetCompatibility = JavaVersion.VERSION_1_8
sourceCompatibility = JavaVersion.VERSION_1_8

['compileClasspath', 'runtimeClasspath', 'testCompileClasspath', 'testRuntimeClasspath'].each { confName ->
    tasks.register("dependencyReport${confName.capitalize()}", DependencyReportTask) {
        configurations = [project.configurations.getByName(confName)] as Set
        outputFile = new File(project.projectDir, "build/reports/project/${confName}-dependencies.txt")
    }
    check.dependsOn("dependencyReport${confName.capitalize()}")
    assemble.dependsOn("dependencyReport${confName.capitalize()}")
}
test.dependsOn 'shadowJar', 'generatePomFileForNebulaPublication'
