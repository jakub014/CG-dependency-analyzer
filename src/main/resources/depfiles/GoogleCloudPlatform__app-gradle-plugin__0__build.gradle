/*
 * Copyright 2017 Google LLC. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
  id 'java'
  id 'maven'
  id 'java-gradle-plugin'
  id 'net.researchgate.release' version '2.6.0'
  id 'com.github.sherter.google-java-format' version '0.8'
  id 'checkstyle'
  id 'jacoco'
}

repositories {
  mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'com.google.cloud.tools'

dependencies {
  compile localGroovy()
  compile gradleApi()
  compile 'com.google.cloud.tools:appengine-plugins-core:0.9.1'

  testCompile 'commons-io:commons-io:2.4'
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-library:1.3'
  testCompile 'org.mockito:mockito-core:2.23.4'
}

wrapper {
  gradleVersion = '4.9'
}

jar {
  manifest {
    attributes 'Implementation-Title': project.name,
        'Implementation-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion
  }
}

/* TESTING */
test {
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }
}

sourceSets {
  integTest {
    compileClasspath += main.output
    runtimeClasspath += main.output
  }
}

configurations {
  integTestCompile.extendsFrom testCompile
  integTestRuntime.extendsFrom testRuntime
}

task integTest(type: Test) {
  testClassesDirs = sourceSets.integTest.output.classesDirs
  classpath = sourceSets.integTest.runtimeClasspath
  outputs.upToDateWhen { false }
}
/* TESTING */


/* RELEASING */
task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  classifier 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  from javadoc.destinationDir
  classifier = 'javadoc'
}

task writePom {
  project.afterEvaluate {
    def outputFile = file("$buildDir/pom/${project.name}-${project.version}.pom")
    outputs.file outputFile

    doLast {
      pom {
        project {
          name 'App Engine Gradle Plugin'
          description 'This Gradle plugin provides tasks to build and deploy Google App Engine applications.'
          url 'https://github.com/GoogleCloudPlatform/app-gradle-plugin'
          inceptionYear '2016'

          scm {
            url 'https://github.com/GoogleCloudPlatform/app-gradle-plugin'
            connection 'scm:https://github.com/GoogleCloudPlatform/app-gradle-plugin.git'
            developerConnection 'scm:git://github.com/GoogleCloudPlatform/app-gradle-plugin.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'loosebazooka'
              name 'Appu Goundan'
              email 'appu@google.com'
            }
          }
        }
      }.writeTo(outputFile)
    }
  }
}

// for kokoro releases
task prepareRelease(type: Copy) {
  from jar
  from sourceJar
  from javadocJar
  from writePom

  into "${buildDir}/release-artifacts"

  dependsOn build
  dependsOn cleanPrepareRelease
}

release {
  tagTemplate = 'v$version'
  git {
    requireBranch = /^release_v\d+.*$/  //regex
  }
}
/* RELEASING */

/* FORMATTING */
check.dependsOn verifyGoogleJavaFormat
// to auto-format run ./gradlew googleJavaFormat

checkstyle {
  toolVersion = '8.18'
  // get the google_checks.xml file from the actual tool we're invoking
  config = resources.text.fromArchiveEntry(configurations.checkstyle[0], 'google_checks.xml')
  maxErrors = 0
  maxWarnings = 0
  checkstyleTest.enabled = false
}
/* FORMATTING */

/* TEST COVERAGE */
jacoco {
  toolVersion = '0.8.6'
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
}
/* TEST COVERAGE */
