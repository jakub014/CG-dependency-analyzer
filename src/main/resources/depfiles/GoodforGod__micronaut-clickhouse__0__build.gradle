plugins {
    id 'jacoco'
    id 'maven-publish'

    id 'io.micronaut.library' version '1.4.2'
    id 'org.sonarqube' version '3.1.1'
    id 'com.diffplug.spotless' version '5.11.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

group = groupId
version = artifactVersion

sourceCompatibility = 11
targetCompatibility = 11

spotless {
    java {
        encoding 'UTF-8'
        removeUnusedImports()
        eclipse().configFile "${projectDir}/config/codestyle.xml"
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'goodforgod'
        property 'sonar.projectKey', 'GoodforGod_micronaut-clickhouse'
    }
}

micronaut {
    version '2.4.1'
    processing {
        incremental true
        module project.name
        group project.group
        annotations 'io.micronaut.configuration.clickhouse.*'
    }
}

dependencies {
    annotationProcessor 'io.micronaut:micronaut-inject-java'
    compileOnly 'io.micronaut:micronaut-inject-java'

    api 'ru.yandex.clickhouse:clickhouse-jdbc:0.2.6'
    api 'com.github.housepower:clickhouse-native-jdbc:2.5.4'

    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut:micronaut-management'

    testAnnotationProcessor 'io.micronaut:micronaut-inject-java'

    testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation 'org.testcontainers:junit-jupiter:1.14.3'
    testImplementation 'org.testcontainers:clickhouse:1.14.3'

    testImplementation 'io.micronaut.test:micronaut-test-core'
    testImplementation 'io.micronaut.test:micronaut-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    jacoco {
        excludes += ['**/ClickhouseNativeProperties.java']
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.incremental = true
    options.fork = true
}

tasks.withType(Test) {
    reports.html.enabled = false
    reports.junitXml.enabled = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'Micronaut ClickHouse Configuration'
                url = 'https://github.com/GoodforGod/micronaut-clickhouse'
                description = 'This is integration between Micronaut and ClickHouse.'

                license {
                    name = 'Apache License 2.0'
                    url = 'https://github.com/GoodforGod/micronaut-clickhouse/blob/master/LICENSE'
                    distribution = 'repo'
                }

                developer {
                    id = 'GoodforGod'
                    name = 'Anton Kurako'
                    email = 'goodforgod.dev@gmail.com'
                    url = 'https://github.com/GoodforGod'
                }

                scm {
                    connection = 'scm:git:git://github.com/GoodforGod/micronaut-clickhouse.git'
                    developerConnection = 'scm:git:ssh://GoodforGod/micronaut-clickhouse.git'
                    url = 'https://github.com/GoodforGod/micronaut-clickhouse/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv("OSS_USERNAME")
                password System.getenv("OSS_PASSWORD")
            }
        }
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

if (project.hasProperty("signing.keyId")) {
    apply plugin: 'signing'
    signing {
        sign publishing.publications.mavenJava
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}