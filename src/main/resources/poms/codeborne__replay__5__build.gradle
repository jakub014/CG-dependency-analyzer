configurations {
  thirdParty
  compile.extendsFrom thirdParty
}

ext {
  FLYING_SOURCER_VERSION = '9.1.9'
  YAHP_VERSION = 1.3
}

dependencies {
  compile project(':framework')
  testCompile project(':framework').sourceSets.test.compileClasspath

  thirdParty("org.xhtmlrenderer:flying-saucer-core:$FLYING_SOURCER_VERSION")
  compile("org.xhtmlrenderer:flying-saucer-pdf:$FLYING_SOURCER_VERSION") {
    exclude group: 'org.xhtmlrenderer', module: 'flying-saucer-core'
    exclude group: 'org.bouncycastle'
  }

  compile('org.allcolor:shaniparser:1.4.22')
  compile('org.allcolor:shaniparser-xmlapi:1.4.22')
  compile("com.google.code.maven-play-plugin.org.allcolor.yahp:yahp:$YAHP_VERSION") {transitive = false}
  thirdParty("com.google.code.maven-play-plugin.org.allcolor.yahp:yahp-internal:$YAHP_VERSION") {transitive = false}
}

repositories {
  maven {
    url uri('https://dl.bintray.com/allcolor/alc-web')
  }
}

task extractThirdPartyJars(type: Sync) {
  dependsOn configurations.thirdParty

  from {
    configurations.thirdParty.collect { zipTree(it) }
  }
  into "$buildDir/thirdParty/"
  exclude 'org/xhtmlrenderer/swing/NaiveUserAgent*'
  exclude 'org/allcolor/yahp/cl/converter/CHtmlToPdfFlyingSaucerTransformer*'
}

jar.dependsOn extractThirdPartyJars

jar {
  from sourceSets.main.output + "$buildDir/thirdParty/"
}
