import java.time.Duration
import java.util.concurrent.atomic.AtomicReference

dependencies {
  testImplementation(deps.testng) {
    exclude group: 'junit'
    exclude group: 'org.checkerframework', module: 'checker-compat-qual'
  }
  testImplementation deps.junitParams
  testImplementation deps.reactiveStreamsTckFlow
  testImplementation deps.mockWebServer
  testImplementation deps.jimfs
  testImplementation project(':methanol-testutils')
}

compileJava {
  // Suppress exporting to modules unresolvable on compilation
  options.compilerArgs += '-Xlint:-module'
}

test {
  exclude '**/tck/**'
  // Run from classpath to use META-INF/services which doesn't work from module path
  moduleOptions {
    runOnClasspath = true
  }

  systemProperty 'junit.jupiter.execution.timeout.mode', 'disabled_on_debug'
}

task tckTest(type: Test) {
  useTestNG()
  include '**/tck/**'
  shouldRunAfter test
  scanForTestClasses false
  testLogging {
    events = ['failed']
  }

  if (System.getenv().GITHUB_ACTIONS) {
    systemProperties.TCK_TIMEOUT_MILLIS = 1_000
    systemProperties.TCK_NO_SIGNAL_TIMEOUT_MILLIS = 100
  }

  timeout = Duration.ofMinutes(15)

  def runningTckTestClassName = new AtomicReference<String>()
  beforeTest { descriptor ->
    if (runningTckTestClassName.getAndSet(descriptor.className) != descriptor.className) {
      println "Running TCK test: ${descriptor.className.tokenize('.').last()}"
    }
  }
}

check.dependsOn tckTest

addReads(compileTestJava, 'methanol.testutils')
addReads(compileTestJava, 'org.junit.jupiter.params')
addReads(compileTestJava, 'org.assertj.core')

// This avoids a mysterious compilation error caused by some kotlin class not being accessible
// to javac. Kotlin is brought transitively by okhttp's MockWebServer.
addReads(compileTestJava, 'kotlin.stdlib')
