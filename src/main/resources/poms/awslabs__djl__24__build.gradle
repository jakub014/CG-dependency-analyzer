plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id "com.github.node-gradle.node" version "2.2.4"
    id 'application'
}

node {
    version = '14.15.3'
    npmVersion = '6.14.9'
    download = true
}

dependencies {
    api project(":serving:serving")
    implementation "io.netty:netty-all:${netty_version}"
    implementation "com.google.code.gson:gson:${gson_version}"
    implementation project(':model-zoo')
    implementation project(':mxnet:mxnet-model-zoo')
    implementation project(':tensorflow:tensorflow-model-zoo')
    implementation project(':pytorch:pytorch-model-zoo:')
}


task buildReactApp(type: NodeTask, dependsOn: 'npmInstall') {
    project.logger.info('Build the react frontend application')
    script = project.file('./node_modules/webpack/bin/webpack.js')
    args = [
            '--mode', 'development',
            '--entry', './src/main/webapp/Main.jsx',
            '-o', './src/main/resources/static/dist/modelzoo-frontend.js'
    ]
}

assemble.dependsOn buildReactApp

task startDevServer(type: NodeTask, dependsOn: 'buildReactApp') {
    script = project.file('./node_modules/webpack-dev-server/bin/webpack-dev-server.js')
}

// disable central build for global build tasks
if (project.getProjectDir().toString() == System.getProperty("user.dir")) {
    processResources.dependsOn 'buildReactApp'
}

clean.delete << file('node_modules')
clean.delete << file('src/main/resources/static/dist')


jar {
    project.logger.info('building the jar')
    manifest {
        attributes 'Main-Class': 'ai.djl.serving.central.ModelZooRepositoryServer'
    }
    includeEmptyDirs = false
    from configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }

    exclude "META-INF/maven/**"
    exclude "META-INF/INDEX.LIST"
    exclude "META-INF/MANIFEST*"
}

application {
    mainClassName = System.getProperty("main", "ai.djl.serving.central.ModelZooRepositoryServer")
}

run {
    environment("TF_CPP_MIN_LOG_LEVEL", "1") // turn off TensorFlow print out
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
    applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=4000"]
}

task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into '../serving/plugins'
}
jar.finalizedBy(copyJar)
