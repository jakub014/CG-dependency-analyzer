// This gradle file does all common configuration of Dagli's modules (subprojects), notably using a common registry of
// dependencies to avoid cross-module misalignment.
//
// To build (and test) Dagli, run "gradle build".
//
// To publish Dagli, run "gradle uploadArchives --no-daemon --no-parallel"
// ("--no-daemon --no-parallel" is required, as otherwise the published data will likely be corrupt/incomplete.)
//
// For uploadArchives to work, you'll need to have the following properties defined:
// signing.*: keys/credentials for signing artifacts; please see the documentation for the "signing" plugin for details
// ossrhUsername: your username for Sonatype's OSS repository
// ossrhPassword: your password for Sonatype's OSS repository
// We recommend configuring these in your default gradle properties (e.g. ~/.gradle/gradle.properties), making sure to
// keep this file private.  Your credentials should (of course) never be checked in or otherwise shared.

allprojects {
  apply plugin: 'checkstyle'
  apply plugin: 'idea'
}

def dagliVersion = "15.0.0-beta7"
def javaVersion = JavaVersion.VERSION_1_9
def jdk = "1.9"

idea {
  project {
    jdkName = jdk // you may still need to specify the JDK manually in IntelliJ
    languageLevel = javaVersion
  }
}

// curls https://javadoc.io/doc/com.linkedin.dagli/[module name] for each module to ensure that javadoc.io knows about
// it.  This should only need to be run after publishing a new module to the central repository (and not merely a new
// version of an existing module, which javadoc.io will pick up automatically).
// This command will not work if curl is not available on your $PATH (or equivalent).
task javadocAnnounce {
  doLast {
    subprojects.forEach({
      println("Now curling " + it.name)
      def curl = ["curl", "https://javadoc.io/doc/com.linkedin.dagli/" + it.name].execute()
      curl.waitFor()
      sleep(3000) // be polite: 3s delay between requests
    })
  }
}

subprojects {
  // everything is a Java library (except the example modules, but application-vs-library is unimportant for us)
  apply plugin: 'java-library'

  // used when publishing artifacts to central repository:
  apply plugin: 'maven'
  apply plugin: 'signing'

  ext.isExample = (project.parent.name == "examples" || project.name == "examples")
  if (ext.isExample) {
    uploadArchives.enabled = false // don't upload example JARs
  }

  archivesBaseName = project.name
  group = "com.linkedin.dagli"
  version = dagliVersion
  buildDir = "${rootProject.projectDir}/build/${project.name}" // use common build folder

  repositories {
    mavenCentral()
  }

  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion

  // for now, print out only the most significant javadoc issues
  javadoc.options.addStringOption('Xdoclint:none', '-quiet')

  test {
    useJUnitPlatform()
    maxHeapSize = "4g"
  }

  // define constants shared among subprojects here
  ext {
    // some tests are very expensive and extensive; we skip these unless "-Palltests" is added to the gradle
    // command-line, e.g. "gradle build -Palltests"
    test {
      systemProperty "com.linkedin.dagli.alltests", rootProject.hasProperty('alltests')
    }

    dependencies = [
      "ahocorasick": "org.ahocorasick:ahocorasick:0.4.0",
      "ascii-graph": "com.github.mdr:ascii-graphs_2.10:0.0.3",
      "avro": "org.apache.avro:avro:1.8.2",
      "auto-service": "com.google.auto.service:auto-service:1.0-rc2",
      "commons-csv": "org.apache.commons:commons-csv:1.5",
      "commons-lang": "org.apache.commons:commons-lang3:3.11",
      "commons-math": "org.apache.commons:commons-math3:3.6.1",
      "commons-rng-core": "org.apache.commons:commons-rng-core:1.3",
      "concurrentli": "com.concurrentli:concurrentli:1.3.2",
      "deeplearning4j": "org.deeplearning4j:deeplearning4j-core:1.0.0-beta7",
      "fastutil": "it.unimi.dsi:fastutil:8.3.0",
      "javapoet": "com.squareup:javapoet:1.9.0",
      "jflex": "de.jflex:jflex:1.6.1",
      "junit": "org.junit.jupiter:junit-jupiter-engine:5.6.2",
      "junit-params": "org.junit.jupiter:junit-jupiter-params:5.6.2",
      "kryo": "com.esotericsoftware.kryo:kryo5:5.0.0",
      "liblinear": "com.jeffreypasternack:liblinear:2.21",
      "libphonenumber": "com.googlecode.libphonenumber:libphonenumber:8.9.5",
      "log4j2-api": "org.apache.logging.log4j:log4j-api:2.13.3",
      "log4j2-core": "org.apache.logging.log4j:log4j-core:2.13.3",
      "log4j2-slf4j-impl": "org.apache.logging.log4j:log4j-slf4j-impl:2.13.3",
      "migz": "com.linkedin.migz:migz:2.0.beta-1",
      "xgboost4j": "ml.dmlc:xgboost4j:0.90",
    ]
  }

  // common dependencies across all subprojects
  dependencies {
    testImplementation project.ext.dependencies.junit
    testImplementation project.ext.dependencies.'junit-params'
  }

  // artifact publishing tasks and configuration
  jar {
    manifest {
      attributes('Copyright': 'Copyright 2020 LinkedIn Corporation. All rights reserved.',
          'License': 'Licensed under the BSD-2 Clause license.  See LICENSE in the project root for license information.')
    }

    group = 'com.linkedin.dagli'
    version = dagliVersion
    archivesBaseName = project.name
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  signing {
    sign configurations.archives
  }

  if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

          repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }

          snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }

          pom.project {
            name project.name
            packaging 'jar'

            description 'DAG-oriented machine learning framework for bug-resistant, readable, efficient, maintainable and trivially deployable models in Java and other JVM languages'
            url 'https://github.com/linkedin/dagli'

            scm {
              connection 'scm:git@github.com:linkedin/dagli.git'
              developerConnection 'scm:git@github.com:linkedin/dagli.git'
              url 'scm:git@github.com:linkedin/dagli.git'
            }

            licenses {
              license {
                name 'BSD 2-Clause License'
                url 'https://opensource.org/licenses/BSD-2-Clause'
              }
            }

            developers {
              developer {
                id 'jeffpasternack'
                name 'Jeff Pasternack'
              }
            }
          }
        }
      }
    }
  }
}