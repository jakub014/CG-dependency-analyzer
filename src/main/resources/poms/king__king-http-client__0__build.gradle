// Copyright (C) king.com Ltd 2015
// https://github.com/king/king-http-client
// Author: Magnus Gustafsson
// License: Apache 2.0, https://raw.github.com/king/king-http-client/LICENSE-APACHE

plugins {
	id 'java-library'
	id("net.ltgt.errorprone") version "1.1.1"
}


ext {
	nettyVersion = "4.1.49.Final"
	errorProneCoreVersion = "2.3.4"
	mockitoVersion = '3.3.3'
	assertjVersion = '3.13.2'
	junitVersion = '5.6.2'
}


allprojects {

	apply plugin: 'java'
	apply plugin: "net.ltgt.errorprone"
	apply plugin: 'jacoco'



	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8


	repositories {
		mavenCentral()
	}

	plugins.withType(JavaPlugin) {

		dependencies {

			implementation 'org.slf4j:slf4j-api:1.7.7'


			testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
			testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
			testImplementation "org.assertj:assertj-core:$assertjVersion"


			errorprone("com.google.errorprone:error_prone_core:$errorProneCoreVersion")
			errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
		}

		tasks.withType(Test) {
			useJUnitPlatform()
		}

		tasks.withType(JavaCompile) {
			options.errorprone.errorproneArgs.add('-Xep:FutureReturnValueIgnored:OFF')
			options.errorprone.errorproneArgs.add('-Xep:StringSplitter:OFF')
			options.errorprone.errorproneArgs.add('-Xep:ImmutableEnumChecker:OFF')

		}

		test {
			testLogging {
				events "failed"
				exceptionFormat "full"
			}
		}
	}

}

task codeCoverageReport(type: JacocoReport) {

	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

	subprojects.each {
		sourceSets it.sourceSets.main
	}

	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/report.xml")

		html.enabled false
		csv.enabled false
	}
}

codeCoverageReport.dependsOn {
	subprojects*.test
}
