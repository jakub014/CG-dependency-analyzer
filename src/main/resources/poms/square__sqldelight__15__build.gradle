import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'

gradlePlugin {
  plugins {
    sqlDelight {
      id = 'com.squareup.sqldelight'
      implementationClass = 'com.squareup.sqldelight.gradle.SqlDelightPlugin'
    }
  }
}

configurations {
  fixtureClasspath
  bundled
  shade
}


// Append any extra dependencies to the test fixtures via a custom configuration classpath. This
// allows us to apply additional plugins in a fixture while still leveraging dependency resolution
// and de-duplication semantics.
tasks.named('pluginUnderTestMetadata').configure {
  getPluginClasspath().from(configurations.fixtureClasspath)
}

dependencies {
  implementation deps.sqliteJdbc
  implementation deps.objectDiff
  implementation deps.schemaCrawler.tools
  implementation deps.schemaCrawler.sqlite

  shade deps.sqlitePsi
  shade project(':sqlite-migrations')
  shade project(':sqldelight-compiler')
  shade deps.intellij.core
  shade deps.intellij.java
  shade deps.intellij.lang
  shade deps.intellij.testFramework

  compileOnly gradleApi()
  implementation deps.plugins.kotlin
  compileOnly deps.plugins.android

  testImplementation deps.sqlitePsi
  testImplementation project(':sqlite-migrations')
  testImplementation project(':sqldelight-compiler')
  testImplementation deps.junit
  testImplementation deps.truth

  fixtureClasspath deps.plugins.kotlin
  fixtureClasspath deps.plugins.android
}

test {
  // TestKit spawns individual daemons for each test so set things up to be less memory intensive.
  maxParallelForks = 2
  minHeapSize = '128m'

  // The integration tests require local installations of artifacts.
  dependsOn(
          ":runtime:publishAllPublicationsToInstallLocallyRepository",
          ":drivers:android-driver:publishAllPublicationsToInstallLocallyRepository",
          ":drivers:sqlite-driver:publishAllPublicationsToInstallLocallyRepository",
          ":drivers:jdbc-driver:publishAllPublicationsToInstallLocallyRepository",
          ":drivers:native-driver:publishAllPublicationsToInstallLocallyRepository",
          ":sqlite-migrations:publishAllPublicationsToInstallLocallyRepository",
          ":sqldelight-compiler:publishAllPublicationsToInstallLocallyRepository",
          ":sqldelight-gradle-plugin:publishAllPublicationsToInstallLocallyRepository",
  )
  useJUnit {
    if (project.hasProperty("Instrumentation")) {
      includeCategories 'com.squareup.sqldelight.Instrumentation'
    } else {
      excludeCategories 'com.squareup.sqldelight.Instrumentation'
    }
  }
}

if (System.getenv("CI") == "true") {
  apply plugin: 'com.github.johnrengelman.shadow'

  configurations.compileOnly.extendsFrom(configurations.shade)

  tasks.register("relocateShadowJar", ConfigureShadowRelocation.class) {
    target = tasks.shadowJar
    prefix = "sqldelight"
  }

  tasks.getByName("shadowJar").configure {
    dependsOn("relocateShadowJar")
    archiveClassifier.set("")
    minimize()
    configurations = [project.configurations.shade]

    doFirst {
      relocators = relocators.grep {
        !it.getPattern().startsWith("com.squareup.sqldelight") &&
                !it.getPattern().startsWith("groovy") &&
                !it.getPattern().startsWith("kotlin")
      }
    }

    include '*.jar'
    include '**/*.class'
    include 'META-INF/gradle-plugins/*'

    exclude '/groovy**'
    exclude '/kotlin/**'
  }

  artifacts {
    runtime(shadowJar)
    archives(shadowJar)
  }

} else {
  configurations.implementation.extendsFrom(configurations.shade)
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
