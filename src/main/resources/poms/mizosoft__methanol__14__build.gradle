plugins {
  id 'cpp-library'
}

library {
  baseName = 'brotlijni'
  linkage = [Linkage.SHARED]

  targetMachines = parent.targets

  source.from 'src/jni'
  privateHeaders.from files('src/include', 'src/common') // src/common has dictionary.h for common_jni.cc

  tasks.withType(CppCompile) {
    // C sources had to be defined here for some reason
    source.from fileTree(dir: 'src/common', include: '*.c')
    source.from fileTree(dir: 'src/dec', include: '*.c')

    // add jni include paths
    def javaHome = System.getenv().JAVA_HOME
    if (!javaHome) {
      throw new GradleException('JAVA_HOME not found')
    }
    if (javaHome.endsWith('/')) {
      javaHome = javaHome.substring(0, javaHome.length() - 1)
    }
    includes "$javaHome/include"
    def os = machines.host().operatingSystemFamily
    if (os.isLinux()) {
      includes "$javaHome/include/linux"
    } else if (os.isWindows()) {
      includes "$javaHome/include/win32"
    } else if (os.isMacOs()) {
      includes "$javaHome/include/darwin"
    } else {
      throw new GradleException('unsupported OS: ' + os)
    }

    // dictionary is bundled separately to save space
    macros.put('BROTLI_EXTERNAL_DICTIONARY_DATA', null)

    // Set strict warning options for gcc (these are enabled in the main brotli repo)
    if (toolChain in [Gcc, Clang]) {
      compilerArgs.addAll([
          '--pedantic-errors',
          '-Wall',
          '-Wconversion',
          '-Werror',
          '-Wextra',
          '-Wlong-long',
          '-Wmissing-declarations',
          '-Wmissing-prototypes',
          '-Wno-strict-aliasing',
          '-Wshadow',
          '-Wsign-compare'
      ])
    }
  }
}
