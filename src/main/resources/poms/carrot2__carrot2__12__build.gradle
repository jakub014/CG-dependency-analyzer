import org.apache.tools.ant.filters.*

apply plugin: 'java'

configurations {
  ctxService
  ctxRoot
  ctxFrontend
  ctxDoc
  ctxJavadoc

  examples

  distZip
  distDir
}

dependencies {
  ctxService   project(path: ":dcs:contexts:service", configuration: 'war')
  ctxRoot      project(path: ":dcs:contexts:root", configuration: 'war')
  ctxJavadoc   project(path: ":dcs:contexts:javadoc", configuration: 'war')
  ctxFrontend  project(path: ":dcs:contexts:frontend", configuration: 'archives')
  ctxDoc       project(path: ":doc", configuration: 'archives')

  examples     project(path: ":dcs:examples", configuration: "distribution")

  implementation "com.carrotsearch.console:launcher"
  implementation "org.eclipse.jetty:jetty-server"
  implementation "org.eclipse.jetty:jetty-webapp"
}

ext {
  jarname = 'dcs-launcher'
  outputDir = "$buildDir/dist"
  outputZip = "$buildDir/dist-zip"
}

jar {
  archiveBaseName = jarname.toString()

  doFirst {
    manifest {
      attributes("Main-Class": "com.carrotsearch.console.launcher.Launcher")
      attributes("Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '))
    }
  }
}

task collectDependencies(type: Sync) {
  from configurations.runtimeClasspath
  from jar

  into "$outputDir/lib"
}

task collectScripts(type: Sync) {
  def antPrj = new org.apache.tools.ant.Project()
  afterEvaluate {
    replaceTokens.each { k, v -> antPrj.setProperty(k.toString(), v.toString()) }
  }

  inputs.properties replaceTokensTrigger

  from(files('src/main/assembly'), {
    filesMatching(["dcs"], {
      filteringCharset = 'UTF-8'
      filter(ExpandProperties, project: antPrj)
      filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("lf"))
      fileMode 0755
    })

    filesMatching(["dcs.cmd"], {
      filteringCharset = 'UTF-8'
      filter(ExpandProperties, project: antPrj)
    })
  })

  from legal

  into "$outputDir"
  preserve {
    include 'lib/'
    include 'web/'
    include 'examples/'
  }
}

task collectCtxService(type: Sync) {
  dependsOn configurations.ctxService
  from { zipTree(configurations.ctxService.asPath) }
  into "$outputDir/web/service"
  preserve {
    include 'resources/'
  }
}

task collectCtxRoot(type: Sync) {
  dependsOn configurations.ctxRoot
  from { zipTree(configurations.ctxRoot.asPath) }
  into "$outputDir/web/root"
}

task collectCtxJavadoc(type: Sync) {
  dependsOn configurations.ctxJavadoc
  from { zipTree(configurations.ctxJavadoc.asPath) }
  into "$outputDir/web/javadoc"
}

task collectCtxFrontend(type: Sync) {
  from configurations.ctxFrontend
  into "$outputDir/web/frontend"
  exclude "**/*.map"
}

task collectCtxDoc(type: Sync) {
  from configurations.ctxDoc
  into "$outputDir/web/doc"
  exclude "**/*.map"
}

task collectExamples(type: Sync) {
  from configurations.examples
  into "$outputDir/examples"
}

task distDir {
  dependsOn collectScripts,
            collectDependencies,
            collectCtxService,
            collectCtxRoot,
            collectCtxJavadoc,
            collectCtxFrontend,
            collectExamples

  if (!project.hasProperty("intellij.launch.skipDocs")) {
    dependsOn collectCtxDoc
  }

  outputs.file("$outputDir")
}

task distZip(type: Zip) {
  archiveFileName = "carrot2-dcs-${project.version}.zip"
  destinationDirectory = file("$outputZip")

  from(distDir, {
    filesMatching("**/dcs", {
      fileMode 0755
    })
  })

  into "${archivesBaseName}/"
}

assemble.dependsOn distDir

artifacts {
  distZip tasks.distZip
  distDir file("$outputDir"), {
    builtBy distDir
  }
}

