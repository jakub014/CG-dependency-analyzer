dependencies {
    implementation project(":auth-entities")
    implementation project(":auth-services")
    implementation project(":auth-viewmodels")

    implementation("io.jsonwebtoken:jjwt-api:$jjwtVersion")
    implementation("io.jsonwebtoken:jjwt-impl:$jjwtVersion")
    implementation("io.jsonwebtoken:jjwt-jackson:$jjwtVersion")
    implementation("io.github.astrapi69:throw-able:$throwAbleVersion")
    implementation("de.alpharogroup:bean-mapper-api:$beanMapperApiVersion")
    implementation("de.alpharogroup:generic-mapper:$genericMapperVersion")
    implementation("de.alpharogroup:auth-api:$authApiVersion")
    implementation("de.alpharogroup:servlet-kt-extensions:$servletKtExtensionsVersion")
    implementation("de.alpharogroup:auth:$authVersion")
    implementation("de.alpharogroup:mystic-crypt:$mysticCryptVersion")
    implementation("de.alpharogroup:ent-api:$entApiVersion")
    implementation("de.alpharogroup:ent-core:$entCoreVersion")
    implementation("de.alpharogroup:spring-tool-extensions:$springToolExtensionsVersion")
    implementation("de.alpharogroup:spring-boot-extensions:$springBootExtensionsVersion")
    implementation("de.alpharogroup:json-extensions:$jsonExtensionsVersion")
    implementation("de.alpharogroup:silly-collections:$sillyCollectionsVersion")
    implementation("de.alpharogroup:pg-enum-usertype:$pgEnumUsertypeVersion")
    implementation("io.springfox:springfox-swagger2:$springfoxSwaggerVersion")
    implementation("io.springfox:springfox-swagger-ui:$springfoxSwaggerVersion")
    implementation("com.thoughtworks.xstream:xstream:$xstreamVersion")
    implementation("javax.validation:validation-api:$javaxValidationApiVersion")
    implementation("org.apache.commons:commons-lang3:$commonsLang3Version")
    implementation("de.alpharogroup:silly-beans:$sillyBeansVersion")
    implementation("io.github.astrapi69:file-worker:$fileWorkerVersion")
    implementation("org.postgresql:postgresql")
    implementation("org.flywaydb:flyway-core")
    implementation("org.springframework:spring-oxm")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.security:spring-security-web")
    implementation("org.springframework.security:spring-security-config")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation("com.h2database:h2")
}

license {
    ext.year = "$projectInceptionYear"
    ext.owner = "$projectLeaderName"
    header rootProject.file('src/main/resources/LICENSE.txt')
    excludes(["**/README",
              "**/README.md",
              "**/LICENSE",
              "**/NOTICE",
              "**/*.yml",
              "**/*.xml",
              "**/*.xsl",
              "**/*.xsd",
              "**/*.dtd",
              "**/*.html",
              "**/*.jsp",
              "**/*.jpa",
              "**/*.sql",
              "**/*.properties",
              "**/*.bat",
              "**/*.gradle",
              "**/*.MF",
              "**/*.txt",
              "**/*.vm",
              "**/*.log",
              "**/*.map",
              "**/*.js.map",
              "**/*.tmpl",
              "**/*.js.tmpl",
              "**/*.editorconfig",
              "**/*.lombok.config",
              "src/test/resources/**",
              "src/main/resources/**",
              "out/**",
              "build/**"])
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
    javadoc.properties.failOnError = true
}

def releaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "$project.name"
                description = "$projectApplicationDescription"
                url = "$projectScmProviderUrl" + "$projectHolderUsername" + "/" + "$rootProject.name"
                organization {
                    name = "$projectOrganizationName"
                    url = "$projectOrganizationUrl"
                }
                issueManagement {
                    system = "$projectIssueManagementSystem"
                    url = "$projectScmProviderUrl" + "$projectHolderUsername" + "/" + "$rootProject.name" + "/issues"
                }
                licenses {
                    license {
                        name = "$projectLicenseName"
                        url = "$projectLicenseUrl"
                        distribution = "$projectLicenseDistribution"
                    }
                }
                developers {
                    developer {
                        id = "$projectHolderUsername"
                        name = "$projectLeaderName"
                    }
                }
                scm {
                    connection = "$projectScmGitUrlPrefix" + "$projectScmProviderDomain" + ":" + "$projectHolderUsername" + "/" + "$rootProject.name" + ".git"
                    developerConnection = "$projectScmGitUrlPrefix" + "$projectScmProviderDomain" + ":" + "$projectHolderUsername" + "/" + "$rootProject.name" + ".git"
                    url = "$projectScmGitUrlPrefix" + "$projectScmProviderDomain" + ":" + "$projectHolderUsername" + "/" + "$rootProject.name" + ".git"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("$projectRepositoriesUserNameKey") ?: project.property("$projectRepositoriesUserNameKey")
                password System.getenv("$projectRepositoriesPasswordKey") ?: project.property("$projectRepositoriesPasswordKey")
            }
            def releasesRepoUrl = "$projectRepositoriesReleasesRepoUrl"
            def snapshotsRepoUrl = "$projectRepositoriesSnapshotsRepoUrl"
            url = releaseVersion ? releasesRepoUrl : snapshotsRepoUrl
        }
    }
}

signing {
    if (releaseVersion) {
        sign publishing.publications.mavenJava
    }
}
