// Run 'gradle checkUpdates' to find out which dependencies have newer versions
plugins {
    id 'java-library'
    id 'net.ltgt.errorprone' version '2.0.1'
    id 'org.cadixdev.licenser' version '0.6.0'
    id 'com.palantir.git-version' version '0.12.2'
    id 'maven-publish'
    id 'signing'
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
    id 'name.remal.check-updates' version '1.3.1'
}

apply plugin: 'maven-publish'
apply plugin: 'de.marcphilipp.nexus-publish'
apply plugin: 'java'

if (hasProperty('signing.keyId')) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}

group = 'io.temporal'
version = getVersionName()
archivesBaseName = "temporal-testing-junit5"

description = '''Temporal Workflow Java SDK testing, JUnit 5.x integration'''

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')
    errorprone('com.google.errorprone:error_prone_core:2.6.0')

    api project(':temporal-testing')

    api platform('org.junit:junit-bom:5.7.1')
    api group: 'org.junit.jupiter', name: 'junit-jupiter-api'

    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'
}

license {
    header rootProject.file('license-header.txt')
    exclude '**/*.puml'
}

compileJava {
    dependsOn 'googleJavaFormat'
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

javadoc {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

test {
    dependsOn 'checkLicenseMain'
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        // Uncomment the following line if you want to see test logs in gradlew run.
        showStandardStreams true
    }
    forkEvery = 1
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Temporal Java SDK testing for JUnit 5'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'Temporal Workflow Java SDK testing, JUnit 5.x integration'
                url = 'https://github.com/temporalio/java-sdk'

                scm {
                    connection = 'scm:git@github.com:temporalio/java-sdk.git'
                    developerConnection = 'scm:git@github.com:temporalio/java-sdk.git'
                    url = 'https://github.com/temporalio/java-sdk.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'mfateev'
                        name = 'Maxim Fateev'
                        email = 'maxim@temporal.io'
                    }
                    developer {
                        id = 'samarabbas'
                        name = 'Samar Abbas'
                        email = 'samar@temporal.io'
                    }
                }
            }
        }

    }

    signing {
        sign publishing.publications.mavenJava
    }

}

nexusPublishing {
    repositories {
        sonatype {
            username = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
            password = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
        }
    }
}
