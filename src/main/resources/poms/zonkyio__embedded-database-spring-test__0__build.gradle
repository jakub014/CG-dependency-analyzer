import java.util.regex.Matcher

plugins {
    id 'net.researchgate.release' version '2.8.1'
    id 'nebula.optional-base' version '5.0.1'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

ext {
    ossrhUsername = project.findProperty('ossrh.username')
    ossrhPassword = project.findProperty('ossrh.password')

    testSuites = [
            [name: 'default', versions: [
                    [name: 'suite', 'zonky-postgres': 'default', opentable: 'default', yandex: 'default', 'mssql-driver': 'default', 'mysql-driver': 'default', 'mariadb-driver': 'default']
            ]],
            [name: 'spring', versions: [
                    [name: '4.3.8',   spring: '4.3.8.RELEASE',   'zonky-postgres': 'default',  opentable: 'default',  yandex: 'default',  'mssql-driver': 'default',  'mysql-driver': 'default',  'mariadb-driver': 'default'],
                    [name: '4.3.29',  spring: '4.3.29.RELEASE',  'zonky-postgres': 'default',  opentable: 'default',  yandex: 'default',  'mssql-driver': 'default',  'mysql-driver': 'default',  'mariadb-driver': 'default'],
                    [name: '5.0.19',  spring: '5.0.19.RELEASE',  'zonky-postgres': 'default',  opentable: 'default',  yandex: 'default',  'mssql-driver': 'default',  'mysql-driver': 'default',  'mariadb-driver': 'default'],
                    [name: '5.1.19',  spring: '5.1.19.RELEASE',  'zonky-postgres': 'default',  opentable: 'default',  yandex: 'default',  'mssql-driver': 'default',  'mysql-driver': 'default',  'mariadb-driver': 'default'],
                    [name: '5.2.11',  spring: '5.2.11.RELEASE',  'zonky-postgres': 'default',  opentable: 'default',  yandex: 'default',  'mssql-driver': 'default',  'mysql-driver': 'default',  'mariadb-driver': 'default'],
                    [name: '5.3.1',   spring: '5.3.1',           'zonky-postgres': 'default',  opentable: 'default',  yandex: 'default',  'mssql-driver': 'default',  'mysql-driver': 'default',  'mariadb-driver': 'default']
            ]],
            [name: 'flyway', versions: [
                    [name: '4.0.3',  flyway: '4.0.3',   'flyway-test': '4.0.1',    spring: '4.3.25.RELEASE',  'spring-boot': '1.5.22.RELEASE',  'zonky-postgres': 'default'],
                    [name: '4.1.2',  flyway: '4.1.2',   'flyway-test': '4.1.0',    spring: '4.3.25.RELEASE',  'spring-boot': '1.5.22.RELEASE',  'zonky-postgres': 'default'],
                    [name: '4.2.0',  flyway: '4.2.0',   'flyway-test': '4.2.0.2',  spring: '4.3.25.RELEASE',  'spring-boot': '1.5.22.RELEASE',  'zonky-postgres': 'default'],
                    [name: '5.0.7',  flyway: '5.0.7',   'flyway-test': '5.0.0',    spring: '5.0.13.RELEASE',  'spring-boot': '2.0.9.RELEASE',   'zonky-postgres': 'default'],
                    [name: '5.1.4',  flyway: '5.1.4',   'flyway-test': '5.1.0',    spring: '5.0.13.RELEASE',  'spring-boot': '2.0.9.RELEASE',   'zonky-postgres': 'default'],
                    [name: '5.2.4',  flyway: '5.2.4',   'flyway-test': '5.2.4',    spring: '5.1.19.RELEASE',  'spring-boot': '2.1.18.RELEASE',  'zonky-postgres': 'default'],
                    [name: '6.0.6',  flyway: '6.0.6',   'flyway-test': '6.0.0',    spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE',  'zonky-postgres': 'default'],
                    [name: '6.0.8',  flyway: '6.0.8',   'flyway-test': '6.0.0',    spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE',  'zonky-postgres': 'default'],
                    [name: '6.1.4',  flyway: '6.1.4',   'flyway-test': '6.1.0',    spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE',  'zonky-postgres': 'default'],
                    [name: '6.2.4',  flyway: '6.2.4',   'flyway-test': '6.1.0',    spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE',  'zonky-postgres': 'default'],
                    [name: '6.3.2',  flyway: '6.3.2',   'flyway-test': '6.1.0',    spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE',  'zonky-postgres': 'default'],
                    [name: '6.3.3',  flyway: '6.3.3',   'flyway-test': '6.3.3',    spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE',  'zonky-postgres': 'default'],
                    [name: '6.4.4',  flyway: '6.4.4',   'flyway-test': '6.4.0',    spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE',  'zonky-postgres': 'default'],
                    [name: '6.5.7',  flyway: '6.5.7',   'flyway-test': '6.4.0',    spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE',  'zonky-postgres': 'default'],
                    [name: '7.0.4',  flyway: '7.0.4',   'flyway-test': '7.0.0',    spring: '5.3.1',           'spring-boot': '2.4.0',           'zonky-postgres': 'default'],
                    [name: '7.1.1',  flyway: '7.1.1',   'flyway-test': '7.0.0',    spring: '5.3.1',           'spring-boot': '2.4.0',           'zonky-postgres': 'default'],
                    [name: '7.2.1',  flyway: '7.2.1',   'flyway-test': '7.0.0',    spring: '5.3.1',           'spring-boot': '2.4.0',           'zonky-postgres': 'default'],
                    [name: '7.3.2',  flyway: '7.3.2',   'flyway-test': '7.0.0',    spring: '5.3.1',           'spring-boot': '2.4.0',           'zonky-postgres': 'default'],
                    [name: '7.4.0',  flyway: '7.4.0',   'flyway-test': '7.0.0',    spring: '5.3.1',           'spring-boot': '2.4.0',           'zonky-postgres': 'default'],
                    [name: '7.5.4',  flyway: '7.5.4',   'flyway-test': '7.0.0',    spring: '5.3.1',           'spring-boot': '2.4.0',           'zonky-postgres': 'default'],
                    [name: '7.6.0',  flyway: '7.6.0',   'flyway-test': '7.0.0',    spring: '5.3.1',           'spring-boot': '2.4.0',           'zonky-postgres': 'default'],
                    [name: '7.7.3',  flyway: '7.7.3',   'flyway-test': '7.0.0',    spring: '5.3.1',           'spring-boot': '2.4.0',           'zonky-postgres': 'default'],
                    [name: '7.8.2',  flyway: '7.8.2',   'flyway-test': '7.0.0',    spring: '5.3.1',           'spring-boot': '2.4.0',           'zonky-postgres': 'default'],
                    [name: 'no_sb',  flyway: 'default', 'flyway-test': 'default',                                                               'zonky-postgres': 'default']
            ]],
            [name: 'liquibase', versions: [
                    [name: '3.5.5',  liquibase: '3.5.5',  spring: '4.3.25.RELEASE',  'spring-boot': '1.5.22.RELEASE'],
                    [name: '3.6.3',  liquibase: '3.6.3',  spring: '5.1.19.RELEASE',  'spring-boot': '2.1.18.RELEASE'],
                    [name: '3.7.0',  liquibase: '3.7.0',  spring: '5.1.19.RELEASE',  'spring-boot': '2.1.18.RELEASE'],
                    [name: '3.8.9',  liquibase: '3.8.9',  spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE'],
                    [name: '3.9.0',  liquibase: '3.9.0',  spring: '5.2.10.RELEASE',  'spring-boot': '2.2.11.RELEASE'],
                    [name: '3.10.3', liquibase: '3.10.3', spring: '5.3.1',           'spring-boot': '2.4.0'],
                    [name: '4.0.0',  liquibase: '4.0.0',  spring: '5.3.1',           'spring-boot': '2.4.0'],
                    [name: '4.1.1',  liquibase: '4.1.1',  spring: '5.3.1',           'spring-boot': '2.4.0'],
                    [name: '4.2.0',  liquibase: '4.2.0',  spring: '5.3.1',           'spring-boot': '2.4.0'],
                    [name: 'no_sb',  liquibase: 'default']
            ]],
            [name: 'postgres', versions: [
                    [name: '9.5',  postgres: '9.5.20',  'zonky-postgres': '9.5.20-1',   opentable: '0.12.8',   yandex: 'default'],
                    [name: '9.6',  postgres: '9.6.16',  'zonky-postgres': '9.6.16-1',   opentable: '0.12.8',   yandex: 'default'],
                    [name: '10',   postgres: '10.11',   'zonky-postgres': '10.11.0-1',  opentable: '0.13.3',   yandex: 'default'],
                    [name: '11',   postgres: '11.6',    'zonky-postgres': '11.6.0-1',   opentable: 'default',  yandex: 'default'],
                    [name: '12',   postgres: '12.1',    'zonky-postgres': '12.1.0-1',   opentable: 'default',  yandex: 'default']
            ]],
            [name: 'mssql', versions: [
                    [name: '2017',  'mssql': '2017-latest',  'mssql-driver': 'default'],
                    [name: '2019',  'mssql': '2019-latest',  'mssql-driver': 'default']
            ]],
            [name: 'mysql', versions: [
                    [name: '5.6',  'mysql': '5.6',  'mysql-driver': 'default'],
                    [name: '5.7',  'mysql': '5.7',  'mysql-driver': 'default'],
                    [name: '8.0',  'mysql': '8.0',  'mysql-driver': 'default']
            ]],
            [name: 'mariadb', versions: [
                    [name: '10.1',  'mariadb': '10.1',  'mariadb-driver': 'default'],
                    [name: '10.2',  'mariadb': '10.2',  'mariadb-driver': 'default'],
                    [name: '10.3',  'mariadb': '10.3',  'mariadb-driver': 'default'],
                    [name: '10.4',  'mariadb': '10.4',  'mariadb-driver': 'default'],
                    [name: '10.5',  'mariadb': '10.5',  'mariadb-driver': 'default']
            ]]
    ]
}

allprojects {
    group 'io.zonky.test'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'nebula.optional-base'

    sourceCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'embedded-database-spring-test'
                    packaging 'jar'
                    description 'A library for creating isolated embedded databases for Spring-powered integration tests.'
                    url 'https://github.com/zonkyio/embedded-database-spring-test'

                    scm {
                        connection 'scm:git:git://github.com/zonkyio/embedded-database-spring-test.git'
                        developerConnection 'scm:git:ssh://github.com:zonkyio/embedded-database-spring-test.git'
                        url 'https://github.com/zonkyio/embedded-database-spring-test/tree/master'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name 'Tomas Vanek'
                            email 'tomix26@gmail.com'
                        }
                        developer {
                            name 'Zonky Developers'
                            email 'developers@zonky.cz'
                        }
                    }
                }
            }
        }
    }

    release {
        tagTemplate = 'v${version}'
        versionPatterns = [
            // increments the minor version: "1.0.0-SNAPSHOT" => "1.1.0-SNAPSHOT"
            /(\d+)\.\d+(([^\d\.].*)?$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}.0${m[0][2]}") }
        ]
        git {
            requireBranch = '^(master|\\d+\\.\\d+\\.x)$'
        }
    }
}

project(':embedded-database-spring-test-autoconfigure') {
}

project(':embedded-database-spring-test') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':embedded-database-spring-test-autoconfigure')

        compile 'org.testcontainers:postgresql:1.15.3'
        compile 'org.testcontainers:mssqlserver:1.15.3'
        compile 'org.testcontainers:mysql:1.15.3'
        compile 'org.testcontainers:mariadb:1.15.3'

        compile 'io.zonky.test:embedded-postgres:1.2.10', optional
        compile 'com.opentable.components:otj-pg-embedded:0.13.3', optional
        compile 'ru.yandex.qatools.embed:postgresql-embedded:2.10', optional

        compile 'org.postgresql:postgresql:42.2.18', optional
        compile 'com.microsoft.sqlserver:mssql-jdbc:8.4.1.jre8', optional
        compile 'mysql:mysql-connector-java:8.0.22', optional
        compile 'org.mariadb.jdbc:mariadb-java-client:2.7.0', optional

        compile 'org.flywaydb:flyway-core:7.3.0', optional
        compile 'org.flywaydb.flyway-test-extensions:flyway-spring-test:7.0.0', optional
        compile 'org.springframework.boot:spring-boot-starter-test:2.0.9.RELEASE', optional
        compile 'org.liquibase:liquibase-core:3.5.5', optional

        compile 'org.springframework:spring-context:5.0.13.RELEASE'
        compile 'org.springframework:spring-test:5.0.13.RELEASE'

        compile 'com.google.guava:guava:23.0'

        compile('com.cedarsoftware:java-util:1.34.0') {
            exclude group: 'org.apache.logging.log4j'
        }

        testCompile 'org.springframework:spring-jdbc:5.0.13.RELEASE'
        testCompile 'ch.qos.logback:logback-classic:1.2.3'
        testCompile 'org.mockito:mockito-core:3.9.0'
        testCompile 'org.assertj:assertj-core:3.18.1'
    }

    configurations {
        testSuites.each { suite ->
            suite.versions.each { version ->
                "testRuntime_${suite.name}_${version.name}" {
                    extendsFrom testRuntime
                    resolutionStrategy {

                        if (version.spring == 'none') { // mandatory dependencies must be explicitly excluded
                            exclude group: 'org.springframework'
                        } else if (version.spring != null) {
                            eachDependency { details ->
                                if (details.requested.group == 'org.springframework') {
                                    details.useVersion "${version.spring}"
                                }
                            }
                        }

                        if (version['spring-boot'] == null) { // optional dependencies are implicitly excluded
                            exclude group: 'org.springframework.boot'
                        } else if (version['spring-boot'] != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'org.springframework.boot') {
                                    details.useVersion "${version['spring-boot']}"
                                }
                            }
                        }

                        if (version.flyway == null) { // optional dependencies are implicitly excluded
                            exclude group: 'org.flywaydb', module: 'flyway-core'
                        } else if (version.flyway != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'org.flywaydb' && details.requested.name == 'flyway-core') {
                                    details.useVersion "${version.flyway}"
                                }
                            }
                        }

                        if (version['flyway-test'] == null) { // optional dependencies are implicitly excluded
                            exclude group: 'org.flywaydb.flyway-test-extensions'
                        } else if (version['flyway-test'] != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'org.flywaydb.flyway-test-extensions') {
                                    details.useVersion "${version['flyway-test']}"
                                }
                            }
                        }

                        if (version.liquibase == null) { // optional dependencies are implicitly excluded
                            exclude group: 'org.liquibase', module: 'liquibase-core'
                        } else if (version.liquibase != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'org.liquibase' && details.requested.name == 'liquibase-core') {
                                    details.useVersion "${version.liquibase}"
                                }
                            }
                        }

                        if (version['zonky-postgres'] == null) { // optional dependencies are implicitly excluded
                            exclude group: 'io.zonky.test.postgres'
                        } else if (version['zonky-postgres'] != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'io.zonky.test.postgres') {
                                    details.useVersion "${version['zonky-postgres']}"
                                }
                            }
                        }

                        if (version.opentable == null) { // optional dependencies are implicitly excluded
                            exclude group: 'com.opentable.components', module: 'otj-pg-embedded'
                        } else if (version.opentable != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'com.opentable.components' && details.requested.name == 'otj-pg-embedded') {
                                    details.useVersion "${version.opentable}"
                                }
                            }
                        }

                        if (version.yandex == null) { // optional dependencies are implicitly excluded
                            exclude group: 'ru.yandex.qatools.embed', module: 'postgresql-embedded'
                        } else if (version.yandex != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'ru.yandex.qatools.embed' && details.requested.name == 'postgresql-embedded') {
                                    details.useVersion "${version.yandex}"
                                }
                            }
                        }

                        if (version['mssql-driver'] == null) { // optional dependencies are implicitly excluded
                            exclude group: 'com.microsoft.sqlserver', module: 'mssql-jdbc'
                        } else if (version['mssql-driver'] != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'com.microsoft.sqlserver' && details.requested.name == 'mssql-jdbc') {
                                    details.useVersion "${version['mssql-driver']}"
                                }
                            }
                        }

                        if (version['mysql-driver'] == null) { // optional dependencies are implicitly excluded
                            exclude group: 'mysql', module: 'mysql-connector-java'
                        } else if (version['mysql-driver'] != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'mysql' && details.requested.name == 'mysql-connector-java') {
                                    details.useVersion "${version['mysql-driver']}"
                                }
                            }
                        }

                        if (version['mariadb-driver'] == null) { // optional dependencies are implicitly excluded
                            exclude group: 'org.mariadb.jdbc', module: 'mariadb-java-client'
                        } else if (version['mariadb-driver'] != 'default') {
                            eachDependency { details ->
                                if (details.requested.group == 'org.mariadb.jdbc' && details.requested.name == 'mariadb-java-client') {
                                    details.useVersion "${version['mariadb-driver']}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer

    [installer, deployer]*.pom*.whenConfigured { pom ->
        pom.dependencies = pom.dependencies.findAll {
            it.groupId != 'com.google.guava' && it.artifactId != 'guava'
        }
    }

    shadowJar {
        archiveClassifier.set('')

        dependencies {
            include(dependency('com.google.guava:guava'))
        }

        relocate 'com.google.common', 'io.zonky.test.db.shaded.com.google.common'
        minimize()
    }

    jar {
        enabled = false
        dependsOn shadowJar
    }

    test {
        classpath -= configurations.testRuntime
        classpath += configurations."testRuntime_default_suite"

        useJUnit {
            excludeCategories 'io.zonky.test.category.SpringTestSuite'
            excludeCategories 'io.zonky.test.category.FlywayTestSuite'
            excludeCategories 'io.zonky.test.category.LiquibaseTestSuite'
            excludeCategories 'io.zonky.test.category.PostgresTestSuite'
            excludeCategories 'io.zonky.test.category.MSSQLTestSuite'
            excludeCategories 'io.zonky.test.category.MySQLTestSuite'
            excludeCategories 'io.zonky.test.category.MariaDBTestSuite'
        }
    }

    testSuites.tail().each { suite ->
        suite.versions.each { version ->
            task "test_${suite.name}_${version.name}"(type: Test, group: 'verification') {
                dependsOn jar

                classpath -= configurations.testRuntime
                classpath += configurations."testRuntime_${suite.name}_${version.name}"

                if (version.postgres) {
                    environment 'ZONKY_TEST_DATABASE_POSTGRES_YANDEX-PROVIDER_POSTGRES-VERSION', "${version.postgres}-1"
                    environment 'ZONKY_TEST_DATABASE_POSTGRES_DOCKER_IMAGE', "postgres:${version.postgres}-alpine"
                }
                if (version.mssql) {
                    environment 'ZONKY_TEST_DATABASE_MSSQL_DOCKER_IMAGE', "mcr.microsoft.com/mssql/server:${version.mssql}"
                }
                if (version.mysql) {
                    environment 'ZONKY_TEST_DATABASE_MYSQL_DOCKER_IMAGE', "mysql:${version.mysql}"
                }
                if (version.mariadb) {
                    environment 'ZONKY_TEST_DATABASE_MARIADB_DOCKER_IMAGE', "mariadb:${version.mariadb}"
                }

                useJUnit {
                    if (suite.name == 'spring') {
                        includeCategories 'io.zonky.test.category.SpringTestSuite'
                    } else if (suite.name == 'flyway') {
                        includeCategories 'io.zonky.test.category.FlywayTestSuite'
                    } else if (suite.name == 'liquibase') {
                        includeCategories 'io.zonky.test.category.LiquibaseTestSuite'
                    } else if (suite.name == 'postgres') {
                        includeCategories 'io.zonky.test.category.PostgresTestSuite'
                    } else if (suite.name == 'mssql') {
                        includeCategories 'io.zonky.test.category.MSSQLTestSuite'
                    } else if (suite.name == 'mysql') {
                        includeCategories 'io.zonky.test.category.MySQLTestSuite'
                    } else if (suite.name == 'mariadb') {
                        includeCategories 'io.zonky.test.category.MariaDBTestSuite'
                    }
                }
            }
            check.dependsOn("test_${suite.name}_${version.name}")
        }
    }

    tasks.withType(Test) {
        testLogging {
            showStandardStreams = true
            showStackTraces = true
            exceptionFormat = 'full'
        }
    }
}

task updateReadmeVersion() {
    doLast {
        def version = project.version.toString()
        ant.replaceregexp(file: 'README.md',
                match: '(?<=<artifactId>embedded-database-spring-test</artifactId>\\n\\s{4,12})<version>\\d+\\.\\d+\\.\\d+</version>',
                replace: "<version>$version</version>", flags: 'g')
    }
}

// workaround for https://github.com/researchgate/gradle-release/issues/186
task build(group: 'build') {
    subprojects.each {
        dependsOn "${it.path}:build"
    }
}

runBuildTasks.dependsOn updateReadmeVersion

afterReleaseBuild {
    subprojects.each {
        dependsOn "${it.path}:uploadArchives"
    }
}
