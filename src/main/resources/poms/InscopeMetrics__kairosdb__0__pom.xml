<?xml version="1.0"?>
<!--
  ~ Copyright 2020 Inscope Metrics
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <parent>
    <groupId>io.inscopemetrics.build</groupId>
    <artifactId>parent-pom</artifactId>
    <version>2.3.1</version>
    <relativePath />
  </parent>

  <modelVersion>4.0.0</modelVersion>
  <groupId>io.inscopemetrics.kairosdb</groupId>
  <artifactId>kairosdb</artifactId>
  <packaging>jar</packaging>
  <name>kairosdb</name>
  <description>KairosDB is a fast distributed scalable time series abstraction on top of Cassandra.</description>
  <version>1.2.24-SNAPSHOT</version>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
      <comments>A business-friendly OSS license</comments>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>barp</id>
      <name>Brandon Arp</name>
      <email>brandon.arp@inscopemetrics.io</email>
      <organization>Inscope Metrics</organization>
      <organizationUrl>http://www.inscopemetrics.io</organizationUrl>
      <roles>
        <role>developer</role>
      </roles>
    </developer>
    <developer>
      <id>cbriones</id>
      <name>Christian Briones</name>
      <email>cwbriones@gmail.com</email>
      <organization>Dropbox</organization>
      <organizationUrl>http://www.dropbox.com</organizationUrl>
      <roles>
        <role>developer</role>
      </roles>
    </developer>
    <developer>
      <id>gmarkham</id>
      <name>Gil Markham</name>
      <email>gmarkham@dropbox.com</email>
      <organization>Dropbox</organization>
      <organizationUrl>http://www.dropbox.com</organizationUrl>
      <roles>
        <role>developer</role>
      </roles>
    </developer>
    <developer>
      <id>vkoskela</id>
      <name>Ville Koskela</name>
      <email>ville.koskela@inscopemetrics.io</email>
      <organization>Inscope Metrics</organization>
      <organizationUrl>http://www.inscopemetrics.io</organizationUrl>
      <roles>
        <role>developer</role>
      </roles>
    </developer>
    <developer>
      <id>wehlhardt</id>
      <name>William Ehlhardt</name>
      <email>williamehlhardt@gmail.com</email>
      <organization>Dropbox</organization>
      <organizationUrl>http://www.dropbox.com</organizationUrl>
      <roles>
        <role>developer</role>
      </roles>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:git@github.com:InscopeMetrics/kairosdb.git</connection>
    <developerConnection>scm:git:git@github.com:InscopeMetrics/kairosdb.git</developerConnection>
    <url>https://github.com/InscopeMetrics/kairosdb</url>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <!--Dependency versions-->
    <apache.commons.collections.version>4.1</apache.commons.collections.version>
    <apache.commons.io.version>2.5</apache.commons.io.version>
    <apache.commons.lang.version>3.4</apache.commons.lang.version>
    <apache.commons.math.version>3.2</apache.commons.math.version>
    <apache.httpclient.version>4.3.6</apache.httpclient.version>
    <apache.httpcore.version>4.3.3</apache.httpcore.version>
    <arpnetworking.commons.version>1.18.3</arpnetworking.commons.version>
    <bigqueue.version>1.6.0.0</bigqueue.version>
    <bval.jsr303.version>0.5</bval.jsr303.version>
    <cassandra.driver.core.version>3.3.2</cassandra.driver.core.version>
    <codahale.version>3.0.2</codahale.version>
    <dropwizard.metrics.version>3.2.2</dropwizard.metrics.version>
    <genormous.version>1.6.4.jdbc41</genormous.version>
    <gson.version>2.2.4</gson.version>
    <guava.version>19.0</guava.version>
    <guice.version>4.1.0</guice.version>
    <guava.retrying.version>2.0.0</guava.retrying.version>
    <jackson.version>2.10.5</jackson.version>
    <javax.inject.version>1</javax.inject.version>
    <javax.servlet.version>3.0.0.v201112011016</javax.servlet.version>
    <javax.validation.api.version>1.0.0.GA</javax.validation.api.version>
    <jaxen.version>1.1.6</jaxen.version>
    <jcommander.version>1.35</jcommander.version>
    <jersey.version>1.18.3</jersey.version>
    <jetty.version>8.1.16.v20140903</jetty.version>
    <joda.time.version>2.3</joda.time.version>
    <json.version>chargebee-1.0</json.version>
    <jsr305.version>2.0.2</jsr305.version>
    <logback.version>1.1.7</logback.version>
    <lz4.version>1.3.0</lz4.version>
    <metrics.client.version>0.11.3</metrics.client.version>
    <metrics.client.http.version>0.11.2</metrics.client.http.version>
    <metrics.client.incubator.version>0.11.2</metrics.client.incubator.version>
    <metrics.jvm.extra.version>0.11.2</metrics.jvm.extra.version>
    <netty.version>3.10.6.Final</netty.version>
    <quartz.scheduler.version>2.1.7</quartz.scheduler.version>
    <slf4j.version>1.7.2</slf4j.version>

    <!--Test dependency versions-->
    <assertj.version>3.11.1</assertj.version>
    <hamcrest.version>1.3</hamcrest.version>
    <junit.version>4.12</junit.version>
    <junit.dataprovider.version>2.6</junit.dataprovider.version>
    <mockito.version>2.13.0</mockito.version>

    <!-- Additional Plugins -->
    <docker.maven.plugin.version>0.27.2</docker.maven.plugin.version>
    <maven.assembly.plugin.version>2.6</maven.assembly.plugin.version>
    <maven.properties.plugin.version>1.0.0</maven.properties.plugin.version>
    <rpm.maven.plugin.version>2.1.5</rpm.maven.plugin.version>

    <!-- Code Coverage -->
    <jacoco.check.line.coverage>0.51</jacoco.check.line.coverage>
    <jacoco.check.branch.coverage>0.46</jacoco.check.branch.coverage>
    <!-- TODO(ville): Reduce complexity and tighten this down until we get to 10 and then remove -->
    <jacoco.check.cyclomatic.complexity>30.0</jacoco.check.cyclomatic.complexity>

    <!-- JVM Debug -->
    <debugJavaOptions />
    <debugJavaPort>9005</debugJavaPort>

    <!-- Docker Overrides -->
    <skipDockerBuild>false</skipDockerBuild>
    <docker.skip.cassandra>false</docker.skip.cassandra>
    <docker.cassandra.version>3.11</docker.cassandra.version>

    <!-- Assembly Overrides -->
    <tgz.finalName>${project.build.finalName}</tgz.finalName>

    <!-- Project Overrides -->
    <buildDirectory>${project.basedir}/target</buildDirectory>
    <!-- TODO: Address Spotbugs issues -->
    <skipSpotbugs>true</skipSpotbugs>
    <!-- TODO: Reformat all code and address remaining issues -->
    <skipCheckstyle>true</skipCheckstyle>
  </properties>

  <build>
    <directory>${buildDirectory}</directory>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <!-- Customize Inherited Plugins -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <!-- TODO(ville): Improve tests to enable parallel execution -->
        <executions>
          <execution>
            <id>default-test</id>
            <configuration>
              <parallel combine.self="override" />
              <threadCount>1</threadCount>
              <perCoreThreadCount>false</perCoreThreadCount>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <!-- TODO(ville): Improve tests to enable parallel execution -->
        <configuration>
          <parallel combine.self="override" />
          <perCoreThreadCount>false</perCoreThreadCount>
          <threadCount>1</threadCount>
          <systemPropertyVariables>
            <dockerHostAddress>${docker.host.address}</dockerHostAddress>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <!-- TODO(ville): Fix broken/missing Javadoc -->
        <configuration>
          <doclint>none</doclint>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>analyze</id>
            <configuration>
              <ignoredDependencies>
                <!-- TODO(ville): This is actually a compile dependency but is not detected as such -->
                <ignoredDependency>com.sun.jersey:jersey-servlet:jar:*</ignoredDependency>
                <!-- TODO(ville): These flip-flop when analyzed between used-undeclared and declared-unused -->
                <ignoredDependency>io.dropwizard.metrics:metrics-core:jar:*</ignoredDependency>
                <ignoredDependency>com.codahale.metrics:metrics-core:jar:*</ignoredDependency>
              </ignoredDependencies>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Enable Inherited Plugins -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.rimerosolutions.maven.plugins</groupId>
        <artifactId>wrapper-maven-plugin</artifactId>
        <inherited>false</inherited>
      </plugin>
      <!-- Project Specific Plugins -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${maven.clean.plugin.version}</version>
        <executions>
          <execution>
            <id>clean-assemblies</id>
            <phase>initialize</phase>
            <goals>
              <goal>clean</goal>
            </goals>
            <configuration>
              <excludeDefaultDirectories>true</excludeDefaultDirectories>
              <verbose>true</verbose>
              <filesets>
                <fileset>
                  <directory>${project.build.directory}/docker-assembly</directory>
                  <directory>${project.build.directory}/appassembler</directory>
                </fileset>
              </filesets>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>appassembler-maven-plugin</artifactId>
        <configuration>
          <programs>
            <program>
              <id>kairosdb</id>
              <mainClass>org.kairosdb.core.Main</mainClass>
            </program>
          </programs>
          <unixScriptTemplate>${project.build.directory}/build-resources/appAssemblerUnixBinTemplate
          </unixScriptTemplate>
          <endorsedDir>lib/ext</endorsedDir>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${maven.assembly.plugin.version}</version>
        <executions>
          <execution>
            <id>docker-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
              <finalName>docker-assembly</finalName>
              <attach>false</attach>
              <tarLongFileMode>posix</tarLongFileMode>
              <descriptors>
                <descripto>src/main/assembly/docker.xml</descripto>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>app-tgz</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <finalName>${tgz.finalName}</finalName>
              <appendAssemblyId>true</appendAssemblyId>
              <attach>false</attach>
              <tarLongFileMode>posix</tarLongFileMode>
              <descriptors>
                <descriptor>src/main/assembly/bin.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <id>default-build</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
          <execution>
            <id>default-start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <skip>${skipIntegrationTests}</skip>
            </configuration>
          </execution>
          <execution>
            <id>default-stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <skip>${skipIntegrationTests}</skip>
            </configuration>
          </execution>
          <execution>
            <id>default-push</id>
            <phase>deploy</phase>
            <goals>
              <goal>push</goal>
            </goals>
            <configuration>
              <filter>inscopemetrics/kairosdb:${project.version}</filter>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
          <showLogs>true</showLogs>
          <!-- Cassandra -->
          <images>
            <image>
              <name>cassandra:${docker.cassandra.version}</name>
              <alias>cassandra</alias>
              <run>
                <skip>${docker.skip.cassandra}</skip>
                <network>
                  <mode>custom</mode>
                  <name>kdb-net</name>
                  <alias>cassandra</alias>
                </network>
                <ports>
                  <port>+cassandra.ip:7000:7000</port>
                  <port>+cassandra.ip:9042:9042</port>
                </ports>
                <wait>
                  <log>Starting listening for CQL clients on</log>
                  <time>30000</time>
                </wait>
              </run>
            </image>
            <!-- KairosDb (no extensions) -->
            <image>
              <name>inscopemetrics/kairosdb:${project.version}</name>
              <alias>kairosdb</alias>
              <build>
                <dockerFile>${project.build.directory}/docker-assembly/Dockerfile</dockerFile>
                <tags>
                  <tag>${buildNumber}</tag>
                </tags>
              </build>
              <run>
                <dependsOn>
                  <container>cassandra</container>
                </dependsOn>
                <network>
                  <mode>custom</mode>
                  <name>kdb-net</name>
                  <alias>kairosdb</alias>
                </network>
                <ports>
                  <port>+kairosdb.ip:${debugJavaPort}:${debugJavaPort}</port>
                  <port>+kairosdb.ip:8080:8080</port>
                </ports>
                <env>
                  <JAVA_OPTS>-Dkairosdb.datastore.cassandra.cql_host_list=cassandra ${debugJavaOptions}</JAVA_OPTS>
                  <!-- TODO(ville): Obtain these from the current user! -->
                  <!-- Ref: https://github.com/rynr/user-id-maven-plugin -->
                  <KDB_UID>1000</KDB_UID>
                  <KDB_GID>1000</KDB_GID>
                </env>
                <volumes>
                  <bind>
                    <volume>${project.basedir}/logs/docker:/opt/kairosdb/logs</volume>
                  </bind>
                </volumes>
                <wait>
                  <time>30000</time>
                  <http>
                    <url>http://${kairosdb.ip}:8080/api/v1/health/status</url>
                    <method>GET</method>
                    <status>200</status>
                  </http>
                  <time>30000</time>
                </wait>
              </run>
            </image>
          </images>
          <skip>${skipDockerBuild}</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>${maven.properties.plugin.version}</version>
        <executions>
          <execution>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>write-project-properties</goal>
            </goals>
            <configuration>
              <outputFile>
                ${project.build.directory}/pre-integration-test.properties
              </outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <!-- Logging & Metrics -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jul-to-slf4j</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>com.codahale.metrics</groupId>
      <artifactId>metrics-core</artifactId>
      <version>${codahale.version}</version>
    </dependency>
    <dependency>
      <groupId>com.codahale.metrics</groupId>
      <artifactId>metrics-healthchecks</artifactId>
      <version>${codahale.version}</version>
    </dependency>
    <dependency>
      <groupId>com.codahale.metrics</groupId>
      <artifactId>metrics-jvm</artifactId>
      <version>${codahale.version}</version>
      <!-- TODO(ville): Confirm this package is actually used -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.arpnetworking.commons</groupId>
      <artifactId>commons</artifactId>
      <version>${arpnetworking.commons.version}</version>
    </dependency>
    <dependency>
      <groupId>com.arpnetworking.metrics</groupId>
      <artifactId>metrics-client</artifactId>
      <version>${metrics.client.version}</version>
    </dependency>
    <dependency>
      <groupId>com.arpnetworking.metrics.extras</groupId>
      <artifactId>apache-http-sink-extra</artifactId>
      <version>${metrics.client.http.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.arpnetworking.metrics.extras</groupId>
      <artifactId>jvm-extra</artifactId>
      <version>${metrics.jvm.extra.version}</version>
    </dependency>
    <dependency>
      <groupId>com.arpnetworking.metrics.extras</groupId>
      <artifactId>incubator-extra</artifactId>
      <version>${metrics.client.incubator.version}</version>
    </dependency>

    <!-- Google -->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.rholder</groupId>
      <artifactId>guava-retrying</artifactId>
      <version>${guava.retrying.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>${gson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>${guice.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-multibindings</artifactId>
      <version>${guice.version}</version>
      <!-- TODO(ville): Confirm this package is actually used -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-assistedinject</artifactId>
      <version>${guice.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-servlet</artifactId>
      <version>${guice.version}</version>
    </dependency>

    <!-- Apache -->
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>${apache.httpclient.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <version>${apache.httpcore.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${apache.commons.lang.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
      <version>${apache.commons.collections.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-math3</artifactId>
      <version>${apache.commons.math.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>${apache.commons.io.version}</version>
    </dependency>

    <!-- Datastores -->
    <dependency>
      <groupId>jaxen</groupId>
      <artifactId>jaxen</artifactId>
      <version>${jaxen.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
      <!-- TODO(ville): Confirm this package is actually used -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.datastax.cassandra</groupId>
      <artifactId>cassandra-driver-core</artifactId>
      <version>${cassandra.driver.core.version}</version>
    </dependency>

    <!-- Jackson -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-properties</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-guava</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <!-- Jetty -->
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlets</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-security</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-util</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.orbit</groupId>
      <artifactId>javax.servlet</artifactId>
      <version>${javax.servlet.version}</version>
    </dependency>

    <!-- Jersey -->
    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-guice</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-server</artifactId>
      <version>${jersey.version}</version>
      <!-- TODO(ville): Confirm this package is actually used -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-core</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-servlet</artifactId>
      <version>${jersey.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey.contribs.jersey-oauth</groupId>
      <artifactId>oauth-signature</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey.contribs.jersey-oauth</groupId>
      <artifactId>oauth-server</artifactId>
      <version>${jersey.version}</version>
      <!-- TODO(ville): Confirm this package is actually used -->
      <scope>runtime</scope>
    </dependency>

    <!-- Other -->
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <version>${javax.inject.version}</version>
    </dependency>
    <dependency>
      <groupId>org.json</groupId>
      <artifactId>org.json</artifactId>
      <version>${json.version}</version>
    </dependency>
    <dependency>
      <groupId>se.ugli.bigqueue</groupId>
      <artifactId>bigqueue</artifactId>
      <version>${bigqueue.version}</version>
    </dependency>
    <dependency>
      <groupId>com.beust</groupId>
      <artifactId>jcommander</artifactId>
      <version>${jcommander.version}</version>
    </dependency>
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>${joda.time.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <version>${jsr305.version}</version>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <version>${javax.validation.api.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.bval</groupId>
      <artifactId>bval-jsr303</artifactId>
      <version>${bval.jsr303.version}</version>
    </dependency>
    <dependency>
      <groupId>net.jpountz.lz4</groupId>
      <artifactId>lz4</artifactId>
      <version>${lz4.version}</version>
      <!-- TODO(ville): Confirm this package is actually used -->
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
      <version>${quartz.scheduler.version}</version>
    </dependency>

    <!-- Test - General -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.tngtech.junit.dataprovider</groupId>
      <artifactId>junit4-dataprovider</artifactId>
      <version>${junit.dataprovider.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>performanceTest</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <executions>
              <execution>
                <id>default-test</id>
                <phase>test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
                <configuration>
                  <includes>
                    <include>**/*PT.java</include>
                  </includes>
                  <systemPropertyVariables>
                    <logback.configurationFile>${basedir}/src/test/resources/logback-perf.xml
                    </logback.configurationFile>
                  </systemPropertyVariables>
                  <parallel combine.self="override" />
                  <forkCount>1</forkCount>
                  <reuseForks>false</reuseForks>
                  <argLine>
                    -agentlib:hprof=cpu=samples,depth=15,interval=5,force=y,file=${buildDirectory}/perf.profile.hprof.txt
                  </argLine>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>rpm</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>rpm-maven-plugin</artifactId>
            <version>${rpm.maven.plugin.version}</version>
            <executions>
              <execution>
                <id>generate-rpm</id>
                <goals>
                  <goal>rpm</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <license>Apache 2 License</license>
              <group>System Environment/Daemons</group>
              <autoRequires>false</autoRequires>
              <preinstallScriptlet>
                <scriptFile>rpm/scripts/pre.sh</scriptFile>
              </preinstallScriptlet>
              <postinstallScriptlet>
                <scriptFile>rpm/scripts/post.sh</scriptFile>
              </postinstallScriptlet>
              <preremoveScriptlet>
                <scriptFile>rpm/scripts/preun.sh</scriptFile>
              </preremoveScriptlet>
              <postremoveScriptlet>
                <scriptFile>rpm/scripts/postun.sh</scriptFile>
              </postremoveScriptlet>
              <requires>
                <require>java &gt;= ${jdk.version}</require>
                <require>initscripts</require>
                <require>which</require>
              </requires>
              <mappings>
                <mapping>
                  <directory>/opt/kairosdb</directory>
                  <sources>
                    <source>
                      <location>${buildDirectory}/appassembler</location>
                    </source>
                  </sources>
                </mapping>
                <mapping>
                  <directory>/opt/kairosdb/config</directory>
                  <sources>
                    <source>
                      <location>config</location>
                    </source>
                  </sources>
                </mapping>
                <mapping>
                  <directory>/</directory>
                  <sources>
                    <source>
                      <location>rpm/fs</location>
                    </source>
                  </sources>
                </mapping>
                <!-- symlink the start script -->
                <mapping>
                  <directory>/usr/local/bin</directory>
                  <sources>
                    <softlinkSource>
                      <location>/opt/kairosdb/bin/kairosdb</location>
                    </softlinkSource>
                  </sources>
                </mapping>
              </mappings>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>debug</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>debug</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <debugJavaOptions>-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${debugJavaPort},suspend=n
        </debugJavaOptions>
      </properties>
    </profile>
    <profile>
      <id>no-docker</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <skipIntegrationTests>true</skipIntegrationTests>
        <skipDockerBuild>true</skipDockerBuild>
      </properties>
    </profile>
  </profiles>
</project>
