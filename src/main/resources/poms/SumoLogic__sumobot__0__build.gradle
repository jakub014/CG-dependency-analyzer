def scalaMajorVersion = gradle.ext.scalaMajorVersion
def scalaMinorVersion = gradle.ext.scalaMinorVersion

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://dl.bintray.com/ngbinh/maven"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0"
        classpath "org.owasp:dependency-check-gradle:5.2.4"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.38.0"
    }
}

apply plugin: "java"
apply plugin: "scala"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "application"
apply plugin: "com.github.hierynomus.license"
apply plugin: "signing"
apply plugin: "org.owasp.dependencycheck"
apply plugin: "com.github.ben-manes.versions"

group = "com.sumologic.sumobot"
description = "A Slack bot implemented in Akka"

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '1.0.13-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile "com.github.slack-scala-client:slack-scala-client_${scalaMajorVersion}:0.2.16"
    compile "com.typesafe.akka:akka-testkit_${scalaMajorVersion}:${akkaVersion}"
    compile "com.typesafe.akka:akka-stream_${scalaMajorVersion}:${akkaVersion}"
    compile "org.scalatest:scalatest_${scalaMajorVersion}:3.0.8"
    compile("com.offbytwo.jenkins:jenkins-client:0.3.8") {
        exclude group: 'commons-beanutils', module: 'commons-beanutils'
        exclude group: 'dom4j', module: 'dom4j'
    }
    compile('commons-beanutils:commons-beanutils:1.9.4')
    compile("org.apache.httpcomponents:httpclient:4.5.13") {
        force = true
    }
    compile "org.scalatra.scalate:scalate-core_${scalaMajorVersion}:1.9.6"
    compile "org.slf4j:slf4j-log4j12:1.7.30"
    compile "com.amazonaws:aws-java-sdk-support:${awsSdkVersion}"
    compile "com.amazonaws:aws-java-sdk-s3:${awsSdkVersion}"
    compile("org.quartz-scheduler:quartz:2.3.2") {
        exclude group: "c3p0", module: "c3p0"
    }
    compile "com.mchange:c3p0:0.9.5.5"
    compile("net.liftweb:lift-json_${scalaMajorVersion}:3.4.1") {
        exclude group: "org.specs2", module: "specs2_${scalaMajorVersion}"
    }
    compile "org.scala-lang:scala-compiler:${scalaMajorVersion}.${scalaMinorVersion}"
    compile "org.scala-lang:scalap:${scalaMajorVersion}.${scalaMinorVersion}"
    compile "org.scala-lang:scala-reflect:${scalaMajorVersion}.${scalaMinorVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:2.10.0"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.10.0"
    compile "com.fasterxml.jackson.core:jackson-core:2.10.0"
    compile "org.dom4j:dom4j:2.1.3"
    compile "com.google.guava:guava:27.1-jre"
    compile "commons-beanutils:commons-beanutils:1.9.3"
    compile "com.typesafe.play:play-json_${scalaMajorVersion}:2.7.4"
    compile "com.pauldijou:jwt-play-json_${scalaMajorVersion}:3.1.0"
    compile "com.typesafe.akka:akka-http_${scalaMajorVersion}:10.1.14"
    compile "org.joda:joda-convert:2.2.1"
    compile "junit:junit:4.13.2"
    testCompile "org.mockito:mockito-core:3.10.0"
}

compileScala {
    scalaCompileOptions.additionalParameters = [
        "-feature", "-target:jvm-1.8", "-deprecation", "-language:implicitConversions",
        "-unchecked"
        // , "-Xfatal-warnings" // NOTE(chris, 2020-07-03): As much as I'd like fatal-warnings, it's basically impossible with 2.12 and 2.13
    ]
}

application {
    mainClassName = 'com.sumologic.sumobot.Main'
}

ext.gitCommitIdAbbrev = System.getenv('GIT_COMMIT_ID_ABBREV') ?: 'git rev-parse --verify --short=12 HEAD'.execute().text.trim()

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from(sourceSets.main.allJava) {
        expand(project: [version: project.version], git: [commit: [id: [abbrev: gitCommitIdAbbrev]]])
    }
    from(sourceSets.main.allScala)
}

task javadocJar(type: Jar, dependsOn: scaladoc) {
    from javadoc
    from scaladoc
    archiveClassifier.set('javadoc')
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId(project.group)
            artifactId(project.name + "_${scalaMajorVersion}")
            version(project.version)

            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/SumoLogic/sumobot'

                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'goledzki'
                        name = 'Greg Oledzki'
                        organization = 'Sumo Logic'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:SumoLogic/sumobot.git'
                    developerConnection = 'scm:git:git@github.com:SumoLogic/sumobot.git'
                    url = 'https://github.com/SumoLogic/sumobot'
                    tag = 'HEAD'
                }
            }

            from(components.java)
            artifact(sourcesJar)
            artifact(javadocJar)
        }
    }
    repositories {
        maven {
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username project.findProperty("nexus_username") ?: ""
                password project.findProperty("nexus_password") ?: ""
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.maven
}

license {
    header rootProject.file('src/etc/header.txt')
    strictCheck true
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencyCheck {
    format = 'ALL'
    suppressionFile = 'project-suppression.xml'
}
