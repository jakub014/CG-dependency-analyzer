/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.7/samples
 */

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.2.0"
		classpath 'net.saliman:gradle-properties-plugin:1.5.1'
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.1.1"
		classpath "com.github.node-gradle:gradle-node-plugin:3.0.1"
		classpath "io.freefair.gradle:lombok-plugin:5.3.0"
	}
}

apply plugin: 'net.saliman.properties'
apply plugin: 'org.sonarqube'

ext.libraries = [
		vavr: 'io.vavr:vavr:0.10.3',
		jackson_annotations: 'com.fasterxml.jackson.core:jackson-annotations:2.11.3',
		jackson: [
				'com.fasterxml.jackson.core:jackson-databind:2.11.3',
				'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.11.3',
		 		'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.3',
				'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.11.3',
				'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.3',
				'com.fasterxml.jackson.core:jackson-annotations:2.11.3',
				'com.fasterxml.jackson.core:jackson-core:2.11.3',
				'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.11.3'
		],
		slf4j_api: 'org.slf4j:slf4j-api:1.7.29',
		r2dbc_spi: 'io.r2dbc:r2dbc-spi:0.8.4.RELEASE',
		r2dbc_pool: 'io.r2dbc:r2dbc-pool:0.8.6.RELEASE',
		r2dbc_proxy: 'io.r2dbc:r2dbc-spi:r2dbc-proxy:0.8.5.RELEASE',
		r2dbc_postgresql: 'io.r2dbc:r2dbc-postgresql:0.8.7.RELEASE',
		micrometer: 'io.micrometer:micrometer-core:1.6.2',
		micrometer_registry_prometheus: 'io.micrometer:micrometer-registry-prometheus:1.6.2',
		micrometer_registry_elastic: 'io.micrometer:micrometer-registry-elastic:1.6.2',
		prometheus: [
				'io.prometheus:simpleclient_common:0.9.0',
				'io.prometheus:simpleclient:0.9.0'
		],
		hdrhistogram: 'org.hdrhistogram:HdrHistogram:2.1.12',
		latencyutils: 'org.latencyutils:LatencyUtils:2.0.3',
		reactivestreams: 'org.reactivestreams:reactive-streams:1.0.3',
		caffeine: 'com.github.ben-manes.caffeine:caffeine:2.8.8',
		checkerframework_checker_qual: 'org.checkerframework:checker-qual:3.8.0',
		google_errorprone_error_prone_annotations: 'com.google.errorprone:error_prone_annotations:2.4.0',
		reactor: [
		        'io.projectreactor:reactor-core:3.4.4',
				'io.projectreactor.addons:reactor-extra:3.4.2'
		],
		reactor_tools: 'io.projectreactor:reactor-tools:3.4.4',
		reactor_netty: [
				'io.projectreactor.netty:reactor-netty:1.0.5'
		],
		osgi: 'org.osgi:osgi.core:7.0.0',
		osgi_service_cm: 'org.osgi:org.osgi.service.cm:1.6.0',
		reactor_rabbitmq: 'io.projectreactor.rabbitmq:reactor-rabbitmq:1.5.2',
		karaf_scheduler: [
				'org.apache.karaf.scheduler:org.apache.karaf.scheduler.core:4.3.0'
		],
		karaf_features: [
				'org.apache.karaf.features:org.apache.karaf.features.core:4.3.0'
		],
		karaf_jdbc_core: [
				'org.apache.karaf.jdbc:org.apache.karaf.jdbc.core:4.3.0'
		],
		elasticsearch: 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.9.3',
		avro:  'org.apache.avro:avro:1.10.0',
		felix_dependencymanager: 'org.apache.felix:org.apache.felix.dependencymanager:4.6.0'
]

subprojects {
	def bndfile = file("$projectDir/bnd.bnd");
	if (!bndfile.exists()) {
		return;
	}

	apply plugin: 'java'
	apply plugin: 'biz.aQute.bnd.builder'
	apply plugin: "io.freefair.lombok"

	lombok {
		version = "1.18.18"
	}

	generateLombokConfig.enabled = false

	jar {
		ext.taskprop = 'prop.task'
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	def karafDir = properties.get("karafDir", "karaf")

	sourceCompatibility = 11
	targetCompatibility = 11


	dependencies {
		compileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
		compileOnly 'org.projectlombok:lombok:1.18.18'
		annotationProcessor 'org.projectlombok:lombok:1.18.18'
	}

	apply from: "$rootDir/build-publishing.gradle"

	task buildBundleDir(type: Copy) {
		dependsOn(jar)
		from(zipTree(tasks.jar.outputs.files.singleFile))
		into "$buildDir/bundleDir"
	}

	if (properties.get("karafDir") != null) {
		task deploy(type: Copy) {
			dependsOn(jar)
			from(tasks.jar.outputs.files.singleFile)

			into "$karafDir/deploy"
		}
	}

}

apply from: "build-dist.gradle"