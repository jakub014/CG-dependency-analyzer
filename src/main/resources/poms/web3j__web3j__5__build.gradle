import java.text.SimpleDateFormat

apply plugin: 'org.ajoberstar.git-publish'


description 'web3j is a lightweight Java library for integration with Ethereum clients'

dependencies {
    compile project(':abi'),
            project(':crypto'),
            project(':tuples'),
            "com.github.jnr:jnr-unixsocket:$jnr_unixsocketVersion",
            "com.squareup.okhttp3:okhttp:$okhttpVersion",
            "com.squareup.okhttp3:logging-interceptor:$okhttpVersion",
            "io.reactivex.rxjava2:rxjava:$rxjavaVersion",
            "org.java-websocket:Java-WebSocket:$javaWebSocketVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "org.slf4j:slf4j-api:$slf4jVersion"
    testCompile project(path: ':crypto', configuration: 'testArtifacts'),
    "nl.jqno.equalsverifier:equalsverifier:$equalsverifierVersion",
    "ch.qos.logback:logback-classic:$logbackVersion"
}

task createProperties(dependsOn: processResources) doLast {
    // if resources dir is empty we need to create this ourselves
    new File("$buildDir/resources/main/").mkdirs()

    new File("$buildDir/resources/main/web3j-version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p['timestamp'] = getTimestamp()
        p.store w, null
    }
}

def getTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S z")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(today)
}

ext {
    docsPath = 'web3j/web3j-docs'
    ghToken = System.getenv('GITHUB_TOKEN')
}

gitPublish {

    if (ghToken) {
        repoUri = "https://github.com/${docsPath}.git"

    } else {
        repoUri = "git@github.com:${docsPath}.git"
    }

    // branch will be created if it doesn't exist
    branch = 'master'

    def coreDocs = files("${buildDir.path}/docs/javadoc/")

    contents {
        from(coreDocs) {
            into '/docs/javadoc-api'
        }
    }

    // what to keep in the existing branch (include=keep)
    preserve {
        include '/**'
    }

    // message used when committing changes
    commitMessage = 'Publishing a new page' // defaults to 'Generated by gradle-git-publish'
}
classes { dependsOn createProperties }

configurations { testArtifacts.extendsFrom testRuntime }

artifacts { testArtifacts testsJar }
