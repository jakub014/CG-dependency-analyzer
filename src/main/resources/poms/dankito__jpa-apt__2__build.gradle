
def mavenArtifactId = "jpa-apt"


apply from: '../versions.gradle' // remove when developing in library directly

apply plugin: 'java'
apply plugin: 'kotlin'

apply plugin: 'maven'
apply plugin: 'signing'

// So after executing uploadArchives staged repository can be closed and released by executing JPAAnnotationProcessor:closeAndReleaseRepository
apply plugin: 'io.codearte.nexus-staging'


sourceCompatibility = 1.7

compileKotlin.kotlinOptions.jvmTarget = "1.6"

compileTestKotlin.kotlinOptions.jvmTarget = "1.6"


sourceSets {
    test.java.srcDirs += 'build/generated/'
}

dependencies {
    compile "$group:api:$version"
//    compile project(':JPAAnnotationReaderAPI')

    compile "com.squareup:javapoet:$javaPoetVersion"

    testCompile "junit:junit:$junitVersion"
}



/*          publish to maven central            */

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository url: repositories.mavenLocal().url

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name mavenArtifactId
                artifactId = mavenArtifactId
                packaging 'jar'
                // optionally artifactId can be defined here
                description "Reads the JPA (Java Persistence API) annotations of all entities and creates a metamodel from them " +
                            "so that it can be processed by subsequent libraries, e. g. an EntityManager or a JPA provider."
                url 'https://github.com/dankito/jpa-apt'

                scm {
                    connection 'scm:git:git://github.com/dankito/jpa-apt.git'
                    developerConnection 'scm:git:git@github.com:dankito/jpa-apt.git'
                    url 'https://github.com/dankito/jpa-apt'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'dankito'
                        name 'Christian Dankl'
                        email 'maven@dankito.net'
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "net.dankito"
}
