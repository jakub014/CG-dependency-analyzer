import groovy.text.SimpleTemplateEngine

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6"
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'application'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'RawHTTP CLI Tool'
version = rawHttpCliVersion

mainClassName = 'rawhttp.cli.Main'
final runnableJarName = 'rawhttp.jar'

final generatedJavaSources = "$buildDir/java-generated-sources"

sourceSets.main.java.srcDir generatedJavaSources

dependencies {
    implementation project(':rawhttp-core')
    implementation project(':rawhttp-cookies')
    implementation project(':rawhttp-req-in-edit')
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation 'junit:junit:4.12'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'rawhttp.cli',
                'Implementation-Version': version,
                'Implementation-Vendor': 'Renato Athaydes'
    }
}

task fatJar(type: Jar, group: 'build') {
    manifest {
        attributes 'Main-Class': mainClassName
    }

    archiveName = runnableJarName
    classifier "all"
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

ext.runnableJar = new File(buildDir, 'libs/' + runnableJarName).absolutePath

task generateJavaSources(
        description: 'Generates Java sources based on the java-templates directory' ) {
    def properties = project.properties
    def templates = fileTree( dir: 'src/main/java-templates' )
    def destination = file( generatedJavaSources )

    doLast {
        templates.visit { item ->
            def file = item.file
            if ( file.isFile() ) {
                def transformedTemplate = new SimpleTemplateEngine().createTemplate( file ).make( properties )
                new File( destination, item.relativePath.toString() ).withWriter {
                    transformedTemplate.writeTo it
                }
            } else {
                new File( destination, item.relativePath.toString() ).mkdirs()
            }
        }
    }
}

compileJava.dependsOn generateJavaSources

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier "sources"
    extension "jar"
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
}

/* Publishing config */

artifacts {
    archives fatJar, javadocJar, sourcesJar
}

// add all the info required by Maven Central to the pom
configure(install.repositories.mavenInstaller) {
    pom.project {
        inceptionYear '2017'
        name project.name
        packaging 'jar'
        description project.description

        url 'https://renatoathaydes.github.io/rawhttp'

        scm {
            connection 'git@github.com:renatoathaydes/rawhttp.git'
            developerConnection 'git@github.com:renatoathaydes/rawhttp.git'
            url 'https://github.com/renatoathaydes/rawhttp'
        }

        licenses {
            license {
                name 'The Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }

        developers {
            developer {
                id 'renatoathaydes'
                name 'Renato Athaydes'
                email 'renato@athaydes.com'
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

final rawHttpGradle = new RawHttpGradle(project)

bintray {
    user = rawHttpGradle.getGradleProperty("bintrayUserName")
    key = rawHttpGradle.getGradleProperty("bintrayApiKey")
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = 'rawhttp-cli'
        licenses = ['Apache-2.0']
        desc = project.description
        vcsUrl = 'https://github.com/renatoathaydes/rawhttp.git'
        websiteUrl = 'https://renatoathaydes.github.io/rawhttp/rawhttp-modules/cli'
        issueTrackerUrl = 'https://github.com/renatoathaydes/rawhttp/issues'
        labels = ['http', 'java', 'cli']
        publicDownloadNumbers = true

        //noinspection GroovyAssignabilityCheck
        version {
            name = project.version
            vcsTag = project.version
            gpg {
                sign = true
            }
            mavenCentralSync {
                sync = true
                user = project.hasProperty("ossrhUsername") ? ossrhUsername : null
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : null
                close = '1' // '0' to NOT close
            }
        }
    }

}

bintrayUpload.dependsOn build, sourcesJar, fatJar
