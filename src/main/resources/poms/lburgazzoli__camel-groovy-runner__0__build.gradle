plugins {
    id 'signing'
    id 'groovy'
    id 'maven'
    id 'maven-publish'
    id 'net.researchgate.release' version '2.8.1'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

group = 'com.github.lburgazzoli'

ext {
    isSnapshot        = version.endsWith("-SNAPSHOT")
    isRelease         = !isSnapshot
    gitRoot           = "https://github.com/lburgazzoli"
    gitProject        = "https://github.com/lburgazzoli/camel-groovy-runner"
    gitURL            = "git@github.com/lburgazzoli/camel-groovy-runner.git"

    mavenDeployUrl = isSnapshot ?
        'https://oss.sonatype.org/content/repositories/snapshots/' :
        'https://oss.sonatype.org/service/local/staging/deploy/maven2/'

    if(!project.hasProperty('nexusUsername') && !project.hasProperty('nexusPassword')) {
        nexusUsername = "$System.env.NEXUS_USERNAME"
        nexusPassword = "$System.env.NEXUS_PASSWORD"
    }

    versions = [
        slf4j            : '1.7.30',
        camel_k_runtime  : '1.4.1',
        groovy           : '3.0.5',
    ]
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

compileJava   {
    dependsOn processResources

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    implementation "org.codehaus.groovy:groovy:$versions.groovy"

    compile "org.slf4j:slf4j-api:$versions.slf4j"
    compile "org.slf4j:slf4j-simple:$versions.slf4j"

    compile("org.apache.camel.k:camel-k-loader-groovy:$versions.camel_k_runtime")
    compile("org.apache.camel.k:camel-k-runtime-main:$versions.camel_k_runtime") {
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.logging.log4j'
    }
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
    archives javadocJar
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}

signing {
    required {
        isRelease
    }

    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: project.mavenDeployUrl) {
                authentication(
                        userName: project.nexusUsername,
                        password: project.nexusPassword
                )
            }

            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            pom.groupId = project.group
            pom.artifactId = project.name
            pom.version = project.version

            pom.project {
                name project.name
                description project.name
                url project.gitProject

                scm {
                    url project.gitProject
                    connection "scm:${project.gitProject}"
                    developerConnection "scm:${project.gitURL}"
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'lburgazzoli'
                        name 'Luca Burgazzoli'
                    }
                }
            }
        }
    }
}

afterReleaseBuild.dependsOn uploadArchives


task close(dependsOn: 'closeAndReleaseRepository') {
}
