import org.jetbrains.intellij.tasks.RunPluginVerifierTask.FailureLevel

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: "org.jetbrains.changelog"

intellij {
  updateSinceUntilBuild false
  version "IC-${versions.idea}"
  pluginName = 'SQLDelight'
  plugins = [
      "org.jetbrains.kotlin:1.4.21-release-IJ2020.1-1",
      "gradle",
      "com.intellij.java",
      "Groovy",
      "properties",
  ]
  if (!project.version.endsWith("SNAPSHOT")) {
    patchPluginXml {
      changeNotes({ changelog.get(project.version).toHTML() })
    }
  } else {
    patchPluginXml {
      version = "$VERSION_NAME-${System.currentTimeMillis()}"
    }
  }
  // Uncomment to test against Android Studio
  // alternativeIdePath = '/Applications/Android Studio.app'
}

runPluginVerifier {
  ideVersions = [
      "IC-2020.1.4",
      "IC-2020.2.4",
      "IC-2020.3.2",
      "IC-2021.1",
  ]

  def customFailureLevel = FailureLevel.ALL
  customFailureLevel.remove(FailureLevel.DEPRECATED_API_USAGES)
  customFailureLevel.remove(FailureLevel.EXPERIMENTAL_API_USAGES)
  customFailureLevel.remove(FailureLevel.INTERNAL_API_USAGES)
  customFailureLevel.remove(FailureLevel.NOT_DYNAMIC)

  setFailureLevel(customFailureLevel)
}

changelog {
  path = "$rootDir/CHANGELOG.md"
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getPluginToken() {
  return hasProperty('intellijPublishToken') ? intellijPublishToken : ""
}

publishPlugin {
  token = getPluginToken()
  channels(isReleaseBuild() ? 'Stable' : 'EAP')
}

sourceSets {
  main.java.srcDir "src/generated/kotlin"
}

repositories {
  maven { url = uri("https://repo.gradle.org/gradle/libs-releases") }
}

dependencies {
  implementation project(':sqldelight-compiler')

  implementation deps.kotlin.reflect
  implementation deps.sqliteJdbc
  implementation(deps.bugsnag) {
    exclude group: "org.slf4j"
  }

  testImplementation deps.truth
  testImplementation project(':test-util')
}

def getBugsnagKey() {
  return hasProperty('SQLDELIGHT_BUGSNAG_KEY') ? SQLDELIGHT_BUGSNAG_KEY : ''
}

task bugsnagKey {
  def outputDir = file("src/generated/kotlin")
  def versionFile = file("$outputDir/com/squareup/sqldelight/intellij/Bugsnag.kt")

  inputs.property 'bugsnagKey', getBugsnagKey()
  outputs.file(versionFile)

  doLast {
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package com.squareup.sqldelight.intellij

internal val BUGSNAG_KEY = "${getBugsnagKey()}"
"""
  }
}
tasks.named('compileKotlin').configure { dependsOn('bugsnagKey') }
