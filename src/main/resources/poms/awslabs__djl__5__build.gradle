plugins {
    id 'maven-publish'
    id 'signing'
}

apply from: file("${rootProject.projectDir}/tools/gradle/cpp-formatter.gradle")

group = "ai.djl.dlr"
boolean isRelease = project.hasProperty("release") || project.hasProperty("staging")
version = "${dlr_version}" + (isRelease ? "" : "-SNAPSHOT")
def BINARY_ROOT = "${project.buildDir}/download"

def buildJNI(String os) {
    exec {
        commandLine 'bash', 'build.sh'
    }
    def engineDir = "${project.parent.projectDir}/dlr-engine"
    def classifier = "${os}-x86_64"
    def publishDir = "${engineDir}/build/jnilib/${classifier}"
    copy {
        def tree = fileTree(project.buildDir)
        tree.include("libdjl_dlr.*")
        from tree.files
        into publishDir
    }
    // for nightly ci
    // the reason why we duplicate the folder here is to insert djl_version into the path
    // so different versions of JNI wouldn't override each other. We don't also want publishDir
    // to have djl_version as engine would require to know that during the System.load()
    def ciDir = "${project.projectDir}/jnilib/${djl_version}/${classifier}"
    copy {
        from publishDir
        into ciDir
    }
}

task compileJNI {
    doFirst {
        if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("mac")) {
            buildJNI("osx")
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("linux")) {
            buildJNI("linux")
        } else {
            throw new IllegalStateException("Unknown Architecture " + System.properties['os.name'])
        }
    }
}

// Create a placeholder jar without classifier to pass sonatype tests but throws an Exception if loaded
jar {
    def placeholder = "${project.buildDir}/placeholder"
    // this line is to enforce gradle to build the jar
    // otherwise it don't generate the placeholder jar at times
    // when there is no java code inside src/main
    outputs.dir file("build/libs")
    doFirst {
        def versionName = project.version
        if (!isRelease) {
            versionName += String.format("-%s", new Date().format('yyyyMMdd'))
        }
        def dir = file("${placeholder}/native/lib")
        dir.mkdirs()
        def propFile = file("${placeholder}/native/lib/dlr.properties")
        propFile.text = "placeholder=true\nversion=${versionName}\n"
    }

    from placeholder
}

java {
    withJavadocJar()
    withSourcesJar()
}

project.tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

signing {
    required(project.hasProperty("staging") || project.hasProperty("snapshot"))
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing.repositories {
    maven {
        if (project.hasProperty("snapshot")) {
            name = "snapshot"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else if (project.hasProperty("staging")) {
            name = "staging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else {
            name = "local"
            url = "build/repo"
        }
    }
}

task downloadDlrNativeLib() {
    doLast {
        def url = "https://djl-ai.s3.amazonaws.com/publish/dlr-${dlr_version}/native"
        def files = [
                "osx/cpu/libdlr.dylib"       : "cpu/osx/native/lib/libdlr.dylib",
                "linux/cpu/libdlr.so"        : "cpu/linux/native/lib/libdlr.so"
        ]

        files.each { entry ->
            project.logger.lifecycle("Downloading ${url}/${entry.key}")
            def file = new File("${BINARY_ROOT}/${entry.value}")
            file.getParentFile().mkdirs()
            new URL("${url}/${entry.key}").withInputStream { i -> file.withOutputStream { it << i } }
        }
        new File("${BINARY_ROOT}/auto").mkdirs()
    }
}

def flavorNames = file(BINARY_ROOT).list() ?: []
flavorNames.each { flavor ->

    def platformNames = file("${BINARY_ROOT}/${flavor}").list() ?: []

    def artifactsNames = []

    platformNames.each { osName ->
        tasks.create(name: "${flavor}-${osName}Jar", type: Jar) {
            doFirst {
                def propFile = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/dlr.properties")
                propFile.delete()
                def dsStore = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/.DS_Store")
                dsStore.delete()

                def versionName = String.format("${version}-%s", new Date().format('yyyyMMdd'))
                def dir = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib")
                def sb = new StringBuilder()
                sb.append("version=${versionName}\nclassifier=${flavor}-${osName}-x86_64\nlibraries=")
                def first = true
                for (String name : dir.list().sort()) {
                    if (first) {
                        first = false
                    } else {
                        sb.append(',')
                    }
                    sb.append(name)
                }
                propFile.text = sb.toString()
                def metaInf = new File("${BINARY_ROOT}/${flavor}/${osName}/META-INF")
                metaInf.mkdirs()
                def licenseFile = new File(metaInf, "LICENSE")
                licenseFile.text = new URL("https://raw.githubusercontent.com/neo-ai/neo-ai-dlr/master/LICENSE").text

                def binaryLicenseFile = new File(metaInf, "NOTICE")
                binaryLicenseFile.text = new URL("https://raw.githubusercontent.com/neo-ai/neo-ai-dlr/master/NOTICE").text
            }
            from file("${BINARY_ROOT}/${flavor}/${osName}")
            from file("src/main/resources")
            archiveClassifier = "${osName}-x86_64"

            manifest {
                attributes("Automatic-Module-Name": "ai.djl.dlr_native_${flavor}_${osName}")
            }
        }
        artifactsNames.add(tasks["${flavor}-${osName}Jar"])
    }

    // Only publish if the project directory equals the current directory
    // This means that publishing from the main project does not publish the native jars
    // and the native jars have to be published separately
    if (project.getProjectDir().toString() == System.getProperty("user.dir")) {
        publishing.publications.create("${flavor}", MavenPublication) {
            artifactId "dlr-native-${flavor}"
            from components.java
            artifacts = artifactsNames
            artifact jar
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = "DJL release for DLR native binaries"
                description = "Deep Java Library (DJL) provided DLR native library binary distribution"
                url = "http://www.djl.ai/dlr/dlr-native"
                packaging = "jar"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                scm {
                    connection = "scm:git:git@github.com:deepjavalibrary/djl.git"
                    developerConnection = "scm:git:git@github.com:deepjavalibrary/djl.git"
                    url = "https://github.com/deepjavalibrary/djl"
                    tag = "HEAD"
                }

                developers {
                    developer {
                        name = "DJL.AI Team"
                        email = "djl-dev@amazon.com"
                        organization = "Amazon AI"
                        organizationUrl = "https://amazon.com"
                    }
                }
            }
        }
    }
}
