plugins {
    id 'java'
    id 'application'
}

group 'org.eclipse.keyple'

sourceCompatibility = 1.6

String findDependencyVersion(File file) {
    if (file == null) {
        return '+'
    }
    if (new File(file, "VERSION").isFile()) {
        return new File(file, "VERSION").getText('UTF-8').trim()
    }
    return findDependencyVersion(file.getParentFile())
}

ext {
    keyple_v = project.hasProperty("keyple_version") ? keyple_version : findDependencyVersion(new File("$projectDir"))
}

mainClassName = 'org.eclipse.keyple.example.generic.standalone.Demo_CardProtocolDetection.Main_CardProtocolDetection_Pcsc'

/*
 * Local generic example
 */

task('run_generic_Demo_CardProtocolDetection_Pcsc', dependsOn: 'classes', type: JavaExec, group:'keyple') {
    main = 'org.eclipse.keyple.example.generic.standalone.Demo_CardProtocolDetection.Main_CardProtocolDetection_Pcsc'
    classpath = sourceSets.main.runtimeClasspath
}

task('run_generic_Demo_CardProtocolDetection_Stub', dependsOn: 'classes', type: JavaExec, group:'keyple') {
    main = 'org.eclipse.keyple.example.generic.standalone.Demo_CardProtocolDetection.Main_CardProtocolDetection_Stub'
    classpath = sourceSets.main.runtimeClasspath
}

task('run_generic_Demo_ObservableReaderNotification_Pcsc', dependsOn: 'classes', type: JavaExec, group:'keyple') {
    main = 'org.eclipse.keyple.example.generic.standalone.Demo_ObservableReaderNotification.Main_ObservableReaderNotification_Pcsc'
    classpath = sourceSets.main.runtimeClasspath
}

task('run_generic_Demo_ObservableReaderNotification_Stub', dependsOn: 'classes', type: JavaExec, group:'keyple') {
    main = 'org.eclipse.keyple.example.generic.standalone.Demo_ObservableReaderNotification.Main_ObservableReaderNotification_Stub'
    classpath = sourceSets.main.runtimeClasspath
}

task('run_generic_UseCase1_ExplicitSelectionAid_Pcsc', dependsOn: 'classes', type: JavaExec, group:'keyple') {
    main = 'org.eclipse.keyple.example.generic.standalone.UseCase1_ExplicitSelectionAid.Main_ExplicitSelectionAid_Pcsc'
    classpath = sourceSets.main.runtimeClasspath
}

task('run_generic_UseCase2_DefaultSelectionNotification_Pcsc', dependsOn: 'classes', type: JavaExec, group:'keyple') {
    main = 'org.eclipse.keyple.example.generic.standalone.UseCase2_DefaultSelectionNotification.Main_DefaultSelectionNotification_Pcsc'
    classpath = sourceSets.main.runtimeClasspath
}

task('run_generic_UseCase3_SequentialMultiSelection_Pcsc', dependsOn: 'classes', type: JavaExec, group:'keyple') {
    main = 'org.eclipse.keyple.example.generic.standalone.UseCase3_SequentialMultiSelection.Main_SequentialMultiSelection_Pcsc'
    classpath = sourceSets.main.runtimeClasspath
}

task('run_generic_UseCase4_GroupedMultiSelection_Pcsc', dependsOn: 'classes', type: JavaExec, group:'keyple') {
    main = 'org.eclipse.keyple.example.generic.standalone.UseCase4_GroupedMultiSelection.Main_GroupedMultiSelection_Pcsc'
    classpath = sourceSets.main.runtimeClasspath
}

repositories {
    mavenLocal()
    mavenCentral()
    
    //to import keyple snapshots
    maven {url 'https://oss.sonatype.org/content/repositories/snapshots' }
    
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    /* Keyple dependencies */
    project.logger.lifecycle('Using dependency version: ' + keyple_v)
    implementation group: 'org.eclipse.keyple', name: 'keyple-java-core', version: keyple_v
    implementation group: 'org.eclipse.keyple', name: 'keyple-java-calypso', version: keyple_v
    implementation group: 'org.eclipse.keyple', name: 'keyple-java-plugin-pcsc', version: keyple_v
    implementation group: 'org.eclipse.keyple', name: 'keyple-java-plugin-stub', version: keyple_v

    implementation "org.slf4j:slf4j-simple:1.7.25"
    implementation "org.slf4j:slf4j-ext:1.7.25"
}
