apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'org.eclipse.keyple'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

sourceCompatibility = 1.6
archivesBaseName = "keyple-java-core"
project.description ='Keyple Core'

task copyVersionFile {
    //generate properties file META-INF/keyple.properties with version number
    def props = new Properties()
    def dirs = file "src/main/resources/META-INF/"
    dirs.mkdirs()

    def propertyFile = file "src/main/resources/META-INF/keyple-core.properties"

    if(propertyFile.exists()){
        props.load(propertyFile.newDataInputStream())
    }
    
    if(project.version !="unspecified" && project.version != props.getProperty("version")){
        logger.info('Version of keyple core have changed, overwriting src/main/resources/META-INF/keyple-core.properties')
        props.setProperty("version", project.version)
        props.store(propertyFile.newWriter(), "Properties file generated by gradle")
    }else{
        logger.info("Version of keyple hasn't changed")
    }
}

//copy license file from root folder to each generated artifact
task copyLICENSE(type: Copy) {
    from file("${projectDir}/../../../LICENSE")
    into file("${buildDir}/resources/main/META-INF/")
}

//copy notice file from root folder to each generated artifact
task copyNOTICE(type: Copy) {
    from file("${projectDir}/../../../NOTICE.md")
    into file("${buildDir}/resources/main/META-INF/")
}
classes.dependsOn copyLICENSE, copyNOTICE,copyVersionFile

//declare manifest
jar {
    manifest {
        attributes 'Implementation-Title': project.description,
        'Implementation-Version': project.version
    }
}

//generate sources jar
task sourcesJar(type: Jar, dependsOn : classes) {
    classifier = 'sources'
    from sourceSets.main.output, sourceSets.main.java
}

// Javadoc generation
// Copy static custom files (logo)
javadoc {
    doLast {
        copy {
            from "src/main/javadoc/images"
            into "$project.buildDir/docs/javadoc/images"
            include "*.png"
        }
    }
}

// Generate javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    javadoc.options.encoding = 'UTF-8'
    from javadoc.destinationDir
    javadoc.options.overview = "src/main/javadoc/overview.html"
    javadoc.options.setUse(true) // adds the "use" link to the navigation bar
    javadoc.options.setStylesheetFile(file("src/main/javadoc/keyple-stylesheet.css"))
    javadoc.options.setWindowTitle(project.description + " Reference API - " + version)
    javadoc.options.setDocTitle(project.description + " Reference API - " + version)
    javadoc.options.setHeader("<a target=\"_parent\" href=\"https://keyple.org/\"><img src=\"{@docRoot}/images/keyple.png\" height=\"20px\" style=\"background-color: white; padding: 3px; margin: 0 10px -7px 3px;\"/></a><span style=\"line-height: 30px\"> CORE REFERENCE API - " + version + "</span>")
    javadoc.options.setFooter("Copyright &copy; Eclipse Foundation, Inc. All Rights Reserved.")
}

//publish javadoc, sources and jar
artifacts {
    archives sourcesJar, javadocJar
}

//sign if needed (based on the doSign variable)
if (project.getProperties().containsKey("doSign") && doSign=="true") {
    apply plugin: 'signing'

    ext."signing.keyId" = "0C140E36"
    //other properties are defined in the gradle.properties
    signing {
        sign configurations.archives
    }
}

//define local or remote upload repository (based on the doSign variable)
/* from https://central.sonatype.org/pages/gradle.html */
uploadArchives {
    repositories {
        mavenDeployer {
            if (project.getProperties().containsKey("doSign") && doSign=="true") {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }else {
                repository(url: mavenLocal().url)
            }
        }
    }
}

//overwrite pom definition values
uploadArchives {
    repositories {
        mavenDeployer {
            pom.project {
                name project.description
                description project.description
                url "https://projects.eclipse.org/projects/iot.keyple"

                organization("Eclipse Keyple"){
                    name "Eclipse Keyple"
                    url "https://projects.eclipse.org/projects/iot.keyple"
                }

                scm {
                    connection 'scm:git:git://github.com/eclipse/keyple-java.git'
                    developerConnection 'scm:git:https://github.com/eclipse/keyple-java.git'
                    url 'http://github.com/eclipse/keyple-java/tree/master'
                }


                licenses {
                    license {
                        name 'Eclipse Public License - v 2.0'
                        url 'https://www.eclipse.org/legal/epl-2.0/'
                    }
                }

                developers {
                    developer {
                        name 'Olivier Delcroix'
                        email 'odelcroi@gmail.com'
                    }
                    developer {
                        name 'Jean-Pierre Fortune'
                        email 'jean-pierre.fortune@ialto.com'
                    }
                    developer {
                        name 'Pierre Terr√©e'
                        email 'pierre.terree@calypsonet.org'
                    }
                }

                //dependencies mapping is defined manually
                pom.scopeMappings.with {
                    mappings.clear()
                    addMapping(1, configurations.api, 'compile')//only keyple core add slf4j-api as a compile dependency
                    addMapping(2, configurations.testImplementation, 'test')
                }

            }
        }
    }
}

task installCore{
    group 'keyple'
    description 'Builds and installs the keyple core library into maven local repository'
    dependsOn ':java:component:keyple-core:uploadArchives'

    doLast {
        println "Keyple Core library ${project.version} has been installed into maven local repo at path : " + project.getRepositories().get(0).getAt("url")
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

test.finalizedBy jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectKey", "eclipse_keyple-core"
        property "sonar.organization", "eclipse"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv('SONAR_LOGIN')
        property "sonar.branch.name", System.getenv('BRANCH_NAME')
    }
}

dependencies {
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    api "org.slf4j:slf4j-api:${slf4japi_version}"

    api "com.google.code.gson:gson:${gson_version}"

    testImplementation "junit:junit:${junit_version}"

    // https://search.maven.org/artifact/org.assertj/assertj-core/2.9.1/bundle
    testImplementation "org.assertj:assertj-core:${assertj_version}"

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation "org.mockito:mockito-core:${mockitocore_version}"

    //add slf4j simple logger implementation
    testImplementation "org.slf4j:slf4j-simple:${slf4jsimple_version}"
}
