description = "H2O Documentation"

apply plugin: 'base'

// Latex Booklets
// --------------

def bookletPath = file("src/booklets/v2_2015/source")
def bookletOutputPath = file("src/booklets/v2_2015/source/build")
def bookletList = [
            "GLMBooklet",
            "GBMBooklet",
            "DeepLearningBooklet",
            "RBooklet",
            "PythonBooklet"
]

task(createBuildInfoTex) {
    doLast {
        H2OBuildVersion bv = new H2OBuildVersion(rootDir, version);
        File f = new File(bookletPath, "generated_buildinfo.tex");
        StringBuilder sb = new StringBuilder();
        sb.append('%\n')
        sb.append('% Generated by ./gradlew booklets\n')
        sb.append('%\n')
        sb.append('\\newcommand{\\waterVersion}{')
        sb.append(bv.getProjectVersion())
        sb.append('}\n')
        f.write(sb.toString())
        if (!bookletOutputPath.exists()) {
            bookletOutputPath.mkdirs()
        }
    }
}

// Note: The '6' here is the number of items in the list of booklets.
bookletList.eachWithIndex {
    name, counter ->
        // Define 0. stage - compilation
        task "compile_${counter}_0"(type: Exec, dependsOn: createBuildInfoTex) {
            workingDir bookletPath
            commandLine 'pdflatex', '-halt-on-error', name
            doFirst {
              standardOutput = new FileOutputStream("$bookletOutputPath/gradle_" + name + "_" + counter + "_0.out")
            }
        }
        // Define 1. stage - compilation via bibtex
        task "compile_${counter}_1"(type: Exec, dependsOn: "compile_${counter}_0") {
            workingDir bookletPath
            commandLine 'bibtex', name
            doFirst {
                standardOutput = new FileOutputStream(
                        "$bookletOutputPath/gradle_" + name + "_" + counter +
                        "_0.out")
            }
        }
        // Define 2. stage - compile via pdftex
        task "compile_${counter}_2"(type: Exec, dependsOn: "compile_${counter}_1") {
            workingDir bookletPath
            commandLine 'pdflatex', '-halt-on-error', name
            doFirst {
                standardOutput =
              new FileOutputStream("$bookletOutputPath/gradle_" + name + "_" + counter + "_0.out")
            }
        }
        // Define 3. stage - final compilation via pdflatex
        task "compile_${counter}_3"(type: Exec, dependsOn: "compile_${counter}_2") {
            workingDir bookletPath
            commandLine 'pdflatex', '-halt-on-error', name
            doFirst {
              new FileOutputStream("$bookletOutputPath/gradle_" + name + "_" + counter + "_0.out")
            }
        }
}

// compile_X_Y
//
// X is the counter number
//   See bookletList
//
// Y is the phase
//   phase 0 pdflatex
//   phase 1 bibtex
//   phase 2 pdflatex
//   phase 3 pdflatex
//
task compileBooklets(dependsOn: ["compile_0_3", "compile_1_3", "compile_2_3", "compile_3_3", "compile_4_3"])

task cleanBooklets(type: Delete) {
    delete bookletOutputPath,
            fileTree(dir: file(bookletPath), include: '*.out'),
            fileTree(dir: file(bookletPath), include: '*.pdf'),
            fileTree(dir: file(bookletPath), include: '*.blg'),
            fileTree(dir: file(bookletPath), include: '*.log'),
            fileTree(dir: file(bookletPath), include: '*.aux'),
            fileTree(dir: file(bookletPath), include: '*.toc'),
            fileTree(dir: file(bookletPath), include: '*.synctex'),
            fileTree(dir: file(bookletPath), include: 'generated_buildinfo.tex')
}

task booklets(dependsOn: compileBooklets)

clean.dependsOn cleanBooklets

// create sphinx documentation project version number

def sphinxProjectVersionFile = new File("$rootDir/h2o-docs/src/product/project_version")

task(createSphinxProjectVersionNumber) {
    doLast {
        H2OBuildVersion bv = new H2OBuildVersion(rootDir, version);
        File f = new File("$sphinxProjectVersionFile");
        StringBuilder sb = new StringBuilder();
        sb.append(bv.getProjectVersion())
        sb.append('\n')
        f.write(sb.toString())
    }
}

build.dependsOn createSphinxProjectVersionNumber

task cleanSphinxProjectVersionNumber(type:Delete) {
    delete "$sphinxProjectVersionFile"
}

clean.dependsOn cleanSphinxProjectVersionNumber
