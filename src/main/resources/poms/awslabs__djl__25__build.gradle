plugins {
    id 'application'
}

dependencies {
    implementation "io.netty:netty-all:${netty_version}"
    implementation "com.google.code.gson:gson:${gson_version}"
    implementation "commons-cli:commons-cli:${commons_cli_version}"
    implementation "org.slf4j:slf4j-api:${slf4j_version}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.12.1"
    implementation project(":api")

    runtimeOnly project(':model-zoo')
    runtimeOnly project(':mxnet:mxnet-model-zoo')
    runtimeOnly project(':tensorflow:tensorflow-model-zoo')
    runtimeOnly project(':pytorch:pytorch-model-zoo:')

    runtimeOnly "ai.djl.mxnet:mxnet-native-auto:${mxnet_version}"
    runtimeOnly "ai.djl.pytorch:pytorch-native-auto:${pytorch_version}"
    runtimeOnly "ai.djl.tensorflow:tensorflow-native-auto:${tensorflow_version}"

    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'ai.djl.serving.ModelServer'
    }
    includeEmptyDirs = false
    from configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }

    exclude "META-INF/maven/**"
    exclude "META-INF/INDEX.LIST"
    exclude "META-INF/MANIFEST*"
}

application {
    mainClassName = System.getProperty("main", "ai.djl.serving.ModelServer")
}

run {
    environment("TF_CPP_MIN_LOG_LEVEL", "1") // turn off TensorFlow print out
    environment("MXNET_ENGINE_TYPE", "NaiveEngine")
    environment("OMP_NUM_THREADS", "1")
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
    applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=4000"]
}

startScripts {
    defaultJvmOpts = []
    doLast {
        String text = unixScript.text.replace('exec "$JAVACMD" "$@"', 'exec env OMP_NUM_THREADS="1" MXNET_ENGINE_TYPE="NaiveEngine" TF_CPP_MIN_LOG_LEVEL=1 TF_NUM_INTRAOP_THREADS=1 "$JAVACMD" "$@"')
        text = text.replace('DEFAULT_JVM_OPTS=""', 'if [[ "${MODEL_SERVER_HOME}" = "" ]] ; then\n' +
                '    export MODEL_SERVER_HOME=${APP_HOME}\n' +
                'fi\n' +
                'DEFAULT_JVM_OPTS="-Dlog4j.configurationFile=${APP_HOME}/conf/log4j2.xml"\n')
        text = text.replaceAll('CLASSPATH=\\$APP_HOME/lib/.*', 'CLASSPATH=\\$APP_HOME/lib/*')
        unixScript.text = text
    }
}

applicationDistribution.from("src/main/conf/") {
    into "conf"
}
tasks.distZip.enabled = false
tasks.test.dependsOn(
        ":serving:central:jar",
        ":serving:serving-plugins:plugin-managment-plugin:jar",
        ":serving:serving-plugins:static-file-plugin:jar")
