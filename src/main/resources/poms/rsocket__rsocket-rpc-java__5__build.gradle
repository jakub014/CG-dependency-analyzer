import static org.apache.tools.ant.taskdefs.condition.Os.*

plugins {
    id 'com.google.protobuf'
}

description = 'RSocket RPC Library'

dependencies {
    compile project(':rsocket-ipc-core')
    implementation 'com.google.protobuf:protobuf-java'
    implementation 'org.slf4j:slf4j-api'

    api 'io.opentracing:opentracing-api'
    api 'javax.inject:javax.inject'
    api 'javax.annotation:javax.annotation-api'
    api 'io.rsocket:rsocket-core'
    api 'io.micrometer:micrometer-core'

    protobuf project(':rsocket-rpc-metrics-idl')

    testImplementation 'io.opentracing.brave:brave-opentracing'
    testImplementation 'junit:junit'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.vintage:junit-vintage-engine'

    testImplementation 'javax.inject:javax.inject'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'com.google.protobuf:protobuf-java'
    testImplementation 'org.hdrhistogram:HdrHistogram'
    testImplementation 'org.apache.logging.log4j:log4j-api'
    testImplementation 'org.apache.logging.log4j:log4j-core'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl'
    testImplementation 'io.rsocket:rsocket-transport-netty'
    testImplementation 'io.rsocket:rsocket-transport-local'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.zipkin.reporter2:zipkin-sender-okhttp3'
}

def protocPluginBaseName = "rsocket-rpc-protobuf-${osdetector.os}-${osdetector.arch}"
def javaPluginPath = "$rootDir/rsocket-rpc-protobuf/build/exe/java_plugin/$protocPluginBaseName"

if(isFamily(FAMILY_WINDOWS)){
    javaPluginPath = javaPluginPath + ".exe"
}

protobuf {
    generatedFilesBaseDir = "${projectDir}/src/generated"

    protoc {
        artifact = "com.google.protobuf:protoc"
    }
    plugins {
        rsocketRpc {
            path = javaPluginPath
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.dependsOn ':rsocket-rpc-protobuf:java_pluginExecutable'
            // Recompile protos when the codegen has been changed
            task.inputs.file javaPluginPath
            // Recompile protos when build.gradle has been changed, because
            // it's possible the version of protoc has been changed.
            task.inputs.file "${rootProject.projectDir}/build.gradle"
            task.plugins {
                rsocketRpc {}
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}
