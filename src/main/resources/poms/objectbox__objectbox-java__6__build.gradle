apply plugin: 'java-library'

uploadArchives.enabled = false

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    // Native lib might be deployed only in internal repo
    if (project.hasProperty('gitlabUrl')) {
        println "gitlabUrl=$gitlabUrl added to repositories."
        maven {
            url "$gitlabUrl/api/v4/groups/objectbox/-/packages/maven"
            name "GitLab"
            credentials(HttpHeaderCredentials) {
                name = 'Private-Token'
                value = gitlabPrivateToken
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    } else {
        println "Property gitlabUrl not set."
    }
}

dependencies {
    implementation project(':objectbox-java')
    implementation "org.greenrobot:essentials:$essentials_version"

    // Check flag to use locally compiled version to avoid dependency cycles
    if (!project.hasProperty('noObjectBoxTestDepencies') || !noObjectBoxTestDepencies) {
        println "Using $ob_native_dep"
        implementation ob_native_dep
    } else {
        println "Did NOT add native dependency"
    }

    testImplementation "junit:junit:$junit_version"
}

test {
    // to run tests with 32-bit ObjectBox
    if (System.getenv('TEST_WITH_JAVA_X86') == 'true') {
        def javaExecutablePath = System.getenv("JAVA_HOME_X86") + "\\bin\\java"
        println "Running tests with ${javaExecutablePath}"
        executable = javaExecutablePath
    }

    // This is pretty useless now because it floods console with warnings about internal Java classes
    // However we might check from time to time, also with Java 9.
    // jvmArgs '-Xcheck:jni'

    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        displayGranularity = 2
        events 'started', 'passed'
    }
}