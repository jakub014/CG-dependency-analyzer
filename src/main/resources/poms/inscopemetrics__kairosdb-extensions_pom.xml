<?xml version="1.0"?>
<!--
  ~ Copyright 2016 Groupon.com
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <parent>
    <groupId>io.inscopemetrics.build</groupId>
    <artifactId>parent-pom</artifactId>
    <version>2.3.1</version>
    <relativePath />
  </parent>

  <modelVersion>4.0.0</modelVersion>
  <groupId>io.inscopemetrics.kairosdb</groupId>
  <artifactId>kairosdb-extensions</artifactId>
  <packaging>jar</packaging>
  <name>KairosDB Extensions</name>
  <description>Extensions for KairosDB.</description>
  <version>2.3.3-SNAPSHOT</version>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
      <comments>A business-friendly OSS license</comments>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>barp</id>
      <name>Brandon Arp</name>
      <email>brandon.arp@inscopemetrics.io</email>
      <organization>Inscope Metrics</organization>
      <organizationUrl>http://www.inscopemetrics.io</organizationUrl>
      <roles>
        <role>developer</role>
      </roles>
    </developer>
    <developer>
      <id>vkoskela</id>
      <name>Ville Koskela</name>
      <email>ville.koskela@inscopemetrics.io</email>
      <organization>Inscope Metrics</organization>
      <organizationUrl>http://www.inscopemetrics.io</organizationUrl>
      <roles>
        <role>developer</role>
      </roles>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:git@github.com:InscopeMetrics/kairosdb-extensions.git</connection>
    <developerConnection>scm:git:git@github.com:InscopeMetrics/kairosdb-extensions.git</developerConnection>
    <url>https://github.com/inscopemetrics/kairosdb-extensions</url>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <!-- Dependency Versions -->
    <aspectjrt.version>1.8.9</aspectjrt.version>
    <spotbugs.annotations.version>4.0.3</spotbugs.annotations.version>

    <!-- Provided by KairosDB
         NOTE: These need to be kept synchronized wrt version when KairosDB version changes -->
    <apache.httpclient.version>4.3.6</apache.httpclient.version>
    <apache.httpcore.version>4.3.3</apache.httpcore.version>
    <arpnetworking.commons.version>1.20.0</arpnetworking.commons.version>
    <gson.version>2.2.4</gson.version>
    <guava.version>19.0</guava.version>
    <guice.version>4.1.0</guice.version>
    <javax.inject.version>1</javax.inject.version>
    <javax.validation.api.version>1.0.0.GA</javax.validation.api.version>
    <joda.version>2.3</joda.version>
    <jsr305.version>2.0.2</jsr305.version>
    <kairosdb.version>1.2.23</kairosdb.version>
    <kairosdb.format.version>0.1.0</kairosdb.format.version>
    <org.json.version>chargebee-1.0</org.json.version>
    <slf4j.version>1.7.2</slf4j.version>

    <!-- Test Dependency Versions -->
    <apache.math3.version>3.2</apache.math3.version>
    <hamcrest.version>2.2</hamcrest.version>
    <junit.version>4.13.1</junit.version>
    <junit.benchmarks.version>0.7.2</junit.benchmarks.version>
    <metrics.generator.version>1.3.1</metrics.generator.version>
    <metrics.client.version>0.11.2</metrics.client.version>
    <mockito.version>2.23.4</mockito.version>
    <performance.test.version>1.2.1</performance.test.version>

    <!-- Plugin Versions -->
    <docker.maven.plugin.version>0.33.0</docker.maven.plugin.version>
    <maven.assembly.plugin.version>3.3.0</maven.assembly.plugin.version>
    <rpm.maven.plugin.version>2.2.0</rpm.maven.plugin.version>

    <!-- Code Coverage -->
    <jacoco.check.line.coverage>0.53</jacoco.check.line.coverage>
    <jacoco.check.branch.coverage>0.65</jacoco.check.branch.coverage>
    <jacoco.check.cyclomatic.complexity>20.0</jacoco.check.cyclomatic.complexity>

    <!-- Assembly -->
    <tgz.finalName>${project.build.finalName}</tgz.finalName>

    <!-- Project -->
    <buildDirectory>${project.basedir}/target</buildDirectory>

    <!-- JVM -->
    <dockerJavaOptions />
    <debugJavaPort>9004</debugJavaPort>

    <!-- Docker Overrides -->
    <skipDockerBuild>false</skipDockerBuild>
    <docker.skip.cassandra>false</docker.skip.cassandra>
    <docker.cassandra.version>3.11</docker.cassandra.version>
  </properties>
  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <!-- Configure Inherited Plugins -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <dockerHostAddress>${docker.host.address}</dockerHostAddress>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.rimerosolutions.maven.plugins</groupId>
        <artifactId>wrapper-maven-plugin</artifactId>
        <inherited>false</inherited>
      </plugin>

      <!-- Project Specific Plugins -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${maven.clean.plugin.version}</version>
        <executions>
          <execution>
            <id>clean-assemblies</id>
            <phase>initialize</phase>
            <goals>
              <goal>clean</goal>
            </goals>
            <configuration>
             <excludeDefaultDirectories>true</excludeDefaultDirectories>
             <verbose>true</verbose>
             <filesets>
                <fileset>
                  <directory>${project.build.directory}/docker-assembly</directory>
                </fileset>
              </filesets>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${maven.assembly.plugin.version}</version>
        <executions>
          <execution>
            <id>docker-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
              <finalName>docker-assembly</finalName>
              <attach>false</attach>
              <tarLongFileMode>posix</tarLongFileMode>
              <descriptors>
                <descripto>src/main/assembly/docker.xml</descripto>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>bin-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <finalName>${tgz.finalName}</finalName>
              <appendAssemblyId>true</appendAssemblyId>
              <attach>false</attach>
              <tarLongFileMode>posix</tarLongFileMode>
              <descriptors>
                <descripto>src/main/assembly/bin.xml</descripto>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <id>default-build</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
          <execution>
            <id>default-start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <skip>${skipIntegrationTests}</skip>
            </configuration>
          </execution>
          <execution>
            <id>default-stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <skip>${skipIntegrationTests}</skip>
            </configuration>
          </execution>
          <execution>
            <id>default-push</id>
            <phase>deploy</phase>
            <goals>
              <goal>push</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
          <showLogs>true</showLogs>
          <images>
            <!-- Cassandra -->
            <image>
              <name>cassandra:${docker.cassandra.version}</name>
              <alias>cassandra</alias>
              <run>
                <skip>${docker.skip.cassandra}</skip>
                <network>
                  <mode>custom</mode>
                  <name>kdb-ext-net</name>
                  <alias>cassandra</alias>
                </network>
                <ports>
                  <port>+cassandra.ip:7000:7000</port>
                  <port>+cassandra.ip:9042:9042</port>
                </ports>
                <wait>
                  <log>Starting listening for CQL clients on</log>
                  <time>30000</time>
                </wait>
              </run>
            </image>
            <!-- KairosDb -->
            <image>
              <name>inscopemetrics/kairosdb-extensions:${project.version}</name>
              <alias>kairosdb</alias>
              <build>
                <dockerFile>${project.build.directory}/docker-assembly/Dockerfile</dockerFile>
                <tags>
                  <tag>${buildNumber}</tag>
                </tags>
              </build>
              <run>
                <dependsOn>
                  <container>cassandra</container>
                </dependsOn>
                <network>
                  <mode>custom</mode>
                  <name>kdb-ext-net</name>
                  <alias>kairosdb</alias>
                </network>
                <ports>
                  <port>+kairosdb.ip:${debugJavaPort}:${debugJavaPort}</port>
                  <port>+kairosdb.ip:8082:8080</port>
                </ports>
                <env>
                  <JAVA_OPTS>-Dkairosdb.datastore.cassandra.cql_host_list=cassandra -Dkairosdb.queue_processor.class=org.kairosdb.core.queue.MemoryQueueProcessor ${dockerJavaOptions}</JAVA_OPTS>
                  <!-- TODO(ville): Obtain these from the current user! -->
                  <!-- Ref: https://github.com/rynr/user-id-maven-plugin -->
                  <KDB_UID>1000</KDB_UID>
                  <KDB_GID>1000</KDB_GID>
                </env>
                <volumes>
                  <bind>
                    <volume>${project.basedir}/logs/docker:/opt/kairosdb/logs</volume>
                  </bind>
                </volumes>
                <wait>
                  <http>
                    <url>http://${kairosdb.ip}:8082/api/v1/health/status</url>
                    <method>GET</method>
                    <status>200</status>
                  </http>
                  <time>30000</time>
                  <kill>1000</kill>
                </wait>
              </run>
            </image>
          </images>
          <skip>${skipDockerBuild}</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <!-- Provided by KairosDb (directly or transitively)
         NOTE: These need to be kept synchronized wrt order when KairosDB version changes -->
    <dependency>
      <groupId>io.inscopemetrics.kairosdb</groupId>
      <artifactId>kairosdb</artifactId>
      <version>${kairosdb.version}</version>
      <scope>provided</scope>
      <exclusions>
        <!-- TODO(ville): Remove suppression once findbugs to spotbugs migration is complete -->
        <exclusion>
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>findbugs-annotations</artifactId>
        </exclusion>
        <!-- TODO(ville): Remove once KairosDb marks Hamcrest for test. -->
        <exclusion>
          <groupId>org.hamcrest</groupId>
          <artifactId>hamcrest-library</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <!-- Transitively via guava-retrying -->
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <version>${jsr305.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.json</groupId>
      <artifactId>org.json</artifactId>
      <version>${org.json.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>${gson.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <!-- Transitively locked by KairosDb; although here only a test dependency -->
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>${apache.httpclient.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <!-- Transitively locked by KairosDb; although here only a test dependency -->
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <version>${apache.httpcore.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>${guice.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <!-- Transitively via guice-parent -->
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <version>${javax.inject.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>${joda.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <version>${javax.validation.api.version}</version>
      <scope>provided</scope>
    </dependency>
    <!-- Dependencies -->
    <dependency>
      <groupId>com.arpnetworking.commons</groupId>
      <artifactId>commons</artifactId>
      <version>${arpnetworking.commons.version}</version>
    </dependency>
    <dependency>
      <groupId>io.inscopemetrics.kairosdb</groupId>
      <artifactId>format</artifactId>
      <version>${kairosdb.format.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-annotations</artifactId>
      <version>${spotbugs.annotations.version}</version>
      <exclusions>
        <!-- TODO(ville): Remove suppression once KairosDb updates jsr305 dependency -->
        <exclusion>
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>jsr305</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- Test -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
      <exclusions>
        <!-- TODO(ville): Remove once JUnit depends on modern hamcrest; see:
            http://hamcrest.org/JavaHamcrest/distributables
        -->
        <exclusion>
          <groupId>org.hamcrest</groupId>
          <artifactId>hamcrest-core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-math3</artifactId>
      <version>${apache.math3.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.arpnetworking.metrics</groupId>
      <artifactId>generator</artifactId>
      <version>${metrics.generator.version}</version>
      <scope>test</scope>
      <exclusions>
        <!-- TODO(ville): Remove suppression once KairosDb updates jsr305 dependency -->
        <exclusion>
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>jsr305</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.arpnetworking.metrics</groupId>
      <artifactId>metrics-client</artifactId>
      <version>${metrics.client.version}</version>
      <scope>test</scope>
      <exclusions>
        <!-- TODO(ville): Remove suppression once KairosDb updates jsr305 dependency -->
        <exclusion>
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>jsr305</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.carrotsearch</groupId>
      <artifactId>junit-benchmarks</artifactId>
      <version>${junit.benchmarks.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.arpnetworking.test</groupId>
      <artifactId>performance-test</artifactId>
      <version>${performance.test.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>rpm</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>rpm-maven-plugin</artifactId>
            <version>${rpm.maven.plugin.version}</version>
            <executions>
              <execution>
                <id>generate-rpm</id>
                <goals>
                  <goal>rpm</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <license>Apache 2 License</license>
              <group>System Environment/Daemons</group>
              <autoRequires>false</autoRequires>
              <requires>
                <require>java &gt;= ${jdk.version}</require>
              </requires>
              <mappings>
                <mapping>
                  <directory>/opt/kairosdb/lib</directory>
                  <sources>
                    <source>
                      <location>${buildDirectory}/docker-assembly/deps</location>
                    </source>
                    <source>
                      <location>${buildDirectory}/docker-assembly/lib</location>
                    </source>
                  </sources>
                  <directoryIncluded>false</directoryIncluded>
                </mapping>
                <mapping>
                  <directory>/opt/kairosdb/conf</directory>
                  <sources>
                    <source>
                      <location>${buildDirectory}/docker-assembly/config</location>
                    </source>
                  </sources>
                  <directoryIncluded>false</directoryIncluded>
                </mapping>
              </mappings>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>debug</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>debug</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <dockerJavaOptions>-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${debugJavaPort},suspend=y</dockerJavaOptions>
      </properties>
    </profile>
    <profile>
      <id>no-docker</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <skipIntegrationTests>true</skipIntegrationTests>
        <skipDockerBuild>true</skipDockerBuild>
      </properties>
    </profile>
    <profile>
      <id>unitPerformanceTest</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>${maven.surefire.plugin.version}</version>
            <executions>
              <execution>
                <id>default-test</id>
                <configuration>
                  <includes>
                    <include>**/*TestPerf.java</include>
                  </includes>
                  <parallel combine.self="override" />
                  <forkMode>always</forkMode>
                  <forkCount>1</forkCount>
                  <reuseForks>false</reuseForks>
                  <argLine combine.self="override">-agentlib:hprof=cpu=samples,depth=20,interval=10,force=y,verbose=y,doe=n,file=${project.build.directory}/perf.unit.hprof.txt -Dlogback.configurationFile="logback-perf.xml"</argLine>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
